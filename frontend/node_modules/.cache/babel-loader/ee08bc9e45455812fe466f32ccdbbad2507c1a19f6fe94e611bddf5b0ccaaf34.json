{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\StoreOrganizerFixed.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// StoreOrganizerFixed.js\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragOverlay } from \"@dnd-kit/core\";\nimport { SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\n\n// Sortable ingredient component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortableIngredient = ({\n  ingredient,\n  index\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: `ingredient-${ingredient.id}`,\n    data: {\n      type: 'ingredient',\n      ingredient\n    }\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.4 : 1,\n    cursor: 'grab',\n    userSelect: 'none'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    className: `ingredient-item ${isDragging ? 'dragging' : ''}`,\n    ...attributes,\n    ...listeners,\n    \"data-id\": ingredient.id,\n    children: ingredient.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n// Section component\n_s(SortableIngredient, \"iGm8Pp/8VGCO0ItME/dsmuAda4I=\", false, function () {\n  return [useSortable];\n});\n_c = SortableIngredient;\nconst Section = ({\n  section,\n  activeDroppableId,\n  onRemove\n}) => {\n  // Generate a unique key for the section's sortable context\n  const getSectionContextKey = section => `section-context-${section.id}-${section.ingredients.length}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `section-card ${activeDroppableId === `section-${section.id}` ? 'drop-target' : ''}`,\n    id: `section-${section.id}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: section.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"remove-section-btn\",\n        onClick: () => onRemove(section.id),\n        children: \"\\u2715\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n      id: `section-${section.id}`,\n      items: section.ingredients.map(i => `ingredient-${i.id}`),\n      strategy: verticalListSortingStrategy,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ingredient-list\",\n        \"data-section-id\": section.id,\n        children: section.ingredients.length > 0 ? section.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(SortableIngredient, {\n          ingredient: ingredient,\n          index: index\n        }, `${section.id}-ingredient-${ingredient.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-section\",\n          children: \"Drag ingredients here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, getSectionContextKey(section), false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, section.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n// Main component\n_c2 = Section;\nconst StoreOrganizerFixed = () => {\n  _s2();\n  var _sections$find, _sections$find2;\n  const navigate = useNavigate();\n  const [sections, setSections] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [activeId, setActiveId] = useState(null);\n  const [activeDragData, setActiveDragData] = useState(null);\n  const [activeDroppableId, setActiveDroppableId] = useState(null);\n\n  // Sensors for drag detection\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n\n  // Load data on startup\n  useEffect(() => {\n    // Initial data loading\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch stores\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          const storeId = storesData[0].id;\n          setSelectedStore(storeId);\n\n          // Fetch sections for this store\n          await fetchSections(storeId);\n        } else {\n          // Create a default store\n          await createDefaultStore();\n        }\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Debug helper for sections state\n  useEffect(() => {\n    console.log(\"🔄 Sections updated:\", sections.map(s => ({\n      id: s.id,\n      name: s.name,\n      ingredients: s.ingredients.map(i => i.id)\n    })));\n  }, [sections]);\n\n  // Function to fetch sections for a store\n  const fetchSections = async storeId => {\n    try {\n      // Get sections\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n      const sectionsData = await sectionsResponse.json();\n\n      // Initialize sections with empty ingredients\n      const sectionsWithIngredients = sectionsData.map(section => ({\n        ...section,\n        ingredients: []\n      }));\n\n      // Fetch all ingredients\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\n      const ingredientsData = await ingredientsResponse.json();\n      if (ingredientsData.length === 0) {\n        setSections(sectionsWithIngredients);\n        setLoading(false);\n        return;\n      }\n\n      // Get ingredient-section mappings\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n      const mappingsData = await mappingsResponse.json();\n\n      // Create section map for easier lookup\n      const sectionMap = {};\n      sectionsWithIngredients.forEach(section => {\n        sectionMap[section.id] = {\n          ...section,\n          ingredients: []\n        };\n      });\n\n      // Create uncategorized section\n      const uncategorizedSection = {\n        id: \"uncategorized\",\n        name: \"Uncategorized\",\n        ingredients: []\n      };\n\n      // Assign ingredients to sections\n      ingredientsData.forEach(ingredient => {\n        const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\n        if (mapping && sectionMap[mapping.section_id]) {\n          sectionMap[mapping.section_id].ingredients.push(ingredient);\n        } else {\n          uncategorizedSection.ingredients.push(ingredient);\n        }\n      });\n\n      // Build the final sections array\n      let finalSections = Object.values(sectionMap);\n\n      // Add uncategorized if it has ingredients\n      if (uncategorizedSection.ingredients.length > 0) {\n        finalSections.push(uncategorizedSection);\n      }\n      console.log(\"Sections loaded:\", finalSections);\n      setSections(finalSections);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching sections:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Create a default store if none exists\n  const createDefaultStore = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: \"My Store\",\n          sections: [{\n            name: \"Produce\",\n            order: 0\n          }, {\n            name: \"Dairy\",\n            order: 1\n          }, {\n            name: \"Meat\",\n            order: 2\n          }, {\n            name: \"Bakery\",\n            order: 3\n          }, {\n            name: \"Frozen\",\n            order: 4\n          }, {\n            name: \"Canned Goods\",\n            order: 5\n          }, {\n            name: \"Uncategorized\",\n            order: 6\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.store_id) {\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n          await fetchSections(storesData[0].id);\n        }\n      }\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error creating default store:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Change the selected store\n  const handleStoreChange = e => {\n    const storeId = e.target.value;\n    setSelectedStore(storeId);\n    fetchSections(storeId);\n  };\n\n  // Add a new section\n  const addNewSection = () => {\n    if (!newSectionName.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      name: newSectionName,\n      order: sections.length,\n      ingredients: []\n    };\n    setSections([...sections, newSection]);\n    setNewSectionName(\"\");\n  };\n\n  // Remove a section\n  const removeSection = sectionId => {\n    // Find the section to remove\n    const sectionToRemove = sections.find(s => s.id.toString() === sectionId.toString());\n    if (!sectionToRemove) return;\n\n    // Make a copy of the sections array\n    const newSections = [...sections];\n\n    // Find or create the uncategorized section\n    let uncategorizedIndex = newSections.findIndex(s => s.id === \"uncategorized\");\n    if (uncategorizedIndex === -1) {\n      // Need to create uncategorized section\n      const uncategorized = {\n        id: \"uncategorized\",\n        name: \"Uncategorized\",\n        ingredients: [...sectionToRemove.ingredients] // Move ingredients here\n      };\n\n      // Filter out the section to remove and add uncategorized\n      setSections([...newSections.filter(s => s.id.toString() !== sectionId.toString()), uncategorized]);\n    } else {\n      // Update the existing uncategorized section\n      const updatedSections = [...newSections];\n\n      // Add the ingredients to uncategorized\n      updatedSections[uncategorizedIndex] = {\n        ...updatedSections[uncategorizedIndex],\n        ingredients: [...updatedSections[uncategorizedIndex].ingredients, ...sectionToRemove.ingredients]\n      };\n\n      // Remove the section\n      setSections(updatedSections.filter(s => s.id.toString() !== sectionId.toString()));\n    }\n  };\n\n  // Save the organization to the backend\n  const saveOrganization = async () => {\n    try {\n      // Format sections data for API\n      const sectionData = sections.filter(section => section.id !== \"uncategorized\").map(section => ({\n        id: section.id.toString().startsWith('temp-') ? null : section.id,\n        name: section.name,\n        ingredients: section.ingredients.map((ingredient, index) => ({\n          id: ingredient.id,\n          name: ingredient.name,\n          order: index\n        }))\n      }));\n\n      // Add uncategorized if it exists\n      const uncategorizedSection = sections.find(s => s.id === \"uncategorized\");\n      if (uncategorizedSection && uncategorizedSection.ingredients.length > 0) {\n        sectionData.push({\n          id: null,\n          name: \"Uncategorized\",\n          ingredients: uncategorizedSection.ingredients.map((ingredient, index) => ({\n            id: ingredient.id,\n            name: ingredient.name,\n            order: index\n          }))\n        });\n      }\n\n      // Send to API\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save organization\");\n      }\n\n      // Show success message\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n\n  // Drag & Drop Handlers\n  const handleDragStart = event => {\n    var _active$data$current;\n    const {\n      active\n    } = event;\n    setActiveId(active.id);\n    setActiveDragData(((_active$data$current = active.data.current) === null || _active$data$current === void 0 ? void 0 : _active$data$current.ingredient) || null);\n  };\n  const handleDragOver = event => {\n    const {\n      over\n    } = event;\n    if (!over) {\n      setActiveDroppableId(null);\n      return;\n    }\n\n    // Determine proper drop target\n    if (over.id.startsWith('section-')) {\n      setActiveDroppableId(over.id);\n    } else if (over.id.startsWith('ingredient-')) {\n      // Find which section this ingredient belongs to\n      const ingredientId = over.id.replace('ingredient-', '');\n      for (const section of sections) {\n        if (section.ingredients.some(i => i.id.toString() === ingredientId)) {\n          setActiveDroppableId(`section-${section.id}`);\n          break;\n        }\n      }\n    }\n  };\n  const handleDragEnd = event => {\n    var _active$data$current2;\n    console.log(\"⚡ Drag End Event:\", event);\n    const {\n      active,\n      over\n    } = event;\n\n    // Clear states\n    setActiveDroppableId(null);\n    setActiveId(null);\n    setActiveDragData(null);\n    if (!active || !over) {\n      console.log(\"No valid drag targets\");\n      return;\n    }\n    console.log(\"Active:\", active.id, \"Over:\", over.id);\n\n    // Exit if no ingredient data\n    if (!((_active$data$current2 = active.data.current) !== null && _active$data$current2 !== void 0 && _active$data$current2.ingredient)) {\n      console.log(\"No ingredient data found\");\n      return;\n    }\n\n    // Get the ingredient being dragged\n    const draggedIngredientId = active.id.replace('ingredient-', '');\n\n    // Find source section (section containing the dragged ingredient)\n    let sourceSectionIndex = -1;\n    let sourceIngredientIndex = -1;\n    for (let i = 0; i < sections.length; i++) {\n      const index = sections[i].ingredients.findIndex(ing => ing.id.toString() === draggedIngredientId);\n      if (index !== -1) {\n        sourceSectionIndex = i;\n        sourceIngredientIndex = index;\n        break;\n      }\n    }\n    if (sourceSectionIndex === -1) {\n      console.log(\"Source section not found\");\n      return;\n    }\n\n    // Determine target section\n    let targetSectionId;\n    let targetSectionIndex;\n    if (over.id.startsWith('section-')) {\n      // Dropped directly on a section\n      targetSectionId = over.id.replace('section-', '');\n    } else if (over.id.startsWith('ingredient-')) {\n      // Dropped on another ingredient, find its section\n      const overIngredientId = over.id.replace('ingredient-', '');\n      for (const section of sections) {\n        if (section.ingredients.some(i => i.id.toString() === overIngredientId)) {\n          targetSectionId = section.id.toString();\n          break;\n        }\n      }\n    } else {\n      console.log(\"Invalid drop target\");\n      return;\n    }\n    if (!targetSectionId) {\n      console.log(\"Target section not determined\");\n      return;\n    }\n\n    // Find the index of the target section\n    targetSectionIndex = sections.findIndex(s => s.id.toString() === targetSectionId);\n    if (targetSectionIndex === -1) {\n      console.log(\"Target section not found in sections array\");\n      return;\n    }\n\n    // Create a deep copy of the sections array\n    const newSections = JSON.parse(JSON.stringify(sections));\n\n    // Get the dragged ingredient (complete object)\n    const draggedIngredient = newSections[sourceSectionIndex].ingredients[sourceIngredientIndex];\n\n    // Remove from source section\n    newSections[sourceSectionIndex].ingredients.splice(sourceIngredientIndex, 1);\n\n    // If dropping on an ingredient, determine insertion position\n    if (over.id.startsWith('ingredient-')) {\n      const overIngredientId = over.id.replace('ingredient-', '');\n      const targetIngredientIndex = newSections[targetSectionIndex].ingredients.findIndex(i => i.id.toString() === overIngredientId);\n      if (targetIngredientIndex !== -1) {\n        // Insert at specific position\n        newSections[targetSectionIndex].ingredients.splice(targetIngredientIndex, 0, draggedIngredient);\n      } else {\n        // Fallback to adding at the end\n        newSections[targetSectionIndex].ingredients.push(draggedIngredient);\n      }\n    } else {\n      // Just add to the end of the target section\n      newSections[targetSectionIndex].ingredients.push(draggedIngredient);\n    }\n    console.log(\"🔄 Updating sections:\", newSections.map(s => ({\n      id: s.id,\n      name: s.name,\n      ingredients: s.ingredients.map(i => i.id)\n    })));\n\n    // Update state\n    setSections(newSections);\n  };\n\n  // Debug utilities\n  const inspectSections = () => {\n    console.log(\"📊 SECTION INSPECTION:\");\n    sections.forEach(section => {\n      console.log(`Section ${section.name} (${section.id}): ${section.ingredients.length} ingredients`);\n      const ingredientIds = section.ingredients.map(i => i.id);\n      console.log(\"Ingredient IDs:\", ingredientIds);\n\n      // Check for duplicates\n      const uniqueIds = new Set(ingredientIds);\n      if (uniqueIds.size !== ingredientIds.length) {\n        console.error(\"⚠️ DUPLICATE INGREDIENTS DETECTED\");\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: () => navigate('/grocery-list'),\n        children: \"\\u2190 Back to Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"store-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"store-select\",\n          children: \"Select Store:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"store-select\",\n          value: selectedStore || \"\",\n          onChange: handleStoreChange,\n          children: stores.map(store => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: store.id,\n            children: store.name\n          }, store.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-section-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newSectionName,\n          onChange: e => setNewSectionName(e.target.value),\n          placeholder: \"New Section Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewSection,\n          children: \"Add Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-organization-btn\",\n        onClick: saveOrganization,\n        children: \"Save Organization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragStart: handleDragStart,\n      onDragOver: handleDragOver,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"organizer-layout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredients-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Uncategorized Ingredients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n            id: \"all-ingredients\",\n            items: ((_sections$find = sections.find(s => s.id === \"uncategorized\")) === null || _sections$find === void 0 ? void 0 : _sections$find.ingredients.map(i => `ingredient-${i.id}`)) || [],\n            strategy: verticalListSortingStrategy,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ingredient-list all-ingredients\",\n              children: [(_sections$find2 = sections.find(s => s.id === \"uncategorized\")) === null || _sections$find2 === void 0 ? void 0 : _sections$find2.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(SortableIngredient, {\n                ingredient: ingredient,\n                index: index\n              }, `uncategorized-ingredient-${ingredient.id}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 21\n              }, this)), !sections.find(s => s.id === \"uncategorized\") || sections.find(s => s.id === \"uncategorized\").ingredients.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"empty-ingredients\",\n                children: \"No uncategorized ingredients\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 649,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sections-container\",\n          children: sections.filter(section => section.id !== \"uncategorized\").map(section => /*#__PURE__*/_jsxDEV(Section, {\n            section: section,\n            activeDroppableId: activeDroppableId,\n            onRemove: removeSection\n          }, section.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId && activeDragData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredient-item dragging\",\n          children: activeDragData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 15\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Drag and drop ingredients between sections to organize your grocery list.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Debug Info:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(\"Current sections:\", sections),\n        children: \"Log Sections State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: inspectSections,\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Inspect Sections\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '12px',\n          marginTop: '10px'\n        },\n        children: [\"Active ID: \", activeId || 'none']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 578,\n    columnNumber: 5\n  }, this);\n};\n_s2(StoreOrganizerFixed, \"1JfKQOIgqt3NF0Kr32G2N/CIY68=\", false, function () {\n  return [useNavigate, useSensors, useSensor, useSensor];\n});\n_c3 = StoreOrganizerFixed;\nexport default StoreOrganizerFixed;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SortableIngredient\");\n$RefreshReg$(_c2, \"Section\");\n$RefreshReg$(_c3, \"StoreOrganizerFixed\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","DragOverlay","SortableContext","sortableKeyboardCoordinates","useSortable","verticalListSortingStrategy","CSS","jsxDEV","_jsxDEV","SortableIngredient","ingredient","index","_s","attributes","listeners","setNodeRef","transform","transition","isDragging","id","data","type","style","Transform","toString","opacity","cursor","userSelect","ref","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","Section","section","activeDroppableId","onRemove","getSectionContextKey","ingredients","length","onClick","items","map","i","strategy","_c2","StoreOrganizerFixed","_s2","_sections$find","_sections$find2","navigate","sections","setSections","stores","setStores","selectedStore","setSelectedStore","newSectionName","setNewSectionName","loading","setLoading","saveSuccess","setSaveSuccess","activeId","setActiveId","activeDragData","setActiveDragData","setActiveDroppableId","sensors","coordinateGetter","fetchData","storesResponse","fetch","storesData","json","storeId","fetchSections","createDefaultStore","error","console","log","s","sectionsResponse","sectionsData","sectionsWithIngredients","ingredientsResponse","ingredientsData","mappingsResponse","mappingsData","sectionMap","forEach","uncategorizedSection","mapping","find","m","ingredient_id","section_id","push","finalSections","Object","values","response","method","headers","body","JSON","stringify","order","store_id","handleStoreChange","e","target","value","addNewSection","trim","alert","newSection","Date","now","removeSection","sectionId","sectionToRemove","newSections","uncategorizedIndex","findIndex","uncategorized","filter","updatedSections","saveOrganization","sectionData","startsWith","ok","Error","setTimeout","message","handleDragStart","event","_active$data$current","active","current","handleDragOver","over","ingredientId","replace","some","handleDragEnd","_active$data$current2","draggedIngredientId","sourceSectionIndex","sourceIngredientIndex","ing","targetSectionId","targetSectionIndex","overIngredientId","parse","draggedIngredient","splice","targetIngredientIndex","inspectSections","ingredientIds","uniqueIds","Set","size","htmlFor","onChange","store","placeholder","collisionDetection","onDragStart","onDragOver","onDragEnd","marginTop","padding","background","borderRadius","marginLeft","fontSize","_c3","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/StoreOrganizerFixed.js"],"sourcesContent":["// StoreOrganizerFixed.js\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragOverlay\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n  verticalListSortingStrategy\r\n} from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\n// Sortable ingredient component\r\nconst SortableIngredient = ({ ingredient, index }) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging\r\n  } = useSortable({\r\n    id: `ingredient-${ingredient.id}`,\r\n    data: {\r\n      type: 'ingredient',\r\n      ingredient\r\n    }\r\n  });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    opacity: isDragging ? 0.4 : 1,\r\n    cursor: 'grab',\r\n    userSelect: 'none'\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={`ingredient-item ${isDragging ? 'dragging' : ''}`}\r\n      {...attributes}\r\n      {...listeners}\r\n      data-id={ingredient.id}\r\n    >\r\n      {ingredient.name}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Section component\r\nconst Section = ({ section, activeDroppableId, onRemove }) => {\r\n  // Generate a unique key for the section's sortable context\r\n  const getSectionContextKey = (section) => `section-context-${section.id}-${section.ingredients.length}`;\r\n\r\n  return (\r\n    <div\r\n      className={`section-card ${activeDroppableId === `section-${section.id}` ? 'drop-target' : ''}`}\r\n      key={section.id}\r\n      id={`section-${section.id}`}\r\n    >\r\n      <div className=\"section-header\">\r\n        <h3>{section.name}</h3>\r\n        <button\r\n          className=\"remove-section-btn\"\r\n          onClick={() => onRemove(section.id)}\r\n        >\r\n          ✕\r\n        </button>\r\n      </div>\r\n\r\n      <SortableContext\r\n        key={getSectionContextKey(section)}\r\n        id={`section-${section.id}`}\r\n        items={section.ingredients.map(i => `ingredient-${i.id}`)}\r\n        strategy={verticalListSortingStrategy}\r\n      >\r\n        <div\r\n          className=\"ingredient-list\"\r\n          data-section-id={section.id}\r\n        >\r\n          {section.ingredients.length > 0 ? (\r\n            section.ingredients.map((ingredient, index) => (\r\n              <SortableIngredient\r\n                key={`${section.id}-ingredient-${ingredient.id}`}\r\n                ingredient={ingredient}\r\n                index={index}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className=\"empty-section\">\r\n              Drag ingredients here\r\n            </div>\r\n          )}\r\n        </div>\r\n      </SortableContext>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Main component\r\nconst StoreOrganizerFixed = () => {\r\n  const navigate = useNavigate();\r\n  const [sections, setSections] = useState([]);\r\n  const [stores, setStores] = useState([]);\r\n  const [selectedStore, setSelectedStore] = useState(null);\r\n  const [newSectionName, setNewSectionName] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  const [activeId, setActiveId] = useState(null);\r\n  const [activeDragData, setActiveDragData] = useState(null);\r\n  const [activeDroppableId, setActiveDroppableId] = useState(null);\r\n\r\n  // Sensors for drag detection\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  // Load data on startup\r\n  useEffect(() => {\r\n    // Initial data loading\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Fetch stores\r\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n        const storesData = await storesResponse.json();\r\n        setStores(storesData);\r\n\r\n        if (storesData.length > 0) {\r\n          const storeId = storesData[0].id;\r\n          setSelectedStore(storeId);\r\n          \r\n          // Fetch sections for this store\r\n          await fetchSections(storeId);\r\n        } else {\r\n          // Create a default store\r\n          await createDefaultStore();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Debug helper for sections state\r\n  useEffect(() => {\r\n    console.log(\"🔄 Sections updated:\", sections.map(s => ({\r\n      id: s.id,\r\n      name: s.name,\r\n      ingredients: s.ingredients.map(i => i.id)\r\n    })));\r\n  }, [sections]);\r\n\r\n  // Function to fetch sections for a store\r\n  const fetchSections = async (storeId) => {\r\n    try {\r\n      // Get sections\r\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n      const sectionsData = await sectionsResponse.json();\r\n      \r\n      // Initialize sections with empty ingredients\r\n      const sectionsWithIngredients = sectionsData.map(section => ({\r\n        ...section,\r\n        ingredients: []\r\n      }));\r\n\r\n      // Fetch all ingredients\r\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\r\n      const ingredientsData = await ingredientsResponse.json();\r\n      \r\n      if (ingredientsData.length === 0) {\r\n        setSections(sectionsWithIngredients);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Get ingredient-section mappings\r\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n      const mappingsData = await mappingsResponse.json();\r\n      \r\n      // Create section map for easier lookup\r\n      const sectionMap = {};\r\n      sectionsWithIngredients.forEach(section => {\r\n        sectionMap[section.id] = {\r\n          ...section,\r\n          ingredients: []\r\n        };\r\n      });\r\n      \r\n      // Create uncategorized section\r\n      const uncategorizedSection = {\r\n        id: \"uncategorized\",\r\n        name: \"Uncategorized\",\r\n        ingredients: []\r\n      };\r\n      \r\n      // Assign ingredients to sections\r\n      ingredientsData.forEach(ingredient => {\r\n        const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\r\n        \r\n        if (mapping && sectionMap[mapping.section_id]) {\r\n          sectionMap[mapping.section_id].ingredients.push(ingredient);\r\n        } else {\r\n          uncategorizedSection.ingredients.push(ingredient);\r\n        }\r\n      });\r\n      \r\n      // Build the final sections array\r\n      let finalSections = Object.values(sectionMap);\r\n      \r\n      // Add uncategorized if it has ingredients\r\n      if (uncategorizedSection.ingredients.length > 0) {\r\n        finalSections.push(uncategorizedSection);\r\n      }\r\n      \r\n      console.log(\"Sections loaded:\", finalSections);\r\n      setSections(finalSections);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching sections:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Create a default store if none exists\r\n  const createDefaultStore = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: \"My Store\",\r\n          sections: [\r\n            { name: \"Produce\", order: 0 },\r\n            { name: \"Dairy\", order: 1 },\r\n            { name: \"Meat\", order: 2 },\r\n            { name: \"Bakery\", order: 3 },\r\n            { name: \"Frozen\", order: 4 },\r\n            { name: \"Canned Goods\", order: 5 },\r\n            { name: \"Uncategorized\", order: 6 }\r\n          ]\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.store_id) {\r\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n        const storesData = await storesResponse.json();\r\n        setStores(storesData);\r\n        \r\n        if (storesData.length > 0) {\r\n          setSelectedStore(storesData[0].id);\r\n          await fetchSections(storesData[0].id);\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error creating default store:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Change the selected store\r\n  const handleStoreChange = (e) => {\r\n    const storeId = e.target.value;\r\n    setSelectedStore(storeId);\r\n    fetchSections(storeId);\r\n  };\r\n\r\n  // Add a new section\r\n  const addNewSection = () => {\r\n    if (!newSectionName.trim()) {\r\n      alert(\"Please enter a section name\");\r\n      return;\r\n    }\r\n\r\n    const newSection = {\r\n      id: `temp-${Date.now()}`,\r\n      name: newSectionName,\r\n      order: sections.length,\r\n      ingredients: []\r\n    };\r\n\r\n    setSections([...sections, newSection]);\r\n    setNewSectionName(\"\");\r\n  };\r\n\r\n  // Remove a section\r\n  const removeSection = (sectionId) => {\r\n    // Find the section to remove\r\n    const sectionToRemove = sections.find(s => s.id.toString() === sectionId.toString());\r\n    if (!sectionToRemove) return;\r\n    \r\n    // Make a copy of the sections array\r\n    const newSections = [...sections];\r\n    \r\n    // Find or create the uncategorized section\r\n    let uncategorizedIndex = newSections.findIndex(s => s.id === \"uncategorized\");\r\n    \r\n    if (uncategorizedIndex === -1) {\r\n      // Need to create uncategorized section\r\n      const uncategorized = {\r\n        id: \"uncategorized\",\r\n        name: \"Uncategorized\",\r\n        ingredients: [...sectionToRemove.ingredients] // Move ingredients here\r\n      };\r\n      \r\n      // Filter out the section to remove and add uncategorized\r\n      setSections([\r\n        ...newSections.filter(s => s.id.toString() !== sectionId.toString()),\r\n        uncategorized\r\n      ]);\r\n    } else {\r\n      // Update the existing uncategorized section\r\n      const updatedSections = [...newSections];\r\n      \r\n      // Add the ingredients to uncategorized\r\n      updatedSections[uncategorizedIndex] = {\r\n        ...updatedSections[uncategorizedIndex],\r\n        ingredients: [\r\n          ...updatedSections[uncategorizedIndex].ingredients,\r\n          ...sectionToRemove.ingredients\r\n        ]\r\n      };\r\n      \r\n      // Remove the section\r\n      setSections(updatedSections.filter(s => s.id.toString() !== sectionId.toString()));\r\n    }\r\n  };\r\n\r\n  // Save the organization to the backend\r\n  const saveOrganization = async () => {\r\n    try {\r\n      // Format sections data for API\r\n      const sectionData = sections\r\n        .filter(section => section.id !== \"uncategorized\")\r\n        .map(section => ({\r\n          id: section.id.toString().startsWith('temp-') ? null : section.id,\r\n          name: section.name,\r\n          ingredients: section.ingredients.map((ingredient, index) => ({\r\n            id: ingredient.id,\r\n            name: ingredient.name,\r\n            order: index\r\n          }))\r\n        }));\r\n\r\n      // Add uncategorized if it exists\r\n      const uncategorizedSection = sections.find(s => s.id === \"uncategorized\");\r\n      if (uncategorizedSection && uncategorizedSection.ingredients.length > 0) {\r\n        sectionData.push({\r\n          id: null,\r\n          name: \"Uncategorized\",\r\n          ingredients: uncategorizedSection.ingredients.map((ingredient, index) => ({\r\n            id: ingredient.id,\r\n            name: ingredient.name,\r\n            order: index\r\n          }))\r\n        });\r\n      }\r\n\r\n      // Send to API\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          store_id: selectedStore,\r\n          sections: sectionData\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to save organization\");\r\n      }\r\n\r\n      // Show success message\r\n      setSaveSuccess(true);\r\n      setTimeout(() => setSaveSuccess(false), 3000);\r\n    } catch (error) {\r\n      console.error(\"Error saving organization:\", error);\r\n      alert(\"Error saving organization: \" + error.message);\r\n    }\r\n  };\r\n\r\n  // Drag & Drop Handlers\r\n  const handleDragStart = (event) => {\r\n    const { active } = event;\r\n    setActiveId(active.id);\r\n    setActiveDragData(active.data.current?.ingredient || null);\r\n  };\r\n\r\n  const handleDragOver = (event) => {\r\n    const { over } = event;\r\n    \r\n    if (!over) {\r\n      setActiveDroppableId(null);\r\n      return;\r\n    }\r\n    \r\n    // Determine proper drop target\r\n    if (over.id.startsWith('section-')) {\r\n      setActiveDroppableId(over.id);\r\n    } else if (over.id.startsWith('ingredient-')) {\r\n      // Find which section this ingredient belongs to\r\n      const ingredientId = over.id.replace('ingredient-', '');\r\n      \r\n      for (const section of sections) {\r\n        if (section.ingredients.some(i => i.id.toString() === ingredientId)) {\r\n          setActiveDroppableId(`section-${section.id}`);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDragEnd = (event) => {\r\n    console.log(\"⚡ Drag End Event:\", event);\r\n    const { active, over } = event;\r\n    \r\n    // Clear states\r\n    setActiveDroppableId(null);\r\n    setActiveId(null);\r\n    setActiveDragData(null);\r\n    \r\n    if (!active || !over) {\r\n      console.log(\"No valid drag targets\");\r\n      return;\r\n    }\r\n    \r\n    console.log(\"Active:\", active.id, \"Over:\", over.id);\r\n    \r\n    // Exit if no ingredient data\r\n    if (!active.data.current?.ingredient) {\r\n      console.log(\"No ingredient data found\");\r\n      return;\r\n    }\r\n    \r\n    // Get the ingredient being dragged\r\n    const draggedIngredientId = active.id.replace('ingredient-', '');\r\n    \r\n    // Find source section (section containing the dragged ingredient)\r\n    let sourceSectionIndex = -1;\r\n    let sourceIngredientIndex = -1;\r\n    \r\n    for (let i = 0; i < sections.length; i++) {\r\n      const index = sections[i].ingredients.findIndex(\r\n        ing => ing.id.toString() === draggedIngredientId\r\n      );\r\n      \r\n      if (index !== -1) {\r\n        sourceSectionIndex = i;\r\n        sourceIngredientIndex = index;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (sourceSectionIndex === -1) {\r\n      console.log(\"Source section not found\");\r\n      return;\r\n    }\r\n    \r\n    // Determine target section\r\n    let targetSectionId;\r\n    let targetSectionIndex;\r\n    \r\n    if (over.id.startsWith('section-')) {\r\n      // Dropped directly on a section\r\n      targetSectionId = over.id.replace('section-', '');\r\n    } else if (over.id.startsWith('ingredient-')) {\r\n      // Dropped on another ingredient, find its section\r\n      const overIngredientId = over.id.replace('ingredient-', '');\r\n      \r\n      for (const section of sections) {\r\n        if (section.ingredients.some(i => i.id.toString() === overIngredientId)) {\r\n          targetSectionId = section.id.toString();\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      console.log(\"Invalid drop target\");\r\n      return;\r\n    }\r\n    \r\n    if (!targetSectionId) {\r\n      console.log(\"Target section not determined\");\r\n      return;\r\n    }\r\n    \r\n    // Find the index of the target section\r\n    targetSectionIndex = sections.findIndex(s => s.id.toString() === targetSectionId);\r\n    \r\n    if (targetSectionIndex === -1) {\r\n      console.log(\"Target section not found in sections array\");\r\n      return;\r\n    }\r\n    \r\n    // Create a deep copy of the sections array\r\n    const newSections = JSON.parse(JSON.stringify(sections));\r\n    \r\n    // Get the dragged ingredient (complete object)\r\n    const draggedIngredient = newSections[sourceSectionIndex].ingredients[sourceIngredientIndex];\r\n    \r\n    // Remove from source section\r\n    newSections[sourceSectionIndex].ingredients.splice(sourceIngredientIndex, 1);\r\n    \r\n    // If dropping on an ingredient, determine insertion position\r\n    if (over.id.startsWith('ingredient-')) {\r\n      const overIngredientId = over.id.replace('ingredient-', '');\r\n      const targetIngredientIndex = newSections[targetSectionIndex].ingredients.findIndex(\r\n        i => i.id.toString() === overIngredientId\r\n      );\r\n      \r\n      if (targetIngredientIndex !== -1) {\r\n        // Insert at specific position\r\n        newSections[targetSectionIndex].ingredients.splice(\r\n          targetIngredientIndex, 0, draggedIngredient\r\n        );\r\n      } else {\r\n        // Fallback to adding at the end\r\n        newSections[targetSectionIndex].ingredients.push(draggedIngredient);\r\n      }\r\n    } else {\r\n      // Just add to the end of the target section\r\n      newSections[targetSectionIndex].ingredients.push(draggedIngredient);\r\n    }\r\n    \r\n    console.log(\"🔄 Updating sections:\", \r\n      newSections.map(s => ({ \r\n        id: s.id, \r\n        name: s.name, \r\n        ingredients: s.ingredients.map(i => i.id)\r\n      }))\r\n    );\r\n    \r\n    // Update state\r\n    setSections(newSections);\r\n  };\r\n\r\n  // Debug utilities\r\n  const inspectSections = () => {\r\n    console.log(\"📊 SECTION INSPECTION:\");\r\n    sections.forEach(section => {\r\n      console.log(`Section ${section.name} (${section.id}): ${section.ingredients.length} ingredients`);\r\n      const ingredientIds = section.ingredients.map(i => i.id);\r\n      console.log(\"Ingredient IDs:\", ingredientIds);\r\n      \r\n      // Check for duplicates\r\n      const uniqueIds = new Set(ingredientIds);\r\n      if (uniqueIds.size !== ingredientIds.length) {\r\n        console.error(\"⚠️ DUPLICATE INGREDIENTS DETECTED\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"store-organizer-container\">\r\n      <div className=\"store-organizer-header\">\r\n        <h1>Store Section Organizer</h1>\r\n        {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n      </div>\r\n\r\n      <div className=\"store-organizer-controls\">\r\n        <button\r\n          className=\"back-btn\"\r\n          onClick={() => navigate('/grocery-list')}\r\n        >\r\n          ← Back to Grocery List\r\n        </button>\r\n\r\n        <div className=\"store-selector\">\r\n          <label htmlFor=\"store-select\">Select Store:</label>\r\n          <select\r\n            id=\"store-select\"\r\n            value={selectedStore || \"\"}\r\n            onChange={handleStoreChange}\r\n          >\r\n            {stores.map(store => (\r\n              <option key={store.id} value={store.id}>{store.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"add-section-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={newSectionName}\r\n            onChange={(e) => setNewSectionName(e.target.value)}\r\n            placeholder=\"New Section Name\"\r\n          />\r\n          <button onClick={addNewSection}>Add Section</button>\r\n        </div>\r\n\r\n        <button className=\"save-organization-btn\" onClick={saveOrganization}>\r\n          Save Organization\r\n        </button>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div className=\"loading\">Loading sections and ingredients...</div>\r\n      ) : (\r\n        <DndContext\r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragStart={handleDragStart}\r\n          onDragOver={handleDragOver}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <div className=\"organizer-layout\">\r\n            <div className=\"ingredients-panel\">\r\n              <h2>Uncategorized Ingredients</h2>\r\n              <SortableContext\r\n                id=\"all-ingredients\"\r\n                items={sections\r\n                  .find(s => s.id === \"uncategorized\")?.ingredients.map(i => `ingredient-${i.id}`) || []}\r\n                strategy={verticalListSortingStrategy}\r\n              >\r\n                <div className=\"ingredient-list all-ingredients\">\r\n                  {sections.find(s => s.id === \"uncategorized\")?.ingredients.map((ingredient, index) => (\r\n                    <SortableIngredient\r\n                      key={`uncategorized-ingredient-${ingredient.id}`}\r\n                      ingredient={ingredient}\r\n                      index={index}\r\n                    />\r\n                  ))}\r\n                  {!sections.find(s => s.id === \"uncategorized\") ||\r\n                    sections.find(s => s.id === \"uncategorized\").ingredients.length === 0 ? (\r\n                    <div className=\"empty-ingredients\">\r\n                      No uncategorized ingredients\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </SortableContext>\r\n            </div>\r\n\r\n            <div className=\"sections-container\">\r\n              {sections.filter(section => section.id !== \"uncategorized\").map(section => (\r\n                <Section \r\n                  key={section.id}\r\n                  section={section}\r\n                  activeDroppableId={activeDroppableId}\r\n                  onRemove={removeSection}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <DragOverlay>\r\n            {activeId && activeDragData ? (\r\n              <div className=\"ingredient-item dragging\">\r\n                {activeDragData.name}\r\n              </div>\r\n            ) : null}\r\n          </DragOverlay>\r\n        </DndContext>\r\n      )}\r\n\r\n      <div className=\"organizer-tip\">\r\n        <p>Tip: Drag and drop ingredients between sections to organize your grocery list.</p>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '20px', padding: '10px', background: '#f0f0f0', borderRadius: '4px' }}>\r\n        <h3>Debug Info:</h3>\r\n        <button onClick={() => console.log(\"Current sections:\", sections)}>\r\n          Log Sections State\r\n        </button>\r\n        <button onClick={inspectSections} style={{ marginLeft: '10px' }}>\r\n          Inspect Sections\r\n        </button>\r\n        <div style={{ fontSize: '12px', marginTop: '10px' }}>\r\n          Active ID: {activeId || 'none'}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoreOrganizerFixed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}