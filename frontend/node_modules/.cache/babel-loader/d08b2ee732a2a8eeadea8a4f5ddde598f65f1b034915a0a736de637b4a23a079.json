{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\StoreOrganizer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// StoreOrganizer.js\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragOverlay } from \"@dnd-kit/core\";\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortableIngredient = ({\n  ingredient,\n  index\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: ingredient.id.toString(),\n    data: {\n      ingredient\n    }\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.4 : 1\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    className: `ingredient-item ${isDragging ? 'dragging' : ''}`,\n    ...attributes,\n    ...listeners,\n    children: ingredient.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(SortableIngredient, \"GBjPhUz4fwS1gPaSN4wvlSB2OVM=\", false, function () {\n  return [useSortable];\n});\n_c = SortableIngredient;\nconst StoreOrganizer = () => {\n  _s2();\n  const navigate = useNavigate();\n  const [sections, setSections] = useState([]);\n  const [, setIngredients] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [activeId, setActiveId] = useState(null);\n  const [activeDragData, setActiveDragData] = useState(null);\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n\n  // Fetch sections function\n  const fetchSections = useCallback(async storeId => {\n    try {\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n      const sectionsData = await sectionsResponse.json();\n\n      // Initialize sections with empty ingredient arrays\n      const sectionsWithIngredients = sectionsData.map(section => ({\n        ...section,\n        ingredients: []\n      }));\n      setSections(sectionsWithIngredients);\n\n      // Fetch ingredients\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\n      const ingredientsData = await ingredientsResponse.json();\n\n      // Fetch ingredient section mappings\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n      const mappingsData = await mappingsResponse.json();\n\n      // Organize ingredients into sections\n      const sectionMap = {};\n      sectionsWithIngredients.forEach(section => {\n        sectionMap[section.id] = section;\n      });\n\n      // Add a default \"Uncategorized\" section\n      let uncategorizedSection = {\n        id: \"uncategorized\",\n        name: \"Uncategorized\",\n        ingredients: []\n      };\n\n      // Assign ingredients to their sections based on mappings\n      ingredientsData.forEach(ingredient => {\n        const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\n        if (mapping && sectionMap[mapping.section_id]) {\n          sectionMap[mapping.section_id].ingredients.push(ingredient);\n        } else {\n          uncategorizedSection.ingredients.push(ingredient);\n        }\n      });\n\n      // Update sections array with assigned ingredients\n      const updatedSections = [...Object.values(sectionMap)];\n\n      // Add uncategorized section if it has ingredients\n      if (uncategorizedSection.ingredients.length > 0) {\n        updatedSections.push(uncategorizedSection);\n      }\n      setSections(updatedSections);\n      setIngredients(ingredientsData);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching sections and ingredients:\", error);\n      setLoading(false);\n    }\n  }, []);\n\n  // Define fetchData after fetchSections\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Fetch stores\n      const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n      const storesData = await storesResponse.json();\n      setStores(storesData);\n      if (storesData.length > 0) {\n        setSelectedStore(storesData[0].id);\n\n        // Fetch sections for the selected store\n        await fetchSections(storesData[0].id);\n      } else {\n        // Create a default store if none exists\n        await createDefaultStore();\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setLoading(false);\n    }\n  }, [fetchSections]);\n\n  // Use fetchData in useEffect\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Create default store\n  const createDefaultStore = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: \"My Store\",\n          sections: [{\n            name: \"Produce\",\n            order: 0\n          }, {\n            name: \"Dairy\",\n            order: 1\n          }, {\n            name: \"Meat\",\n            order: 2\n          }, {\n            name: \"Bakery\",\n            order: 3\n          }, {\n            name: \"Frozen\",\n            order: 4\n          }, {\n            name: \"Canned Goods\",\n            order: 5\n          }, {\n            name: \"Uncategorized\",\n            order: 6\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.store_id) {\n        // Fetch stores again to get the new store\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n\n        // Set the first store as selected\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n          await fetchSections(storesData[0].id);\n        }\n      }\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error creating default store:\", error);\n      setLoading(false);\n    }\n  };\n  const handleStoreChange = e => {\n    const storeId = e.target.value;\n    setSelectedStore(storeId);\n    fetchSections(storeId);\n  };\n  const addNewSection = () => {\n    if (!newSectionName.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n\n    // Create new section locally first\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      // Temporary ID until saved\n      name: newSectionName,\n      order: sections.length,\n      ingredients: []\n    };\n    setSections([...sections, newSection]);\n    setNewSectionName(\"\");\n  };\n  const removeSection = sectionId => {\n    // Get the section\n    const section = sections.find(s => s.id.toString() === sectionId.toString());\n    if (!section) return;\n\n    // If section has ingredients, move them to uncategorized\n    let uncategorized = sections.find(s => s.id === \"uncategorized\");\n    if (section.ingredients.length > 0) {\n      if (!uncategorized) {\n        // Create uncategorized section if it doesn't exist\n        uncategorized = {\n          id: \"uncategorized\",\n          name: \"Uncategorized\",\n          ingredients: []\n        };\n\n        // Add to sections\n        setSections([...sections.filter(s => s.id.toString() !== sectionId.toString()), uncategorized]);\n      } else {\n        // Update sections without the removed one\n        setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n      }\n\n      // Move ingredients to uncategorized\n      uncategorized.ingredients = [...uncategorized.ingredients, ...section.ingredients];\n    } else {\n      // Just remove the section\n      setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n    }\n  };\n  const saveOrganization = async () => {\n    try {\n      // Prepare the data\n      const sectionData = sections.map(section => ({\n        id: section.id === \"uncategorized\" ? null : section.id,\n        name: section.name,\n        ingredients: section.ingredients.map((ingredient, index) => ({\n          id: ingredient.id,\n          name: ingredient.name,\n          order: index\n        }))\n      }));\n\n      // Send to the backend\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save organization\");\n      }\n\n      // Show success message\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n  const handleDragStart = event => {\n    var _active$data$current;\n    const {\n      active\n    } = event;\n    setActiveId(active.id);\n    setActiveDragData(((_active$data$current = active.data.current) === null || _active$data$current === void 0 ? void 0 : _active$data$current.ingredient) || null);\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!active || !over) return;\n\n    // Find the containers (sections)\n    const activeContainer = findContainer(active.id);\n    const overContainer = findContainer(over.id);\n\n    // If we're just dropping back where we started, return\n    if (activeContainer === overContainer && active.id === over.id) {\n      return;\n    }\n\n    // Handle the case where we're moving an item within the same section\n    if (activeContainer === overContainer) {\n      const activeIndex = findIndex(activeContainer, active.id);\n      const overIndex = findIndex(overContainer, over.id);\n      if (activeIndex !== overIndex) {\n        setSections(prev => {\n          const newSections = [...prev];\n          const sectionIndex = newSections.findIndex(s => s.id.toString() === activeContainer);\n          if (sectionIndex !== -1) {\n            const newIngredients = [...newSections[sectionIndex].ingredients];\n            newSections[sectionIndex].ingredients = arrayMove(newIngredients, activeIndex, overIndex);\n          }\n          return newSections;\n        });\n      }\n    }\n    // Handle the case where we're moving an item to a different section\n    else if (activeContainer !== overContainer) {\n      const activeIngredient = getIngredientById(active.id);\n      if (!activeIngredient) return;\n      setSections(prev => {\n        const newSections = [...prev];\n\n        // Remove from original section\n        const activeSectionIndex = newSections.findIndex(s => s.id.toString() === activeContainer);\n        if (activeSectionIndex !== -1) {\n          newSections[activeSectionIndex].ingredients = newSections[activeSectionIndex].ingredients.filter(i => i.id.toString() !== active.id);\n        }\n\n        // Add to new section\n        const overSectionIndex = newSections.findIndex(s => s.id.toString() === overContainer);\n        if (overSectionIndex !== -1) {\n          // Find the position to insert at\n          const overItemId = over.id;\n          const overItemIndex = findIndex(overContainer, overItemId);\n\n          // Insert the dragged ingredient at the new position\n          const newIngredients = [...newSections[overSectionIndex].ingredients];\n          newIngredients.splice(overItemIndex, 0, activeIngredient);\n          newSections[overSectionIndex].ingredients = newIngredients;\n        }\n        return newSections;\n      });\n    }\n    setActiveId(null);\n    setActiveDragData(null);\n  };\n\n  // Helper function to find the container (section) an item belongs to\n  const findContainer = id => {\n    for (const section of sections) {\n      if (section.id.toString() === id) {\n        return section.id.toString();\n      }\n      const foundIngredient = section.ingredients.find(ingredient => ingredient.id.toString() === id);\n      if (foundIngredient) {\n        return section.id.toString();\n      }\n    }\n    return null;\n  };\n\n  // Helper function to find an ingredient's index within a section\n  const findIndex = (containerId, itemId) => {\n    const section = sections.find(s => s.id.toString() === containerId);\n    if (!section) return -1;\n    return section.ingredients.findIndex(i => i.id.toString() === itemId);\n  };\n\n  // Helper function to get an ingredient by ID\n  const getIngredientById = id => {\n    for (const section of sections) {\n      const ingredient = section.ingredients.find(i => i.id.toString() === id);\n      if (ingredient) return ingredient;\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: () => navigate('/grocery-list'),\n        children: \"\\u2190 Back to Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"store-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"store-select\",\n          children: \"Select Store:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"store-select\",\n          value: selectedStore || \"\",\n          onChange: handleStoreChange,\n          children: stores.map(store => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: store.id,\n            children: store.name\n          }, store.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-section-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newSectionName,\n          onChange: e => setNewSectionName(e.target.value),\n          placeholder: \"New Section Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewSection,\n          children: \"Add Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-organization-btn\",\n        onClick: saveOrganization,\n        children: \"Save Organization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sections-container\",\n        children: sections.map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: section.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 19\n            }, this), section.id !== \"uncategorized\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-section-btn\",\n              onClick: () => removeSection(section.id),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n            id: section.id.toString(),\n            items: section.ingredients.map(i => i.id.toString()),\n            strategy: verticalListSortingStrategy,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ingredient-list\",\n              children: section.ingredients.length > 0 ? section.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(SortableIngredient, {\n                ingredient: ingredient,\n                index: index\n              }, ingredient.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 25\n              }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"empty-section\",\n                children: \"Drag ingredients here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 17\n          }, this)]\n        }, section.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId && activeDragData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredient-item dragging\",\n          children: activeDragData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 15\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Drag and drop ingredients between sections to organize your grocery list.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 424,\n    columnNumber: 5\n  }, this);\n};\n_s2(StoreOrganizer, \"7JLgfXrG8rP+YhHaSAJ1AZaaNwY=\", false, function () {\n  return [useNavigate, useSensors, useSensor, useSensor];\n});\n_c2 = StoreOrganizer;\nexport default StoreOrganizer;\nvar _c, _c2;\n$RefreshReg$(_c, \"SortableIngredient\");\n$RefreshReg$(_c2, \"StoreOrganizer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","DragOverlay","arrayMove","SortableContext","sortableKeyboardCoordinates","useSortable","verticalListSortingStrategy","CSS","jsxDEV","_jsxDEV","SortableIngredient","ingredient","index","_s","attributes","listeners","setNodeRef","transform","transition","isDragging","id","toString","data","style","Transform","opacity","ref","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","StoreOrganizer","_s2","navigate","sections","setSections","setIngredients","stores","setStores","selectedStore","setSelectedStore","newSectionName","setNewSectionName","loading","setLoading","saveSuccess","setSaveSuccess","activeId","setActiveId","activeDragData","setActiveDragData","sensors","coordinateGetter","fetchSections","storeId","sectionsResponse","fetch","sectionsData","json","sectionsWithIngredients","map","section","ingredients","ingredientsResponse","ingredientsData","mappingsResponse","mappingsData","sectionMap","forEach","uncategorizedSection","mapping","find","m","ingredient_id","section_id","push","updatedSections","Object","values","length","error","console","fetchData","storesResponse","storesData","createDefaultStore","response","method","headers","body","JSON","stringify","order","store_id","handleStoreChange","e","target","value","addNewSection","trim","alert","newSection","Date","now","removeSection","sectionId","s","uncategorized","filter","saveOrganization","sectionData","ok","Error","setTimeout","message","handleDragStart","event","_active$data$current","active","current","handleDragEnd","over","activeContainer","findContainer","overContainer","activeIndex","findIndex","overIndex","prev","newSections","sectionIndex","newIngredients","activeIngredient","getIngredientById","activeSectionIndex","i","overSectionIndex","overItemId","overItemIndex","splice","foundIngredient","containerId","itemId","onClick","htmlFor","onChange","store","type","placeholder","collisionDetection","onDragStart","onDragEnd","items","strategy","_c2","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/StoreOrganizer.js"],"sourcesContent":["// StoreOrganizer.js\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragOverlay\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n  verticalListSortingStrategy\r\n} from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\nconst SortableIngredient = ({ ingredient, index }) => {\r\n  const { \r\n    attributes, \r\n    listeners, \r\n    setNodeRef, \r\n    transform, \r\n    transition,\r\n    isDragging\r\n  } = useSortable({ \r\n    id: ingredient.id.toString(),\r\n    data: { ingredient }\r\n  });\r\n  \r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    opacity: isDragging ? 0.4 : 1,\r\n  };\r\n  \r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={`ingredient-item ${isDragging ? 'dragging' : ''}`}\r\n      {...attributes}\r\n      {...listeners}\r\n    >\r\n      {ingredient.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StoreOrganizer = () => {\r\n  const navigate = useNavigate();\r\n  const [sections, setSections] = useState([]);\r\n  const [, setIngredients] = useState([]);\r\n  const [stores, setStores] = useState([]);\r\n  const [selectedStore, setSelectedStore] = useState(null);\r\n  const [newSectionName, setNewSectionName] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  const [activeId, setActiveId] = useState(null);\r\n  const [activeDragData, setActiveDragData] = useState(null);\r\n  \r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n  \r\n  // Fetch sections function\r\n  const fetchSections = useCallback(async (storeId) => {\r\n    try {\r\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n      const sectionsData = await sectionsResponse.json();\r\n      \r\n      // Initialize sections with empty ingredient arrays\r\n      const sectionsWithIngredients = sectionsData.map(section => ({\r\n        ...section,\r\n        ingredients: []\r\n      }));\r\n      \r\n      setSections(sectionsWithIngredients);\r\n      \r\n      // Fetch ingredients\r\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\r\n      const ingredientsData = await ingredientsResponse.json();\r\n      \r\n      // Fetch ingredient section mappings\r\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n      const mappingsData = await mappingsResponse.json();\r\n      \r\n      // Organize ingredients into sections\r\n      const sectionMap = {};\r\n      sectionsWithIngredients.forEach(section => {\r\n        sectionMap[section.id] = section;\r\n      });\r\n      \r\n      // Add a default \"Uncategorized\" section\r\n      let uncategorizedSection = {\r\n        id: \"uncategorized\",\r\n        name: \"Uncategorized\",\r\n        ingredients: []\r\n      };\r\n      \r\n      // Assign ingredients to their sections based on mappings\r\n      ingredientsData.forEach(ingredient => {\r\n        const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\r\n        \r\n        if (mapping && sectionMap[mapping.section_id]) {\r\n          sectionMap[mapping.section_id].ingredients.push(ingredient);\r\n        } else {\r\n          uncategorizedSection.ingredients.push(ingredient);\r\n        }\r\n      });\r\n      \r\n      // Update sections array with assigned ingredients\r\n      const updatedSections = [...Object.values(sectionMap)];\r\n      \r\n      // Add uncategorized section if it has ingredients\r\n      if (uncategorizedSection.ingredients.length > 0) {\r\n        updatedSections.push(uncategorizedSection);\r\n      }\r\n      \r\n      setSections(updatedSections);\r\n      setIngredients(ingredientsData);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching sections and ingredients:\", error);\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n  \r\n  // Define fetchData after fetchSections\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch stores\r\n      const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n      const storesData = await storesResponse.json();\r\n      setStores(storesData);\r\n      \r\n      if (storesData.length > 0) {\r\n        setSelectedStore(storesData[0].id);\r\n        \r\n        // Fetch sections for the selected store\r\n        await fetchSections(storesData[0].id);\r\n      } else {\r\n        // Create a default store if none exists\r\n        await createDefaultStore();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      setLoading(false);\r\n    }\r\n  }, [fetchSections]);\r\n  \r\n  // Use fetchData in useEffect\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n  \r\n  // Create default store\r\n  const createDefaultStore = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: \"My Store\",\r\n          sections: [\r\n            { name: \"Produce\", order: 0 },\r\n            { name: \"Dairy\", order: 1 },\r\n            { name: \"Meat\", order: 2 },\r\n            { name: \"Bakery\", order: 3 },\r\n            { name: \"Frozen\", order: 4 },\r\n            { name: \"Canned Goods\", order: 5 },\r\n            { name: \"Uncategorized\", order: 6 }\r\n          ]\r\n        })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.store_id) {\r\n        // Fetch stores again to get the new store\r\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n        const storesData = await storesResponse.json();\r\n        setStores(storesData);\r\n        \r\n        // Set the first store as selected\r\n        if (storesData.length > 0) {\r\n          setSelectedStore(storesData[0].id);\r\n          await fetchSections(storesData[0].id);\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error creating default store:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handleStoreChange = (e) => {\r\n    const storeId = e.target.value;\r\n    setSelectedStore(storeId);\r\n    fetchSections(storeId);\r\n  };\r\n  \r\n  const addNewSection = () => {\r\n    if (!newSectionName.trim()) {\r\n      alert(\"Please enter a section name\");\r\n      return;\r\n    }\r\n    \r\n    // Create new section locally first\r\n    const newSection = {\r\n      id: `temp-${Date.now()}`, // Temporary ID until saved\r\n      name: newSectionName,\r\n      order: sections.length,\r\n      ingredients: []\r\n    };\r\n    \r\n    setSections([...sections, newSection]);\r\n    setNewSectionName(\"\");\r\n  };\r\n  \r\n  const removeSection = (sectionId) => {\r\n    // Get the section\r\n    const section = sections.find(s => s.id.toString() === sectionId.toString());\r\n    \r\n    if (!section) return;\r\n    \r\n    // If section has ingredients, move them to uncategorized\r\n    let uncategorized = sections.find(s => s.id === \"uncategorized\");\r\n    \r\n    if (section.ingredients.length > 0) {\r\n      if (!uncategorized) {\r\n        // Create uncategorized section if it doesn't exist\r\n        uncategorized = {\r\n          id: \"uncategorized\",\r\n          name: \"Uncategorized\",\r\n          ingredients: []\r\n        };\r\n        \r\n        // Add to sections\r\n        setSections([...sections.filter(s => s.id.toString() !== sectionId.toString()), uncategorized]);\r\n      } else {\r\n        // Update sections without the removed one\r\n        setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n      }\r\n      \r\n      // Move ingredients to uncategorized\r\n      uncategorized.ingredients = [...uncategorized.ingredients, ...section.ingredients];\r\n    } else {\r\n      // Just remove the section\r\n      setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n    }\r\n  };\r\n  \r\n  const saveOrganization = async () => {\r\n    try {\r\n      // Prepare the data\r\n      const sectionData = sections.map(section => ({\r\n        id: section.id === \"uncategorized\" ? null : section.id,\r\n        name: section.name,\r\n        ingredients: section.ingredients.map((ingredient, index) => ({\r\n          id: ingredient.id,\r\n          name: ingredient.name,\r\n          order: index\r\n        }))\r\n      }));\r\n      \r\n      // Send to the backend\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          store_id: selectedStore,\r\n          sections: sectionData\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to save organization\");\r\n      }\r\n      \r\n      // Show success message\r\n      setSaveSuccess(true);\r\n      setTimeout(() => setSaveSuccess(false), 3000);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error saving organization:\", error);\r\n      alert(\"Error saving organization: \" + error.message);\r\n    }\r\n  };\r\n  \r\n  const handleDragStart = (event) => {\r\n    const { active } = event;\r\n    setActiveId(active.id);\r\n    setActiveDragData(active.data.current?.ingredient || null);\r\n  };\r\n  \r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n    \r\n    if (!active || !over) return;\r\n    \r\n    // Find the containers (sections)\r\n    const activeContainer = findContainer(active.id);\r\n    const overContainer = findContainer(over.id);\r\n    \r\n    // If we're just dropping back where we started, return\r\n    if (\r\n      activeContainer === overContainer && \r\n      active.id === over.id\r\n    ) {\r\n      return;\r\n    }\r\n    \r\n    // Handle the case where we're moving an item within the same section\r\n    if (activeContainer === overContainer) {\r\n      const activeIndex = findIndex(activeContainer, active.id);\r\n      const overIndex = findIndex(overContainer, over.id);\r\n      \r\n      if (activeIndex !== overIndex) {\r\n        setSections(prev => {\r\n          const newSections = [...prev];\r\n          const sectionIndex = newSections.findIndex(s => s.id.toString() === activeContainer);\r\n          if (sectionIndex !== -1) {\r\n            const newIngredients = [...newSections[sectionIndex].ingredients];\r\n            newSections[sectionIndex].ingredients = arrayMove(\r\n              newIngredients,\r\n              activeIndex,\r\n              overIndex\r\n            );\r\n          }\r\n          return newSections;\r\n        });\r\n      }\r\n    } \r\n    // Handle the case where we're moving an item to a different section\r\n    else if (activeContainer !== overContainer) {\r\n      const activeIngredient = getIngredientById(active.id);\r\n      \r\n      if (!activeIngredient) return;\r\n      \r\n      setSections(prev => {\r\n        const newSections = [...prev];\r\n        \r\n        // Remove from original section\r\n        const activeSectionIndex = newSections.findIndex(s => s.id.toString() === activeContainer);\r\n        if (activeSectionIndex !== -1) {\r\n          newSections[activeSectionIndex].ingredients = newSections[activeSectionIndex].ingredients.filter(\r\n            i => i.id.toString() !== active.id\r\n          );\r\n        }\r\n        \r\n        // Add to new section\r\n        const overSectionIndex = newSections.findIndex(s => s.id.toString() === overContainer);\r\n        if (overSectionIndex !== -1) {\r\n          // Find the position to insert at\r\n          const overItemId = over.id;\r\n          const overItemIndex = findIndex(overContainer, overItemId);\r\n          \r\n          // Insert the dragged ingredient at the new position\r\n          const newIngredients = [...newSections[overSectionIndex].ingredients];\r\n          newIngredients.splice(overItemIndex, 0, activeIngredient);\r\n          newSections[overSectionIndex].ingredients = newIngredients;\r\n        }\r\n        \r\n        return newSections;\r\n      });\r\n    }\r\n    \r\n    setActiveId(null);\r\n    setActiveDragData(null);\r\n  };\r\n  \r\n  // Helper function to find the container (section) an item belongs to\r\n  const findContainer = (id) => {\r\n    for (const section of sections) {\r\n      if (section.id.toString() === id) {\r\n        return section.id.toString();\r\n      }\r\n      \r\n      const foundIngredient = section.ingredients.find(ingredient => \r\n        ingredient.id.toString() === id\r\n      );\r\n      \r\n      if (foundIngredient) {\r\n        return section.id.toString();\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  // Helper function to find an ingredient's index within a section\r\n  const findIndex = (containerId, itemId) => {\r\n    const section = sections.find(s => s.id.toString() === containerId);\r\n    if (!section) return -1;\r\n    \r\n    return section.ingredients.findIndex(i => i.id.toString() === itemId);\r\n  };\r\n  \r\n  // Helper function to get an ingredient by ID\r\n  const getIngredientById = (id) => {\r\n    for (const section of sections) {\r\n      const ingredient = section.ingredients.find(i => i.id.toString() === id);\r\n      if (ingredient) return ingredient;\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  return (\r\n    <div className=\"store-organizer-container\">\r\n      <div className=\"store-organizer-header\">\r\n        <h1>Store Section Organizer</h1>\r\n        {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n      </div>\r\n      \r\n      <div className=\"store-organizer-controls\">\r\n        <button \r\n          className=\"back-btn\"\r\n          onClick={() => navigate('/grocery-list')}\r\n        >\r\n          ← Back to Grocery List\r\n        </button>\r\n        \r\n        <div className=\"store-selector\">\r\n          <label htmlFor=\"store-select\">Select Store:</label>\r\n          <select \r\n            id=\"store-select\"\r\n            value={selectedStore || \"\"}\r\n            onChange={handleStoreChange}\r\n          >\r\n            {stores.map(store => (\r\n              <option key={store.id} value={store.id}>{store.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        <div className=\"add-section-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={newSectionName}\r\n            onChange={(e) => setNewSectionName(e.target.value)}\r\n            placeholder=\"New Section Name\"\r\n          />\r\n          <button onClick={addNewSection}>Add Section</button>\r\n        </div>\r\n        \r\n        <button className=\"save-organization-btn\" onClick={saveOrganization}>\r\n          Save Organization\r\n        </button>\r\n      </div>\r\n      \r\n      {loading ? (\r\n        <div className=\"loading\">Loading sections and ingredients...</div>\r\n      ) : (\r\n        <DndContext \r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragStart={handleDragStart}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <div className=\"sections-container\">\r\n            {sections.map(section => (\r\n              <div className=\"section-card\" key={section.id}>\r\n                <div className=\"section-header\">\r\n                  <h3>{section.name}</h3>\r\n                  {section.id !== \"uncategorized\" && (\r\n                    <button \r\n                      className=\"remove-section-btn\"\r\n                      onClick={() => removeSection(section.id)}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  )}\r\n                </div>\r\n                \r\n                <SortableContext\r\n                  id={section.id.toString()}\r\n                  items={section.ingredients.map(i => i.id.toString())}\r\n                  strategy={verticalListSortingStrategy}\r\n                >\r\n                  <div className=\"ingredient-list\">\r\n                    {section.ingredients.length > 0 ? (\r\n                      section.ingredients.map((ingredient, index) => (\r\n                        <SortableIngredient\r\n                          key={ingredient.id}\r\n                          ingredient={ingredient}\r\n                          index={index}\r\n                        />\r\n                      ))\r\n                    ) : (\r\n                      <div className=\"empty-section\">\r\n                        Drag ingredients here\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </SortableContext>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          <DragOverlay>\r\n            {activeId && activeDragData ? (\r\n              <div className=\"ingredient-item dragging\">\r\n                {activeDragData.name}\r\n              </div>\r\n            ) : null}\r\n          </DragOverlay>\r\n        </DndContext>\r\n      )}\r\n      \r\n      <div className=\"organizer-tip\">\r\n        <p>Tip: Drag and drop ingredients between sections to organize your grocery list.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoreOrganizer;"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,UAAU,EACVC,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,UAAU,EACVC,WAAW,QACN,eAAe;AACtB,SACEC,SAAS,EACTC,eAAe,EACfC,2BAA2B,EAC3BC,WAAW,EACXC,2BAA2B,QACtB,mBAAmB;AAC1B,SAASC,GAAG,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM;IACJC,UAAU;IACVC,SAAS;IACTC,UAAU;IACVC,SAAS;IACTC,UAAU;IACVC;EACF,CAAC,GAAGd,WAAW,CAAC;IACde,EAAE,EAAET,UAAU,CAACS,EAAE,CAACC,QAAQ,CAAC,CAAC;IAC5BC,IAAI,EAAE;MAAEX;IAAW;EACrB,CAAC,CAAC;EAEF,MAAMY,KAAK,GAAG;IACZN,SAAS,EAAEV,GAAG,CAACiB,SAAS,CAACH,QAAQ,CAACJ,SAAS,CAAC;IAC5CC,UAAU;IACVO,OAAO,EAAEN,UAAU,GAAG,GAAG,GAAG;EAC9B,CAAC;EAED,oBACEV,OAAA;IACEiB,GAAG,EAAEV,UAAW;IAChBO,KAAK,EAAEA,KAAM;IACbI,SAAS,EAAE,mBAAmBR,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;IAAA,GACzDL,UAAU;IAAA,GACVC,SAAS;IAAAa,QAAA,EAEZjB,UAAU,CAACkB;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;AAACpB,EAAA,CA9BIH,kBAAkB;EAAA,QAQlBL,WAAW;AAAA;AAAA6B,EAAA,GARXxB,kBAAkB;AAgCxB,MAAMyB,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,QAAQ,GAAG3C,WAAW,CAAC,CAAC;EAC9B,MAAM,CAAC4C,QAAQ,EAAEC,WAAW,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,GAAGiD,cAAc,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAM,CAACkD,MAAM,EAAEC,SAAS,CAAC,GAAGnD,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoD,aAAa,EAAEC,gBAAgB,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACsD,cAAc,EAAEC,iBAAiB,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACwD,OAAO,EAAEC,UAAU,CAAC,GAAGzD,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC0D,WAAW,EAAEC,cAAc,CAAC,GAAG3D,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC4D,QAAQ,EAAEC,WAAW,CAAC,GAAG7D,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC8D,cAAc,EAAEC,iBAAiB,CAAC,GAAG/D,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMgE,OAAO,GAAGvD,UAAU,CACxBD,SAAS,CAACD,aAAa,CAAC,EACxBC,SAAS,CAACF,cAAc,EAAE;IACxB2D,gBAAgB,EAAEpD;EACpB,CAAC,CACH,CAAC;;EAED;EACA,MAAMqD,aAAa,GAAGhE,WAAW,CAAC,MAAOiE,OAAO,IAAK;IACnD,IAAI;MACF,MAAMC,gBAAgB,GAAG,MAAMC,KAAK,CAAC,oCAAoCF,OAAO,WAAW,CAAC;MAC5F,MAAMG,YAAY,GAAG,MAAMF,gBAAgB,CAACG,IAAI,CAAC,CAAC;;MAElD;MACA,MAAMC,uBAAuB,GAAGF,YAAY,CAACG,GAAG,CAACC,OAAO,KAAK;QAC3D,GAAGA,OAAO;QACVC,WAAW,EAAE;MACf,CAAC,CAAC,CAAC;MAEH3B,WAAW,CAACwB,uBAAuB,CAAC;;MAEpC;MACA,MAAMI,mBAAmB,GAAG,MAAMP,KAAK,CAAC,uCAAuC,CAAC;MAChF,MAAMQ,eAAe,GAAG,MAAMD,mBAAmB,CAACL,IAAI,CAAC,CAAC;;MAExD;MACA,MAAMO,gBAAgB,GAAG,MAAMT,KAAK,CAAC,0DAA0DF,OAAO,EAAE,CAAC;MACzG,MAAMY,YAAY,GAAG,MAAMD,gBAAgB,CAACP,IAAI,CAAC,CAAC;;MAElD;MACA,MAAMS,UAAU,GAAG,CAAC,CAAC;MACrBR,uBAAuB,CAACS,OAAO,CAACP,OAAO,IAAI;QACzCM,UAAU,CAACN,OAAO,CAAC7C,EAAE,CAAC,GAAG6C,OAAO;MAClC,CAAC,CAAC;;MAEF;MACA,IAAIQ,oBAAoB,GAAG;QACzBrD,EAAE,EAAE,eAAe;QACnBS,IAAI,EAAE,eAAe;QACrBqC,WAAW,EAAE;MACf,CAAC;;MAED;MACAE,eAAe,CAACI,OAAO,CAAC7D,UAAU,IAAI;QACpC,MAAM+D,OAAO,GAAGJ,YAAY,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,aAAa,KAAKlE,UAAU,CAACS,EAAE,CAAC;QAEzE,IAAIsD,OAAO,IAAIH,UAAU,CAACG,OAAO,CAACI,UAAU,CAAC,EAAE;UAC7CP,UAAU,CAACG,OAAO,CAACI,UAAU,CAAC,CAACZ,WAAW,CAACa,IAAI,CAACpE,UAAU,CAAC;QAC7D,CAAC,MAAM;UACL8D,oBAAoB,CAACP,WAAW,CAACa,IAAI,CAACpE,UAAU,CAAC;QACnD;MACF,CAAC,CAAC;;MAEF;MACA,MAAMqE,eAAe,GAAG,CAAC,GAAGC,MAAM,CAACC,MAAM,CAACX,UAAU,CAAC,CAAC;;MAEtD;MACA,IAAIE,oBAAoB,CAACP,WAAW,CAACiB,MAAM,GAAG,CAAC,EAAE;QAC/CH,eAAe,CAACD,IAAI,CAACN,oBAAoB,CAAC;MAC5C;MAEAlC,WAAW,CAACyC,eAAe,CAAC;MAC5BxC,cAAc,CAAC4B,eAAe,CAAC;MAC/BpB,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOoC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChEpC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMsC,SAAS,GAAG7F,WAAW,CAAC,YAAY;IACxC,IAAI;MACFuD,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAMuC,cAAc,GAAG,MAAM3B,KAAK,CAAC,kCAAkC,CAAC;MACtE,MAAM4B,UAAU,GAAG,MAAMD,cAAc,CAACzB,IAAI,CAAC,CAAC;MAC9CpB,SAAS,CAAC8C,UAAU,CAAC;MAErB,IAAIA,UAAU,CAACL,MAAM,GAAG,CAAC,EAAE;QACzBvC,gBAAgB,CAAC4C,UAAU,CAAC,CAAC,CAAC,CAACpE,EAAE,CAAC;;QAElC;QACA,MAAMqC,aAAa,CAAC+B,UAAU,CAAC,CAAC,CAAC,CAACpE,EAAE,CAAC;MACvC,CAAC,MAAM;QACL;QACA,MAAMqE,kBAAkB,CAAC,CAAC;MAC5B;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CpC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACS,aAAa,CAAC,CAAC;;EAEnB;EACAjE,SAAS,CAAC,MAAM;IACd8F,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM9B,KAAK,CAAC,kCAAkC,EAAE;QAC/D+B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBlE,IAAI,EAAE,UAAU;UAChBS,QAAQ,EAAE,CACR;YAAET,IAAI,EAAE,SAAS;YAAEmE,KAAK,EAAE;UAAE,CAAC,EAC7B;YAAEnE,IAAI,EAAE,OAAO;YAAEmE,KAAK,EAAE;UAAE,CAAC,EAC3B;YAAEnE,IAAI,EAAE,MAAM;YAAEmE,KAAK,EAAE;UAAE,CAAC,EAC1B;YAAEnE,IAAI,EAAE,QAAQ;YAAEmE,KAAK,EAAE;UAAE,CAAC,EAC5B;YAAEnE,IAAI,EAAE,QAAQ;YAAEmE,KAAK,EAAE;UAAE,CAAC,EAC5B;YAAEnE,IAAI,EAAE,cAAc;YAAEmE,KAAK,EAAE;UAAE,CAAC,EAClC;YAAEnE,IAAI,EAAE,eAAe;YAAEmE,KAAK,EAAE;UAAE,CAAC;QAEvC,CAAC;MACH,CAAC,CAAC;MAEF,MAAM1E,IAAI,GAAG,MAAMoE,QAAQ,CAAC5B,IAAI,CAAC,CAAC;MAElC,IAAIxC,IAAI,CAAC2E,QAAQ,EAAE;QACjB;QACA,MAAMV,cAAc,GAAG,MAAM3B,KAAK,CAAC,kCAAkC,CAAC;QACtE,MAAM4B,UAAU,GAAG,MAAMD,cAAc,CAACzB,IAAI,CAAC,CAAC;QAC9CpB,SAAS,CAAC8C,UAAU,CAAC;;QAErB;QACA,IAAIA,UAAU,CAACL,MAAM,GAAG,CAAC,EAAE;UACzBvC,gBAAgB,CAAC4C,UAAU,CAAC,CAAC,CAAC,CAACpE,EAAE,CAAC;UAClC,MAAMqC,aAAa,CAAC+B,UAAU,CAAC,CAAC,CAAC,CAACpE,EAAE,CAAC;QACvC;MACF;MAEA4B,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOoC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDpC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMkD,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMzC,OAAO,GAAGyC,CAAC,CAACC,MAAM,CAACC,KAAK;IAC9BzD,gBAAgB,CAACc,OAAO,CAAC;IACzBD,aAAa,CAACC,OAAO,CAAC;EACxB,CAAC;EAED,MAAM4C,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAACzD,cAAc,CAAC0D,IAAI,CAAC,CAAC,EAAE;MAC1BC,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACF;;IAEA;IACA,MAAMC,UAAU,GAAG;MACjBrF,EAAE,EAAE,QAAQsF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAAE;MAC1B9E,IAAI,EAAEgB,cAAc;MACpBmD,KAAK,EAAE1D,QAAQ,CAAC6C,MAAM;MACtBjB,WAAW,EAAE;IACf,CAAC;IAED3B,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEmE,UAAU,CAAC,CAAC;IACtC3D,iBAAiB,CAAC,EAAE,CAAC;EACvB,CAAC;EAED,MAAM8D,aAAa,GAAIC,SAAS,IAAK;IACnC;IACA,MAAM5C,OAAO,GAAG3B,QAAQ,CAACqC,IAAI,CAACmC,CAAC,IAAIA,CAAC,CAAC1F,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKwF,SAAS,CAACxF,QAAQ,CAAC,CAAC,CAAC;IAE5E,IAAI,CAAC4C,OAAO,EAAE;;IAEd;IACA,IAAI8C,aAAa,GAAGzE,QAAQ,CAACqC,IAAI,CAACmC,CAAC,IAAIA,CAAC,CAAC1F,EAAE,KAAK,eAAe,CAAC;IAEhE,IAAI6C,OAAO,CAACC,WAAW,CAACiB,MAAM,GAAG,CAAC,EAAE;MAClC,IAAI,CAAC4B,aAAa,EAAE;QAClB;QACAA,aAAa,GAAG;UACd3F,EAAE,EAAE,eAAe;UACnBS,IAAI,EAAE,eAAe;UACrBqC,WAAW,EAAE;QACf,CAAC;;QAED;QACA3B,WAAW,CAAC,CAAC,GAAGD,QAAQ,CAAC0E,MAAM,CAACF,CAAC,IAAIA,CAAC,CAAC1F,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKwF,SAAS,CAACxF,QAAQ,CAAC,CAAC,CAAC,EAAE0F,aAAa,CAAC,CAAC;MACjG,CAAC,MAAM;QACL;QACAxE,WAAW,CAACD,QAAQ,CAAC0E,MAAM,CAACF,CAAC,IAAIA,CAAC,CAAC1F,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKwF,SAAS,CAACxF,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC7E;;MAEA;MACA0F,aAAa,CAAC7C,WAAW,GAAG,CAAC,GAAG6C,aAAa,CAAC7C,WAAW,EAAE,GAAGD,OAAO,CAACC,WAAW,CAAC;IACpF,CAAC,MAAM;MACL;MACA3B,WAAW,CAACD,QAAQ,CAAC0E,MAAM,CAACF,CAAC,IAAIA,CAAC,CAAC1F,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKwF,SAAS,CAACxF,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7E;EACF,CAAC;EAED,MAAM4F,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF;MACA,MAAMC,WAAW,GAAG5E,QAAQ,CAAC0B,GAAG,CAACC,OAAO,KAAK;QAC3C7C,EAAE,EAAE6C,OAAO,CAAC7C,EAAE,KAAK,eAAe,GAAG,IAAI,GAAG6C,OAAO,CAAC7C,EAAE;QACtDS,IAAI,EAAEoC,OAAO,CAACpC,IAAI;QAClBqC,WAAW,EAAED,OAAO,CAACC,WAAW,CAACF,GAAG,CAAC,CAACrD,UAAU,EAAEC,KAAK,MAAM;UAC3DQ,EAAE,EAAET,UAAU,CAACS,EAAE;UACjBS,IAAI,EAAElB,UAAU,CAACkB,IAAI;UACrBmE,KAAK,EAAEpF;QACT,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC;;MAEH;MACA,MAAM8E,QAAQ,GAAG,MAAM9B,KAAK,CAAC,oDAAoD,EAAE;QACjF+B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBE,QAAQ,EAAEtD,aAAa;UACvBL,QAAQ,EAAE4E;QACZ,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACxB,QAAQ,CAACyB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;;MAEA;MACAlE,cAAc,CAAC,IAAI,CAAC;MACpBmE,UAAU,CAAC,MAAMnE,cAAc,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAE/C,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDoB,KAAK,CAAC,6BAA6B,GAAGpB,KAAK,CAACkC,OAAO,CAAC;IACtD;EACF,CAAC;EAED,MAAMC,eAAe,GAAIC,KAAK,IAAK;IAAA,IAAAC,oBAAA;IACjC,MAAM;MAAEC;IAAO,CAAC,GAAGF,KAAK;IACxBpE,WAAW,CAACsE,MAAM,CAACtG,EAAE,CAAC;IACtBkC,iBAAiB,CAAC,EAAAmE,oBAAA,GAAAC,MAAM,CAACpG,IAAI,CAACqG,OAAO,cAAAF,oBAAA,uBAAnBA,oBAAA,CAAqB9G,UAAU,KAAI,IAAI,CAAC;EAC5D,CAAC;EAED,MAAMiH,aAAa,GAAIJ,KAAK,IAAK;IAC/B,MAAM;MAAEE,MAAM;MAAEG;IAAK,CAAC,GAAGL,KAAK;IAE9B,IAAI,CAACE,MAAM,IAAI,CAACG,IAAI,EAAE;;IAEtB;IACA,MAAMC,eAAe,GAAGC,aAAa,CAACL,MAAM,CAACtG,EAAE,CAAC;IAChD,MAAM4G,aAAa,GAAGD,aAAa,CAACF,IAAI,CAACzG,EAAE,CAAC;;IAE5C;IACA,IACE0G,eAAe,KAAKE,aAAa,IACjCN,MAAM,CAACtG,EAAE,KAAKyG,IAAI,CAACzG,EAAE,EACrB;MACA;IACF;;IAEA;IACA,IAAI0G,eAAe,KAAKE,aAAa,EAAE;MACrC,MAAMC,WAAW,GAAGC,SAAS,CAACJ,eAAe,EAAEJ,MAAM,CAACtG,EAAE,CAAC;MACzD,MAAM+G,SAAS,GAAGD,SAAS,CAACF,aAAa,EAAEH,IAAI,CAACzG,EAAE,CAAC;MAEnD,IAAI6G,WAAW,KAAKE,SAAS,EAAE;QAC7B5F,WAAW,CAAC6F,IAAI,IAAI;UAClB,MAAMC,WAAW,GAAG,CAAC,GAAGD,IAAI,CAAC;UAC7B,MAAME,YAAY,GAAGD,WAAW,CAACH,SAAS,CAACpB,CAAC,IAAIA,CAAC,CAAC1F,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKyG,eAAe,CAAC;UACpF,IAAIQ,YAAY,KAAK,CAAC,CAAC,EAAE;YACvB,MAAMC,cAAc,GAAG,CAAC,GAAGF,WAAW,CAACC,YAAY,CAAC,CAACpE,WAAW,CAAC;YACjEmE,WAAW,CAACC,YAAY,CAAC,CAACpE,WAAW,GAAGhE,SAAS,CAC/CqI,cAAc,EACdN,WAAW,EACXE,SACF,CAAC;UACH;UACA,OAAOE,WAAW;QACpB,CAAC,CAAC;MACJ;IACF;IACA;IAAA,KACK,IAAIP,eAAe,KAAKE,aAAa,EAAE;MAC1C,MAAMQ,gBAAgB,GAAGC,iBAAiB,CAACf,MAAM,CAACtG,EAAE,CAAC;MAErD,IAAI,CAACoH,gBAAgB,EAAE;MAEvBjG,WAAW,CAAC6F,IAAI,IAAI;QAClB,MAAMC,WAAW,GAAG,CAAC,GAAGD,IAAI,CAAC;;QAE7B;QACA,MAAMM,kBAAkB,GAAGL,WAAW,CAACH,SAAS,CAACpB,CAAC,IAAIA,CAAC,CAAC1F,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKyG,eAAe,CAAC;QAC1F,IAAIY,kBAAkB,KAAK,CAAC,CAAC,EAAE;UAC7BL,WAAW,CAACK,kBAAkB,CAAC,CAACxE,WAAW,GAAGmE,WAAW,CAACK,kBAAkB,CAAC,CAACxE,WAAW,CAAC8C,MAAM,CAC9F2B,CAAC,IAAIA,CAAC,CAACvH,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKqG,MAAM,CAACtG,EAClC,CAAC;QACH;;QAEA;QACA,MAAMwH,gBAAgB,GAAGP,WAAW,CAACH,SAAS,CAACpB,CAAC,IAAIA,CAAC,CAAC1F,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAK2G,aAAa,CAAC;QACtF,IAAIY,gBAAgB,KAAK,CAAC,CAAC,EAAE;UAC3B;UACA,MAAMC,UAAU,GAAGhB,IAAI,CAACzG,EAAE;UAC1B,MAAM0H,aAAa,GAAGZ,SAAS,CAACF,aAAa,EAAEa,UAAU,CAAC;;UAE1D;UACA,MAAMN,cAAc,GAAG,CAAC,GAAGF,WAAW,CAACO,gBAAgB,CAAC,CAAC1E,WAAW,CAAC;UACrEqE,cAAc,CAACQ,MAAM,CAACD,aAAa,EAAE,CAAC,EAAEN,gBAAgB,CAAC;UACzDH,WAAW,CAACO,gBAAgB,CAAC,CAAC1E,WAAW,GAAGqE,cAAc;QAC5D;QAEA,OAAOF,WAAW;MACpB,CAAC,CAAC;IACJ;IAEAjF,WAAW,CAAC,IAAI,CAAC;IACjBE,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;;EAED;EACA,MAAMyE,aAAa,GAAI3G,EAAE,IAAK;IAC5B,KAAK,MAAM6C,OAAO,IAAI3B,QAAQ,EAAE;MAC9B,IAAI2B,OAAO,CAAC7C,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKD,EAAE,EAAE;QAChC,OAAO6C,OAAO,CAAC7C,EAAE,CAACC,QAAQ,CAAC,CAAC;MAC9B;MAEA,MAAM2H,eAAe,GAAG/E,OAAO,CAACC,WAAW,CAACS,IAAI,CAAChE,UAAU,IACzDA,UAAU,CAACS,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKD,EAC/B,CAAC;MAED,IAAI4H,eAAe,EAAE;QACnB,OAAO/E,OAAO,CAAC7C,EAAE,CAACC,QAAQ,CAAC,CAAC;MAC9B;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAM6G,SAAS,GAAGA,CAACe,WAAW,EAAEC,MAAM,KAAK;IACzC,MAAMjF,OAAO,GAAG3B,QAAQ,CAACqC,IAAI,CAACmC,CAAC,IAAIA,CAAC,CAAC1F,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAK4H,WAAW,CAAC;IACnE,IAAI,CAAChF,OAAO,EAAE,OAAO,CAAC,CAAC;IAEvB,OAAOA,OAAO,CAACC,WAAW,CAACgE,SAAS,CAACS,CAAC,IAAIA,CAAC,CAACvH,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAK6H,MAAM,CAAC;EACvE,CAAC;;EAED;EACA,MAAMT,iBAAiB,GAAIrH,EAAE,IAAK;IAChC,KAAK,MAAM6C,OAAO,IAAI3B,QAAQ,EAAE;MAC9B,MAAM3B,UAAU,GAAGsD,OAAO,CAACC,WAAW,CAACS,IAAI,CAACgE,CAAC,IAAIA,CAAC,CAACvH,EAAE,CAACC,QAAQ,CAAC,CAAC,KAAKD,EAAE,CAAC;MACxE,IAAIT,UAAU,EAAE,OAAOA,UAAU;IACnC;IACA,OAAO,IAAI;EACb,CAAC;EAED,oBACEF,OAAA;IAAKkB,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCnB,OAAA;MAAKkB,SAAS,EAAC,wBAAwB;MAAAC,QAAA,gBACrCnB,OAAA;QAAAmB,QAAA,EAAI;MAAuB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC/BgB,WAAW,iBAAIxC,OAAA;QAAKkB,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAAgC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzF,CAAC,eAENxB,OAAA;MAAKkB,SAAS,EAAC,0BAA0B;MAAAC,QAAA,gBACvCnB,OAAA;QACEkB,SAAS,EAAC,UAAU;QACpBwH,OAAO,EAAEA,CAAA,KAAM9G,QAAQ,CAAC,eAAe,CAAE;QAAAT,QAAA,EAC1C;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAETxB,OAAA;QAAKkB,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7BnB,OAAA;UAAO2I,OAAO,EAAC,cAAc;UAAAxH,QAAA,EAAC;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnDxB,OAAA;UACEW,EAAE,EAAC,cAAc;UACjBiF,KAAK,EAAE1D,aAAa,IAAI,EAAG;UAC3B0G,QAAQ,EAAEnD,iBAAkB;UAAAtE,QAAA,EAE3Ba,MAAM,CAACuB,GAAG,CAACsF,KAAK,iBACf7I,OAAA;YAAuB4F,KAAK,EAAEiD,KAAK,CAAClI,EAAG;YAAAQ,QAAA,EAAE0H,KAAK,CAACzH;UAAI,GAAtCyH,KAAK,CAAClI,EAAE;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAuC,CAC7D;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENxB,OAAA;QAAKkB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BnB,OAAA;UACE8I,IAAI,EAAC,MAAM;UACXlD,KAAK,EAAExD,cAAe;UACtBwG,QAAQ,EAAGlD,CAAC,IAAKrD,iBAAiB,CAACqD,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;UACnDmD,WAAW,EAAC;QAAkB;UAAA1H,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eACFxB,OAAA;UAAQ0I,OAAO,EAAE7C,aAAc;UAAA1E,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eAENxB,OAAA;QAAQkB,SAAS,EAAC,uBAAuB;QAACwH,OAAO,EAAElC,gBAAiB;QAAArF,QAAA,EAAC;MAErE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAELc,OAAO,gBACNtC,OAAA;MAAKkB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAmC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAElExB,OAAA,CAACd,UAAU;MACT4D,OAAO,EAAEA,OAAQ;MACjBkG,kBAAkB,EAAE7J,aAAc;MAClC8J,WAAW,EAAEnC,eAAgB;MAC7BoC,SAAS,EAAE/B,aAAc;MAAAhG,QAAA,gBAEzBnB,OAAA;QAAKkB,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAChCU,QAAQ,CAAC0B,GAAG,CAACC,OAAO,iBACnBxD,OAAA;UAAKkB,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3BnB,OAAA;YAAKkB,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7BnB,OAAA;cAAAmB,QAAA,EAAKqC,OAAO,CAACpC;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,EACtBgC,OAAO,CAAC7C,EAAE,KAAK,eAAe,iBAC7BX,OAAA;cACEkB,SAAS,EAAC,oBAAoB;cAC9BwH,OAAO,EAAEA,CAAA,KAAMvC,aAAa,CAAC3C,OAAO,CAAC7C,EAAE,CAAE;cAAAQ,QAAA,EAC1C;YAED;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CACT;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENxB,OAAA,CAACN,eAAe;YACdiB,EAAE,EAAE6C,OAAO,CAAC7C,EAAE,CAACC,QAAQ,CAAC,CAAE;YAC1BuI,KAAK,EAAE3F,OAAO,CAACC,WAAW,CAACF,GAAG,CAAC2E,CAAC,IAAIA,CAAC,CAACvH,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAE;YACrDwI,QAAQ,EAAEvJ,2BAA4B;YAAAsB,QAAA,eAEtCnB,OAAA;cAAKkB,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAC7BqC,OAAO,CAACC,WAAW,CAACiB,MAAM,GAAG,CAAC,GAC7BlB,OAAO,CAACC,WAAW,CAACF,GAAG,CAAC,CAACrD,UAAU,EAAEC,KAAK,kBACxCH,OAAA,CAACC,kBAAkB;gBAEjBC,UAAU,EAAEA,UAAW;gBACvBC,KAAK,EAAEA;cAAM,GAFRD,UAAU,CAACS,EAAE;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAGnB,CACF,CAAC,gBAEFxB,OAAA;gBAAKkB,SAAS,EAAC,eAAe;gBAAAC,QAAA,EAAC;cAE/B;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK;YACN;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACS,CAAC;QAAA,GAjCegC,OAAO,CAAC7C,EAAE;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAkCxC,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENxB,OAAA,CAACR,WAAW;QAAA2B,QAAA,EACTuB,QAAQ,IAAIE,cAAc,gBACzB5C,OAAA;UAAKkB,SAAS,EAAC,0BAA0B;UAAAC,QAAA,EACtCyB,cAAc,CAACxB;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC,GACJ;MAAI;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CACb,eAEDxB,OAAA;MAAKkB,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5BnB,OAAA;QAAAmB,QAAA,EAAG;MAA8E;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACG,GAAA,CA5dID,cAAc;EAAA,QACDzC,WAAW,EAWZM,UAAU,EACxBD,SAAS,EACTA,SAAS;AAAA;AAAA+J,GAAA,GAdP3H,cAAc;AA8dpB,eAAeA,cAAc;AAAC,IAAAD,EAAA,EAAA4H,GAAA;AAAAC,YAAA,CAAA7H,EAAA;AAAA6H,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}