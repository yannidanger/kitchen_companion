{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\storeorganizer\\\\sectionGrid.js\";\n// sectionGrid.js\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SectionGrid = ({\n  sections,\n  getIngredientsForSection,\n  getUncategorizedIngredients,\n  selectedIngredients,\n  toggleIngredientSelection,\n  selectAllInSection,\n  removeSection\n}) => {\n  // Define the function before using it\n  const getUniqueIngredients = () => {\n    // Create a map to track which sections each ingredient is in\n    const sectionMap = {};\n\n    // Map ingredients to their sections\n    sections.forEach(section => {\n      const sectionIngredients = getIngredientsForSection(section.id);\n      sectionIngredients.forEach(ing => {\n        if (!sectionMap[ing.id]) {\n          sectionMap[ing.id] = [];\n        }\n        sectionMap[ing.id].push(section.name);\n      });\n    });\n\n    // For debugging\n    console.log(\"Section mapping:\", sectionMap);\n\n    // Return ingredients that aren't in any section\n    return getUncategorizedIngredients();\n  };\n\n  // Only declare this once\n  const allIngredients = getUncategorizedIngredients();\n\n  // Filter out duplicate Uncategorized sections\n  const uniqueSections = sections.filter((section, index, self) => {\n    // Keep only the first occurrence of each section name (case-insensitive)\n    return index === self.findIndex(s => s.name.toLowerCase() === section.name.toLowerCase());\n  });\n\n  // Rest of your component...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"organizer-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"all-ingredients-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"All Ingredients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ingredient-list\",\n        children: allIngredients.length > 0 ? allIngredients.map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`,\n          onClick: () => toggleIngredientSelection(ingredient.id),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: !!selectedIngredients[ingredient.id],\n            onChange: () => toggleIngredientSelection(ingredient.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: ingredient.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this)]\n        }, ingredient.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-section\",\n          children: \"No ingredients available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sections-panel\",\n      children: uniqueSections.map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: section.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => selectAllInSection(section.id),\n              children: \"Select All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this), section.name.toLowerCase() !== \"uncategorized\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-section-btn\",\n              onClick: () => removeSection(section.id),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredient-list\",\n          children: getIngredientsForSection(section.id).length > 0 ? getIngredientsForSection(section.id).map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`,\n            onClick: () => toggleIngredientSelection(ingredient.id),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: !!selectedIngredients[ingredient.id],\n              onChange: () => toggleIngredientSelection(ingredient.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: ingredient.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 41\n            }, this)]\n          }, ingredient.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-section\",\n            children: \"No ingredients in this section\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, section.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_c = SectionGrid;\nexport default SectionGrid;\nvar _c;\n$RefreshReg$(_c, \"SectionGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SectionGrid","sections","getIngredientsForSection","getUncategorizedIngredients","selectedIngredients","toggleIngredientSelection","selectAllInSection","removeSection","getUniqueIngredients","sectionMap","forEach","section","sectionIngredients","id","ing","push","name","console","log","allIngredients","uniqueSections","filter","index","self","findIndex","s","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","ingredient","onClick","type","checked","onChange","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/storeorganizer/sectionGrid.js"],"sourcesContent":["// sectionGrid.js\r\nimport React from \"react\";\r\n\r\nconst SectionGrid = ({\r\n    sections,\r\n    getIngredientsForSection,\r\n    getUncategorizedIngredients,\r\n    selectedIngredients,\r\n    toggleIngredientSelection,\r\n    selectAllInSection,\r\n    removeSection\r\n}) => {\r\n    // Define the function before using it\r\n    const getUniqueIngredients = () => {\r\n        // Create a map to track which sections each ingredient is in\r\n        const sectionMap = {};\r\n        \r\n        // Map ingredients to their sections\r\n        sections.forEach(section => {\r\n            const sectionIngredients = getIngredientsForSection(section.id);\r\n            sectionIngredients.forEach(ing => {\r\n                if (!sectionMap[ing.id]) {\r\n                    sectionMap[ing.id] = [];\r\n                }\r\n                sectionMap[ing.id].push(section.name);\r\n            });\r\n        });\r\n        \r\n        // For debugging\r\n        console.log(\"Section mapping:\", sectionMap);\r\n        \r\n        // Return ingredients that aren't in any section\r\n        return getUncategorizedIngredients();\r\n    };\r\n\r\n    // Only declare this once\r\n    const allIngredients = getUncategorizedIngredients();\r\n\r\n    // Filter out duplicate Uncategorized sections\r\n    const uniqueSections = sections.filter((section, index, self) => {\r\n        // Keep only the first occurrence of each section name (case-insensitive)\r\n        return index === self.findIndex(s => \r\n            s.name.toLowerCase() === section.name.toLowerCase()\r\n        );\r\n    });\r\n\r\n    // Rest of your component...\r\n\r\n    return (\r\n        <div className=\"organizer-content\">\r\n            {/* Left panel with all ingredients */}\r\n            <div className=\"all-ingredients-panel\">\r\n                <h3>All Ingredients</h3>\r\n                <div className=\"ingredient-list\">\r\n                    {allIngredients.length > 0 ? (\r\n                        allIngredients.map(ingredient => (\r\n                            <div\r\n                                key={ingredient.id}\r\n                                className={`ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`}\r\n                                onClick={() => toggleIngredientSelection(ingredient.id)}\r\n                            >\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={!!selectedIngredients[ingredient.id]}\r\n                                    onChange={() => toggleIngredientSelection(ingredient.id)}\r\n                                />\r\n                                <span>{ingredient.name}</span>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <div className=\"empty-section\">No ingredients available</div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Right panel with sections */}\r\n            <div className=\"sections-panel\">\r\n                {uniqueSections.map(section => (\r\n                    <div className=\"section-card\" key={section.id}>\r\n                        <div className=\"section-header\">\r\n                            <h3>{section.name}</h3>\r\n                            <div className=\"section-actions\">\r\n                                <button onClick={() => selectAllInSection(section.id)}>\r\n                                    Select All\r\n                                </button>\r\n                                {section.name.toLowerCase() !== \"uncategorized\" && (\r\n                                    <button\r\n                                        className=\"remove-section-btn\"\r\n                                        onClick={() => removeSection(section.id)}\r\n                                    >\r\n                                        ✕\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"ingredient-list\">\r\n                            {getIngredientsForSection(section.id).length > 0 ? (\r\n                                getIngredientsForSection(section.id).map(ingredient => (\r\n                                    <div\r\n                                        key={ingredient.id}\r\n                                        className={`ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`}\r\n                                        onClick={() => toggleIngredientSelection(ingredient.id)}\r\n                                    >\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={!!selectedIngredients[ingredient.id]}\r\n                                            onChange={() => toggleIngredientSelection(ingredient.id)}\r\n                                        />\r\n                                        <span>{ingredient.name}</span>\r\n                                    </div>\r\n                                ))\r\n                            ) : (\r\n                                <div className=\"empty-section\">No ingredients in this section</div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SectionGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}