{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\storeorganizer\\\\sectionGrid.js\";\n// sectionGrid.js\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SectionGrid = ({\n  sections,\n  getIngredientsForSection,\n  getUncategorizedIngredients,\n  selectedIngredients,\n  toggleIngredientSelection,\n  selectAllInSection,\n  removeSection\n}) => {\n  // Get all available ingredients across all sections and uncategorized\n  const allIngredients = [...getUncategorizedIngredients(), ...getUniqueIngredients(), ...sections.flatMap(section => getIngredientsForSection(section.id))];\n\n  // Filter out duplicate Uncategorized sections\n  const uniqueSections = sections.filter((section, index, self) => {\n    // Keep only the first occurrence of each section name (case-insensitive)\n    return index === self.findIndex(s => s.name.toLowerCase() === section.name.toLowerCase());\n  });\n  const getUniqueIngredients = () => {\n    const uniqueIngredients = {};\n\n    // First add uncategorized\n    getUncategorizedIngredients().forEach(ing => {\n      uniqueIngredients[ing.id] = ing;\n    });\n\n    // Then add from sections (ingredients should only appear in one section)\n    sections.forEach(section => {\n      getIngredientsForSection(section.id).forEach(ing => {\n        uniqueIngredients[ing.id] = ing;\n      });\n    });\n    return Object.values(uniqueIngredients);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"organizer-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"all-ingredients-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"All Ingredients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ingredient-list\",\n        children: allIngredients.length > 0 ? allIngredients.map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`,\n          onClick: () => toggleIngredientSelection(ingredient.id),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: !!selectedIngredients[ingredient.id],\n            onChange: () => toggleIngredientSelection(ingredient.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: ingredient.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this)]\n        }, ingredient.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-section\",\n          children: \"No ingredients available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sections-panel\",\n      children: uniqueSections.map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: section.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => selectAllInSection(section.id),\n              children: \"Select All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this), section.name.toLowerCase() !== \"uncategorized\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-section-btn\",\n              onClick: () => removeSection(section.id),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredient-list\",\n          children: getIngredientsForSection(section.id).length > 0 ? getIngredientsForSection(section.id).map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`,\n            onClick: () => toggleIngredientSelection(ingredient.id),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: !!selectedIngredients[ingredient.id],\n              onChange: () => toggleIngredientSelection(ingredient.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: ingredient.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 41\n            }, this)]\n          }, ingredient.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-section\",\n            children: \"No ingredients in this section\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)]\n      }, section.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_c = SectionGrid;\nexport default SectionGrid;\nvar _c;\n$RefreshReg$(_c, \"SectionGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SectionGrid","sections","getIngredientsForSection","getUncategorizedIngredients","selectedIngredients","toggleIngredientSelection","selectAllInSection","removeSection","allIngredients","getUniqueIngredients","flatMap","section","id","uniqueSections","filter","index","self","findIndex","s","name","toLowerCase","uniqueIngredients","forEach","ing","Object","values","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","ingredient","onClick","type","checked","onChange","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/storeorganizer/sectionGrid.js"],"sourcesContent":["// sectionGrid.js\r\nimport React from \"react\";\r\n\r\nconst SectionGrid = ({\r\n    sections,\r\n    getIngredientsForSection,\r\n    getUncategorizedIngredients,\r\n    selectedIngredients,\r\n    toggleIngredientSelection,\r\n    selectAllInSection,\r\n    removeSection\r\n}) => {\r\n    // Get all available ingredients across all sections and uncategorized\r\n    const allIngredients = [\r\n        ...getUncategorizedIngredients(),\r\n        ...getUniqueIngredients(),\r\n        ...sections.flatMap(section => getIngredientsForSection(section.id))\r\n    ];\r\n\r\n    // Filter out duplicate Uncategorized sections\r\n    const uniqueSections = sections.filter((section, index, self) => {\r\n        // Keep only the first occurrence of each section name (case-insensitive)\r\n        return index === self.findIndex(s =>\r\n            s.name.toLowerCase() === section.name.toLowerCase()\r\n        );\r\n    });\r\n\r\n    const getUniqueIngredients = () => {\r\n        const uniqueIngredients = {};\r\n\r\n        // First add uncategorized\r\n        getUncategorizedIngredients().forEach(ing => {\r\n            uniqueIngredients[ing.id] = ing;\r\n        });\r\n\r\n        // Then add from sections (ingredients should only appear in one section)\r\n        sections.forEach(section => {\r\n            getIngredientsForSection(section.id).forEach(ing => {\r\n                uniqueIngredients[ing.id] = ing;\r\n            });\r\n        });\r\n\r\n        return Object.values(uniqueIngredients);\r\n    };\r\n\r\n    return (\r\n        <div className=\"organizer-content\">\r\n            {/* Left panel with all ingredients */}\r\n            <div className=\"all-ingredients-panel\">\r\n                <h3>All Ingredients</h3>\r\n                <div className=\"ingredient-list\">\r\n                    {allIngredients.length > 0 ? (\r\n                        allIngredients.map(ingredient => (\r\n                            <div\r\n                                key={ingredient.id}\r\n                                className={`ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`}\r\n                                onClick={() => toggleIngredientSelection(ingredient.id)}\r\n                            >\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={!!selectedIngredients[ingredient.id]}\r\n                                    onChange={() => toggleIngredientSelection(ingredient.id)}\r\n                                />\r\n                                <span>{ingredient.name}</span>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <div className=\"empty-section\">No ingredients available</div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Right panel with sections */}\r\n            <div className=\"sections-panel\">\r\n                {uniqueSections.map(section => (\r\n                    <div className=\"section-card\" key={section.id}>\r\n                        <div className=\"section-header\">\r\n                            <h3>{section.name}</h3>\r\n                            <div className=\"section-actions\">\r\n                                <button onClick={() => selectAllInSection(section.id)}>\r\n                                    Select All\r\n                                </button>\r\n                                {section.name.toLowerCase() !== \"uncategorized\" && (\r\n                                    <button\r\n                                        className=\"remove-section-btn\"\r\n                                        onClick={() => removeSection(section.id)}\r\n                                    >\r\n                                        ✕\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"ingredient-list\">\r\n                            {getIngredientsForSection(section.id).length > 0 ? (\r\n                                getIngredientsForSection(section.id).map(ingredient => (\r\n                                    <div\r\n                                        key={ingredient.id}\r\n                                        className={`ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`}\r\n                                        onClick={() => toggleIngredientSelection(ingredient.id)}\r\n                                    >\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={!!selectedIngredients[ingredient.id]}\r\n                                            onChange={() => toggleIngredientSelection(ingredient.id)}\r\n                                        />\r\n                                        <span>{ingredient.name}</span>\r\n                                    </div>\r\n                                ))\r\n                            ) : (\r\n                                <div className=\"empty-section\">No ingredients in this section</div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SectionGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}