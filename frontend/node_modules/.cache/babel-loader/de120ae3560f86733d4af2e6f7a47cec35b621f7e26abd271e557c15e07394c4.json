{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\StoreOrganizer.js\",\n  _s = $RefreshSig$();\n// In StoreOrganizer.js\n// Modify the code as follows:\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StoreOrganizer() {\n  _s();\n  const navigate = useNavigate();\n  const [sections, setSections] = useState([]);\n  const [, setIngredients] = useState([]); // Only using the setter\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n\n  // Wrap fetchSections in useCallback\n  const fetchSections = useCallback(async storeId => {\n    try {\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n      const sectionsData = await sectionsResponse.json();\n\n      // Initialize sections with empty ingredient arrays\n      const sectionsWithIngredients = sectionsData.map(section => ({\n        ...section,\n        ingredients: []\n      }));\n      setSections(sectionsWithIngredients);\n\n      // Fetch ingredients\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\n      const ingredientsData = await ingredientsResponse.json();\n\n      // Fetch ingredient section mappings\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n      const mappingsData = await mappingsResponse.json();\n\n      // Organize ingredients into sections\n      const sectionMap = {};\n      sectionsWithIngredients.forEach(section => {\n        sectionMap[section.id] = section;\n      });\n\n      // Add a default \"Uncategorized\" section\n      let uncategorizedSection = {\n        id: \"uncategorized\",\n        name: \"Uncategorized\",\n        ingredients: []\n      };\n\n      // Assign ingredients to their sections based on mappings\n      ingredientsData.forEach(ingredient => {\n        const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\n        if (mapping && sectionMap[mapping.section_id]) {\n          sectionMap[mapping.section_id].ingredients.push(ingredient);\n        } else {\n          uncategorizedSection.ingredients.push(ingredient);\n        }\n      });\n\n      // Update sections array with assigned ingredients\n      const updatedSections = [...Object.values(sectionMap)];\n\n      // Add uncategorized section if it has ingredients\n      if (uncategorizedSection.ingredients.length > 0) {\n        updatedSections.push(uncategorizedSection);\n      }\n      setSections(updatedSections);\n      setIngredients(ingredientsData);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching sections and ingredients:\", error);\n      setLoading(false);\n    }\n  }, []);\n\n  // Define fetchData after fetchSections\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Fetch stores\n      const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n      const storesData = await storesResponse.json();\n      setStores(storesData);\n      if (storesData.length > 0) {\n        setSelectedStore(storesData[0].id);\n\n        // Fetch sections for the selected store\n        await fetchSections(storesData[0].id);\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setLoading(false);\n    }\n  }, [fetchSections]);\n\n  // Use fetchData in useEffect\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Rest of the component unchanged...\n\n  const handleStoreChange = e => {\n    const storeId = e.target.value;\n    setSelectedStore(storeId);\n    fetchSections(storeId);\n  };\n  const handleDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    // Dropped outside a droppable area\n    if (!destination) return;\n\n    // Moved within the same section\n    if (source.droppableId === destination.droppableId) {\n      const sectionId = source.droppableId;\n      const section = sections.find(s => s.id.toString() === sectionId);\n      if (section) {\n        const newIngredients = [...section.ingredients];\n        const [removed] = newIngredients.splice(source.index, 1);\n        newIngredients.splice(destination.index, 0, removed);\n        const newSections = sections.map(s => {\n          if (s.id.toString() === sectionId) {\n            return {\n              ...s,\n              ingredients: newIngredients\n            };\n          }\n          return s;\n        });\n        setSections(newSections);\n      }\n    }\n    // Moved to a different section\n    else {\n      const sourceSection = sections.find(s => s.id.toString() === source.droppableId);\n      const destSection = sections.find(s => s.id.toString() === destination.droppableId);\n      if (sourceSection && destSection) {\n        // Copy the arrays\n        const sourceIngredients = [...sourceSection.ingredients];\n        const destIngredients = [...destSection.ingredients];\n\n        // Remove from source and add to destination\n        const [removed] = sourceIngredients.splice(source.index, 1);\n        destIngredients.splice(destination.index, 0, removed);\n\n        // Update the sections\n        const newSections = sections.map(s => {\n          if (s.id.toString() === source.droppableId) {\n            return {\n              ...s,\n              ingredients: sourceIngredients\n            };\n          }\n          if (s.id.toString() === destination.droppableId) {\n            return {\n              ...s,\n              ingredients: destIngredients\n            };\n          }\n          return s;\n        });\n        setSections(newSections);\n      }\n    }\n  };\n  const addNewSection = () => {\n    if (!newSectionName.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n\n    // Create new section locally first\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      // Temporary ID until saved\n      name: newSectionName,\n      order: sections.length,\n      ingredients: []\n    };\n    setSections([...sections, newSection]);\n    setNewSectionName(\"\");\n  };\n  const removeSection = sectionId => {\n    // Get the section\n    const section = sections.find(s => s.id.toString() === sectionId.toString());\n    if (!section) return;\n\n    // If section has ingredients, move them to uncategorized\n    let uncategorized = sections.find(s => s.id === \"uncategorized\");\n    if (section.ingredients.length > 0) {\n      if (!uncategorized) {\n        // Create uncategorized section if it doesn't exist\n        uncategorized = {\n          id: \"uncategorized\",\n          name: \"Uncategorized\",\n          ingredients: []\n        };\n\n        // Add to sections\n        setSections([...sections.filter(s => s.id.toString() !== sectionId.toString()), uncategorized]);\n      } else {\n        // Update sections without the removed one\n        setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n      }\n\n      // Move ingredients to uncategorized\n      uncategorized.ingredients = [...uncategorized.ingredients, ...section.ingredients];\n    } else {\n      // Just remove the section\n      setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n    }\n  };\n  const saveOrganization = async () => {\n    try {\n      // Prepare the data\n      const sectionData = sections.map(section => ({\n        id: section.id === \"uncategorized\" ? null : section.id,\n        name: section.name,\n        ingredients: section.ingredients.map((ingredient, index) => ({\n          id: ingredient.id,\n          name: ingredient.name,\n          order: index\n        }))\n      }));\n\n      // Send to the backend\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save organization\");\n      }\n\n      // Show success message\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"store-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"store-select\",\n          children: \"Select Store:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"store-select\",\n          value: selectedStore || \"\",\n          onChange: handleStoreChange,\n          children: stores.map(store => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: store.id,\n            children: store.name\n          }, store.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-btn\",\n          onClick: () => navigate('/grocery-list'),\n          children: \"\\u2190 Back to Grocery List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-section-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newSectionName,\n          onChange: e => setNewSectionName(e.target.value),\n          placeholder: \"New Section Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewSection,\n          children: \"Add Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-organization-btn\",\n        onClick: saveOrganization,\n        children: \"Save Organization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sections-container\",\n        children: sections.map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: section.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }, this), section.id !== \"uncategorized\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-section-btn\",\n              onClick: () => removeSection(section.id),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: section.id.toString(),\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `ingredient-list ${snapshot.isDraggingOver ? 'dragging-over' : ''}`,\n              ref: provided.innerRef,\n              ...provided.droppableProps,\n              children: [section.ingredients.length > 0 ? section.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: ingredient.id.toString(),\n                index: index,\n                children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `ingredient-item ${snapshot.isDragging ? 'dragging' : ''}`,\n                  ref: provided.innerRef,\n                  ...provided.draggableProps,\n                  ...provided.dragHandleProps,\n                  children: ingredient.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 31\n                }, this)\n              }, ingredient.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 27\n              }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"empty-section\",\n                children: \"Drag ingredients here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 25\n              }, this), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 17\n          }, this)]\n        }, section.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Drag and drop ingredients between sections to organize your grocery list.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n}\n_s(StoreOrganizer, \"t83nDH1u3wpufwY+WTNRKaEfPvo=\", false, function () {\n  return [useNavigate];\n});\n_c = StoreOrganizer;\nexport default StoreOrganizer;\nvar _c;\n$RefreshReg$(_c, \"StoreOrganizer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","DragDropContext","Droppable","Draggable","useNavigate","jsxDEV","_jsxDEV","StoreOrganizer","_s","navigate","sections","setSections","setIngredients","stores","setStores","selectedStore","setSelectedStore","newSectionName","setNewSectionName","loading","setLoading","saveSuccess","setSaveSuccess","fetchSections","storeId","sectionsResponse","fetch","sectionsData","json","sectionsWithIngredients","map","section","ingredients","ingredientsResponse","ingredientsData","mappingsResponse","mappingsData","sectionMap","forEach","id","uncategorizedSection","name","ingredient","mapping","find","m","ingredient_id","section_id","push","updatedSections","Object","values","length","error","console","fetchData","storesResponse","storesData","handleStoreChange","e","target","value","handleDragEnd","result","source","destination","droppableId","sectionId","s","toString","newIngredients","removed","splice","index","newSections","sourceSection","destSection","sourceIngredients","destIngredients","addNewSection","trim","alert","newSection","Date","now","order","removeSection","uncategorized","filter","saveOrganization","sectionData","response","method","headers","body","JSON","stringify","store_id","ok","Error","setTimeout","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","store","onClick","type","placeholder","onDragEnd","provided","snapshot","isDraggingOver","ref","innerRef","droppableProps","draggableId","isDragging","draggableProps","dragHandleProps","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/StoreOrganizer.js"],"sourcesContent":["// In StoreOrganizer.js\r\n// Modify the code as follows:\r\n\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction StoreOrganizer() {\r\n  const navigate = useNavigate();\r\n  const [sections, setSections] = useState([]);\r\n  const [, setIngredients] = useState([]); // Only using the setter\r\n  const [stores, setStores] = useState([]);\r\n  const [selectedStore, setSelectedStore] = useState(null);\r\n  const [newSectionName, setNewSectionName] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n\r\n  // Wrap fetchSections in useCallback\r\n  const fetchSections = useCallback(async (storeId) => {\r\n    try {\r\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n      const sectionsData = await sectionsResponse.json();\r\n\r\n      // Initialize sections with empty ingredient arrays\r\n      const sectionsWithIngredients = sectionsData.map(section => ({\r\n        ...section,\r\n        ingredients: []\r\n      }));\r\n\r\n      setSections(sectionsWithIngredients);\r\n\r\n      // Fetch ingredients\r\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\r\n      const ingredientsData = await ingredientsResponse.json();\r\n\r\n      // Fetch ingredient section mappings\r\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n      const mappingsData = await mappingsResponse.json();\r\n\r\n      // Organize ingredients into sections\r\n      const sectionMap = {};\r\n      sectionsWithIngredients.forEach(section => {\r\n        sectionMap[section.id] = section;\r\n      });\r\n\r\n      // Add a default \"Uncategorized\" section\r\n      let uncategorizedSection = {\r\n        id: \"uncategorized\",\r\n        name: \"Uncategorized\",\r\n        ingredients: []\r\n      };\r\n\r\n      // Assign ingredients to their sections based on mappings\r\n      ingredientsData.forEach(ingredient => {\r\n        const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\r\n\r\n        if (mapping && sectionMap[mapping.section_id]) {\r\n          sectionMap[mapping.section_id].ingredients.push(ingredient);\r\n        } else {\r\n          uncategorizedSection.ingredients.push(ingredient);\r\n        }\r\n      });\r\n\r\n      // Update sections array with assigned ingredients\r\n      const updatedSections = [...Object.values(sectionMap)];\r\n\r\n      // Add uncategorized section if it has ingredients\r\n      if (uncategorizedSection.ingredients.length > 0) {\r\n        updatedSections.push(uncategorizedSection);\r\n      }\r\n\r\n      setSections(updatedSections);\r\n      setIngredients(ingredientsData);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching sections and ingredients:\", error);\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Define fetchData after fetchSections\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch stores\r\n      const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n      const storesData = await storesResponse.json();\r\n      setStores(storesData);\r\n\r\n      if (storesData.length > 0) {\r\n        setSelectedStore(storesData[0].id);\r\n\r\n        // Fetch sections for the selected store\r\n        await fetchSections(storesData[0].id);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      setLoading(false);\r\n    }\r\n  }, [fetchSections]);\r\n\r\n  // Use fetchData in useEffect\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // Rest of the component unchanged...\r\n\r\n  const handleStoreChange = (e) => {\r\n    const storeId = e.target.value;\r\n    setSelectedStore(storeId);\r\n    fetchSections(storeId);\r\n  };\r\n\r\n  const handleDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n\r\n    // Dropped outside a droppable area\r\n    if (!destination) return;\r\n\r\n    // Moved within the same section\r\n    if (source.droppableId === destination.droppableId) {\r\n      const sectionId = source.droppableId;\r\n      const section = sections.find(s => s.id.toString() === sectionId);\r\n\r\n      if (section) {\r\n        const newIngredients = [...section.ingredients];\r\n        const [removed] = newIngredients.splice(source.index, 1);\r\n        newIngredients.splice(destination.index, 0, removed);\r\n\r\n        const newSections = sections.map(s => {\r\n          if (s.id.toString() === sectionId) {\r\n            return { ...s, ingredients: newIngredients };\r\n          }\r\n          return s;\r\n        });\r\n\r\n        setSections(newSections);\r\n      }\r\n    }\r\n    // Moved to a different section\r\n    else {\r\n      const sourceSection = sections.find(s => s.id.toString() === source.droppableId);\r\n      const destSection = sections.find(s => s.id.toString() === destination.droppableId);\r\n\r\n      if (sourceSection && destSection) {\r\n        // Copy the arrays\r\n        const sourceIngredients = [...sourceSection.ingredients];\r\n        const destIngredients = [...destSection.ingredients];\r\n\r\n        // Remove from source and add to destination\r\n        const [removed] = sourceIngredients.splice(source.index, 1);\r\n        destIngredients.splice(destination.index, 0, removed);\r\n\r\n        // Update the sections\r\n        const newSections = sections.map(s => {\r\n          if (s.id.toString() === source.droppableId) {\r\n            return { ...s, ingredients: sourceIngredients };\r\n          }\r\n          if (s.id.toString() === destination.droppableId) {\r\n            return { ...s, ingredients: destIngredients };\r\n          }\r\n          return s;\r\n        });\r\n\r\n        setSections(newSections);\r\n      }\r\n    }\r\n  };\r\n\r\n  const addNewSection = () => {\r\n    if (!newSectionName.trim()) {\r\n      alert(\"Please enter a section name\");\r\n      return;\r\n    }\r\n\r\n    // Create new section locally first\r\n    const newSection = {\r\n      id: `temp-${Date.now()}`, // Temporary ID until saved\r\n      name: newSectionName,\r\n      order: sections.length,\r\n      ingredients: []\r\n    };\r\n\r\n    setSections([...sections, newSection]);\r\n    setNewSectionName(\"\");\r\n  };\r\n\r\n  const removeSection = (sectionId) => {\r\n    // Get the section\r\n    const section = sections.find(s => s.id.toString() === sectionId.toString());\r\n\r\n    if (!section) return;\r\n\r\n    // If section has ingredients, move them to uncategorized\r\n    let uncategorized = sections.find(s => s.id === \"uncategorized\");\r\n\r\n    if (section.ingredients.length > 0) {\r\n      if (!uncategorized) {\r\n        // Create uncategorized section if it doesn't exist\r\n        uncategorized = {\r\n          id: \"uncategorized\",\r\n          name: \"Uncategorized\",\r\n          ingredients: []\r\n        };\r\n\r\n        // Add to sections\r\n        setSections([...sections.filter(s => s.id.toString() !== sectionId.toString()), uncategorized]);\r\n      } else {\r\n        // Update sections without the removed one\r\n        setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n      }\r\n\r\n      // Move ingredients to uncategorized\r\n      uncategorized.ingredients = [...uncategorized.ingredients, ...section.ingredients];\r\n    } else {\r\n      // Just remove the section\r\n      setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n    }\r\n  };\r\n\r\n  const saveOrganization = async () => {\r\n    try {\r\n      // Prepare the data\r\n      const sectionData = sections.map(section => ({\r\n        id: section.id === \"uncategorized\" ? null : section.id,\r\n        name: section.name,\r\n        ingredients: section.ingredients.map((ingredient, index) => ({\r\n          id: ingredient.id,\r\n          name: ingredient.name,\r\n          order: index\r\n        }))\r\n      }));\r\n\r\n      // Send to the backend\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          store_id: selectedStore,\r\n          sections: sectionData\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to save organization\");\r\n      }\r\n\r\n      // Show success message\r\n      setSaveSuccess(true);\r\n      setTimeout(() => setSaveSuccess(false), 3000);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving organization:\", error);\r\n      alert(\"Error saving organization: \" + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"store-organizer-container\">\r\n      <div className=\"store-organizer-header\">\r\n        <h1>Store Section Organizer</h1>\r\n        {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n      </div>\r\n\r\n      <div className=\"store-organizer-controls\">\r\n        <div className=\"store-selector\">\r\n          <label htmlFor=\"store-select\">Select Store:</label>\r\n          <select\r\n            id=\"store-select\"\r\n            value={selectedStore || \"\"}\r\n            onChange={handleStoreChange}\r\n          >\r\n            {stores.map(store => (\r\n              <option key={store.id} value={store.id}>{store.name}</option>\r\n            ))}\r\n          </select>\r\n          <button\r\n            className=\"back-btn\"\r\n            onClick={() => navigate('/grocery-list')}\r\n          >\r\n            ← Back to Grocery List\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"add-section-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={newSectionName}\r\n            onChange={(e) => setNewSectionName(e.target.value)}\r\n            placeholder=\"New Section Name\"\r\n          />\r\n          <button onClick={addNewSection}>Add Section</button>\r\n        </div>\r\n\r\n        <button className=\"save-organization-btn\" onClick={saveOrganization}>\r\n          Save Organization\r\n        </button>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div className=\"loading\">Loading sections and ingredients...</div>\r\n      ) : (\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n          <div className=\"sections-container\">\r\n            {sections.map(section => (\r\n              <div className=\"section-card\" key={section.id}>\r\n                <div className=\"section-header\">\r\n                  <h3>{section.name}</h3>\r\n                  {section.id !== \"uncategorized\" && (\r\n                    <button\r\n                      className=\"remove-section-btn\"\r\n                      onClick={() => removeSection(section.id)}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  )}\r\n                </div>\r\n\r\n                <Droppable droppableId={section.id.toString()}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      className={`ingredient-list ${snapshot.isDraggingOver ? 'dragging-over' : ''}`}\r\n                      ref={provided.innerRef}\r\n                      {...provided.droppableProps}\r\n                    >\r\n                      {section.ingredients.length > 0 ? (\r\n                        section.ingredients.map((ingredient, index) => (\r\n                          <Draggable\r\n                            key={ingredient.id}\r\n                            draggableId={ingredient.id.toString()}\r\n                            index={index}\r\n                          >\r\n                            {(provided, snapshot) => (\r\n                              <div\r\n                                className={`ingredient-item ${snapshot.isDragging ? 'dragging' : ''}`}\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                              >\r\n                                {ingredient.name}\r\n                              </div>\r\n                            )}\r\n                          </Draggable>\r\n                        ))\r\n                      ) : (\r\n                        <div className=\"empty-section\">\r\n                          Drag ingredients here\r\n                        </div>\r\n                      )}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </DragDropContext>\r\n      )}\r\n\r\n      <div className=\"organizer-tip\">\r\n        <p>Tip: Drag and drop ingredients between sections to organize your grocery list.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoreOrganizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}