{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\storeorganizer\\\\storeOrganizerSimple.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport StoreSelector from \"./storeSelector\";\nimport SectionManager from \"./sectionManager\";\nimport IngredientMover from \"./ingredientMover\";\nimport SaveButton from \"./saveButton\";\nimport SectionGrid from \"./sectionGrid\";\nimport DebugButton from \"./debugButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StoreOrganizerSimple = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  // Get weekly_plan_id from URL query params\n  const queryParams = new URLSearchParams(location.search);\n  const weeklyPlanId = queryParams.get('weekly_plan_id');\n  const [sections, setSections] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [ingredientSections, setIngredientSections] = useState({});\n  const [selectedIngredients, setSelectedIngredients] = useState({});\n  const [targetSection, setTargetSection] = useState(\"\");\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const [filterOptions, setFilterOptions] = useState({\n    showMealPlanOnly: Boolean(weeklyPlanId),\n    showUnmappedOnly: true\n  });\n  const fetchIngredients = async (storeId, options = {}) => {\n    try {\n      const {\n        showMealPlanOnly,\n        showUnmappedOnly\n      } = options;\n      let url = \"http://127.0.0.1:5000/api/ingredients\";\n\n      // Build query parameters\n      const params = new URLSearchParams();\n      if (showMealPlanOnly && weeklyPlanId) {\n        params.append('weekly_plan_id', weeklyPlanId);\n      }\n      if (showUnmappedOnly && storeId) {\n        params.append('unmapped_only', 'true');\n        params.append('store_id', storeId);\n      }\n\n      // Add params to URL if any exist\n      if (params.toString()) {\n        url += '?' + params.toString();\n      }\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch ingredients: ${response.statusText}`);\n      }\n      const ingredientsData = await response.json();\n      setIngredients(ingredientsData);\n      return ingredientsData;\n    } catch (error) {\n      console.error(\"Error fetching ingredients:\", error);\n      return [];\n    }\n  };\n  const fetchStoreData = async storeId => {\n    try {\n      setLoading(true);\n\n      // Fetch sections\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n      if (!sectionsResponse.ok) {\n        throw new Error(`Failed to fetch sections: ${sectionsResponse.statusText}`);\n      }\n      const sectionsData = await sectionsResponse.json();\n\n      // Filter out duplicate sections\n      const uniqueSections = sectionsData.filter((section, index, self) => index === self.findIndex(s => s.name.toLowerCase() === section.name.toLowerCase()));\n      setSections(uniqueSections);\n\n      // Fetch ingredients with current filter options\n      await fetchIngredients(storeId, filterOptions);\n\n      // Fetch ingredient-section mappings\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n      if (!mappingsResponse.ok) {\n        throw new Error(`Failed to fetch ingredient mappings: ${mappingsResponse.statusText}`);\n      }\n      const mappingsData = await mappingsResponse.json();\n      const sectionMap = {};\n      mappingsData.forEach(mapping => {\n        sectionMap[mapping.ingredient_id] = mapping.section_id;\n      });\n      setIngredientSections(sectionMap);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching store data:\", error);\n      setLoading(false);\n    }\n  };\n  const createNewStore = async storeName => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: storeName,\n          sections: [{\n            name: \"Produce\",\n            order: 0\n          }, {\n            name: \"Dairy\",\n            order: 1\n          }, {\n            name: \"Meat\",\n            order: 2\n          }, {\n            name: \"Bakery\",\n            order: 3\n          }, {\n            name: \"Frozen\",\n            order: 4\n          }, {\n            name: \"Canned Goods\",\n            order: 5\n          }, {\n            name: \"Uncategorized\",\n            order: 6\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.store_id) {\n        // Refresh the store list\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(data.store_id);\n          await fetchStoreData(data.store_id);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error creating store:\", error);\n      alert(\"Failed to create store. Please try again.\");\n    }\n  };\n\n  // Load initial data\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await response.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n          await fetchStoreData(storesData[0].id);\n        } else {\n          // Create default store if none exist\n          await createNewStore(\"My Store\");\n        }\n      } catch (error) {\n        console.error(\"Error loading initial data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  const handleStoreChange = async storeId => {\n    setSelectedStore(storeId);\n    await fetchStoreData(storeId);\n  };\n  const handleFilterChange = async newOptions => {\n    const updatedOptions = {\n      ...filterOptions,\n      ...newOptions\n    };\n    setFilterOptions(updatedOptions);\n    if (selectedStore) {\n      setLoading(true);\n      await fetchIngredients(selectedStore, updatedOptions);\n      setLoading(false);\n    }\n  };\n  const addNewSection = name => {\n    if (!name.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n\n    // Standardize section name formatting\n    const sectionName = name.trim().replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n    .split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n\n    // Check for duplicates (case-insensitive)\n    const isDuplicate = sections.some(section => section.name.toLowerCase() === sectionName.toLowerCase());\n    if (isDuplicate) {\n      alert(`A section named \"${sectionName}\" already exists`);\n      return;\n    }\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      name: sectionName,\n      order: sections.length\n    };\n    setSections([...sections, newSection]);\n    setNewSectionName(\"\"); // Reset the input field\n  };\n  const removeSection = sectionId => {\n    setSections(sections.filter(s => String(s.id) !== String(sectionId)));\n\n    // When removing a section, update ingredientSections to remove mappings\n    const updatedSectionMap = {\n      ...ingredientSections\n    };\n    Object.keys(updatedSectionMap).forEach(ingredientId => {\n      if (String(updatedSectionMap[ingredientId]) === String(sectionId)) {\n        delete updatedSectionMap[ingredientId];\n      }\n    });\n    setIngredientSections(updatedSectionMap);\n  };\n  const toggleIngredientSelection = ingredientId => {\n    setSelectedIngredients(prev => ({\n      ...prev,\n      [ingredientId]: !prev[ingredientId]\n    }));\n  };\n  const selectAllInSection = sectionId => {\n    const newSelected = {\n      ...selectedIngredients\n    };\n    ingredients.forEach(ingredient => {\n      if (ingredientSections[ingredient.id] === sectionId) {\n        newSelected[ingredient.id] = true;\n      }\n    });\n    setSelectedIngredients(newSelected);\n  };\n  const clearSelections = () => {\n    setSelectedIngredients({});\n  };\n  const moveSelectedIngredients = () => {\n    if (!targetSection) {\n      alert(\"Please select a target section\");\n      return;\n    }\n    const selectedIds = Object.keys(selectedIngredients).filter(id => selectedIngredients[id]);\n    if (selectedIds.length === 0) {\n      alert(\"Please select at least one ingredient to move\");\n      return;\n    }\n    const updatedSectionMap = {\n      ...ingredientSections\n    };\n    selectedIds.forEach(ingredientId => {\n      // Update the mapping to the new section\n      updatedSectionMap[ingredientId] = targetSection;\n    });\n    setIngredientSections(updatedSectionMap);\n    setSelectedIngredients({});\n    setTargetSection(\"\");\n\n    // If showing unmapped only, refresh the ingredient list\n    if (filterOptions.showUnmappedOnly) {\n      fetchIngredients(selectedStore, filterOptions);\n    }\n  };\n  const saveOrganization = async () => {\n    try {\n      const sectionData = [];\n      for (const section of sections) {\n        const sectionIngredients = ingredients.filter(ing => String(ingredientSections[ing.id]) === String(section.id));\n        sectionData.push({\n          id: section.id.toString().startsWith('temp-') ? null : section.id,\n          name: section.name,\n          ingredients: sectionIngredients.map(ing => ({\n            id: ing.id,\n            name: ing.name\n          }))\n        });\n      }\n\n      // Add uncategorized ingredients\n      const uncategorizedIngredients = ingredients.filter(ing => !ingredientSections[ing.id]);\n      if (uncategorizedIngredients.length > 0) {\n        sectionData.push({\n          name: \"Uncategorized\",\n          ingredients: uncategorizedIngredients.map(ing => ({\n            id: ing.id,\n            name: ing.name\n          }))\n        });\n      }\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Failed to save organization: ${errorData.error || response.statusText}`);\n      }\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n\n      // Refresh data after saving\n      await fetchStoreData(selectedStore);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n  const getIngredientsForSection = sectionId => {\n    // Return ONLY ingredients mapped to this specific section\n    return ingredients.filter(ing => String(ingredientSections[ing.id]) === String(sectionId));\n  };\n  const getUncategorizedIngredients = () => {\n    // Return ONLY ingredients with no section mapping\n    return ingredients.filter(ing => !ingredientSections[ing.id]);\n  };\n  const debugIngredientMove = () => {\n    console.log(\"=== DEBUG INGREDIENT MOVE ===\");\n    console.log(\"Current ingredient sections mapping:\", ingredientSections);\n    console.log(\"Selected ingredients:\", selectedIngredients);\n    console.log(\"Target section:\", targetSection);\n    console.log(\"Filter options:\", filterOptions);\n    console.log(\"Total ingredients loaded:\", ingredients.length);\n    sections.forEach(section => {\n      const sectionIngredients = ingredients.filter(ing => ingredientSections[ing.id] === section.id);\n      console.log(`Section ${section.name} (${section.id}) should have:`, sectionIngredients.map(ing => ing.name));\n    });\n    const uncategorized = ingredients.filter(ing => !ingredientSections[ing.id]);\n    console.log(\"Uncategorized should have:\", uncategorized.map(ing => ing.name));\n  };\n\n  // Filter panel component\n  const FilterPanel = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filter-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Filter Options\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: filterOptions.showMealPlanOnly,\n          onChange: e => handleFilterChange({\n            showMealPlanOnly: e.target.checked\n          }),\n          disabled: !weeklyPlanId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Show only ingredients from current meal plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: filterOptions.showUnmappedOnly,\n          onChange: e => handleFilterChange({\n            showUnmappedOnly: e.target.checked\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Show only unmapped ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          width: '100%',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-btn\",\n          onClick: () => navigate('/grocery-list'),\n          children: \"\\u2190 Back to Grocery List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DebugButton, {\n          onClick: debugIngredientMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SaveButton, {\n          saveSuccess: saveSuccess,\n          onClick: saveOrganization\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(StoreSelector, {\n          stores: stores,\n          selectedStore: selectedStore,\n          onChange: handleStoreChange,\n          onCreateStore: createNewStore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SectionManager, {\n          newSectionName: newSectionName,\n          setNewSectionName: setNewSectionName,\n          addNewSection: addNewSection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FilterPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simple-organizer-layout\",\n      children: [/*#__PURE__*/_jsxDEV(IngredientMover, {\n        sections: sections,\n        targetSection: targetSection,\n        setTargetSection: setTargetSection,\n        moveSelectedIngredients: moveSelectedIngredients,\n        clearSelections: clearSelections,\n        selectedIngredients: selectedIngredients,\n        filteredCount: ingredients.length,\n        totalCount: filterOptions.showMealPlanOnly || filterOptions.showUnmappedOnly ? \"filtered\" : ingredients.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SectionGrid, {\n        sections: sections,\n        getIngredientsForSection: getIngredientsForSection,\n        getUncategorizedIngredients: getUncategorizedIngredients,\n        selectedIngredients: selectedIngredients,\n        toggleIngredientSelection: toggleIngredientSelection,\n        selectAllInSection: selectAllInSection,\n        removeSection: removeSection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Check the ingredients you want to move, select a target section, and click \\\"Move Selected\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 17\n      }, this), weeklyPlanId && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"meal-plan-notice\",\n        children: [\"Currently showing ingredients from selected meal plan.\", filterOptions.showUnmappedOnly ? \" Only unmapped ingredients are displayed.\" : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 9\n  }, this);\n};\n_s(StoreOrganizerSimple, \"VR8AU3Q5+YSKVEHbYs/xpaAjmrs=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = StoreOrganizerSimple;\nexport default StoreOrganizerSimple;\nvar _c;\n$RefreshReg$(_c, \"StoreOrganizerSimple\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","StoreSelector","SectionManager","IngredientMover","SaveButton","SectionGrid","DebugButton","jsxDEV","_jsxDEV","StoreOrganizerSimple","_s","navigate","location","queryParams","URLSearchParams","search","weeklyPlanId","get","sections","setSections","ingredients","setIngredients","stores","setStores","selectedStore","setSelectedStore","loading","setLoading","saveSuccess","setSaveSuccess","ingredientSections","setIngredientSections","selectedIngredients","setSelectedIngredients","targetSection","setTargetSection","newSectionName","setNewSectionName","filterOptions","setFilterOptions","showMealPlanOnly","Boolean","showUnmappedOnly","fetchIngredients","storeId","options","url","params","append","toString","response","fetch","ok","Error","statusText","ingredientsData","json","error","console","fetchStoreData","sectionsResponse","sectionsData","uniqueSections","filter","section","index","self","findIndex","s","name","toLowerCase","mappingsResponse","mappingsData","sectionMap","forEach","mapping","ingredient_id","section_id","createNewStore","storeName","method","headers","body","JSON","stringify","order","data","store_id","storesResponse","storesData","length","alert","fetchInitialData","id","handleStoreChange","handleFilterChange","newOptions","updatedOptions","addNewSection","trim","sectionName","replace","split","map","word","charAt","toUpperCase","slice","join","isDuplicate","some","newSection","Date","now","removeSection","sectionId","String","updatedSectionMap","Object","keys","ingredientId","toggleIngredientSelection","prev","selectAllInSection","newSelected","ingredient","clearSelections","moveSelectedIngredients","selectedIds","saveOrganization","sectionData","sectionIngredients","ing","push","startsWith","uncategorizedIngredients","errorData","setTimeout","message","getIngredientsForSection","getUncategorizedIngredients","debugIngredientMove","log","uncategorized","FilterPanel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","e","target","disabled","style","display","justifyContent","width","marginBottom","onClick","gap","onCreateStore","filteredCount","totalCount","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/storeorganizer/storeOrganizerSimple.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport StoreSelector from \"./storeSelector\";\r\nimport SectionManager from \"./sectionManager\";\r\nimport IngredientMover from \"./ingredientMover\";\r\nimport SaveButton from \"./saveButton\";\r\nimport SectionGrid from \"./sectionGrid\";\r\nimport DebugButton from \"./debugButton\";\r\n\r\nconst StoreOrganizerSimple = () => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    // Get weekly_plan_id from URL query params\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const weeklyPlanId = queryParams.get('weekly_plan_id');\r\n    \r\n    const [sections, setSections] = useState([]);\r\n    const [ingredients, setIngredients] = useState([]);\r\n    const [stores, setStores] = useState([]);\r\n    const [selectedStore, setSelectedStore] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [saveSuccess, setSaveSuccess] = useState(false);\r\n    const [ingredientSections, setIngredientSections] = useState({});\r\n    const [selectedIngredients, setSelectedIngredients] = useState({});\r\n    const [targetSection, setTargetSection] = useState(\"\");\r\n    const [newSectionName, setNewSectionName] = useState(\"\");\r\n    const [filterOptions, setFilterOptions] = useState({\r\n        showMealPlanOnly: Boolean(weeklyPlanId),\r\n        showUnmappedOnly: true,\r\n    });\r\n\r\n    const fetchIngredients = async (storeId, options = {}) => {\r\n        try {\r\n            const { showMealPlanOnly, showUnmappedOnly } = options;\r\n            let url = \"http://127.0.0.1:5000/api/ingredients\";\r\n            \r\n            // Build query parameters\r\n            const params = new URLSearchParams();\r\n            \r\n            if (showMealPlanOnly && weeklyPlanId) {\r\n                params.append('weekly_plan_id', weeklyPlanId);\r\n            }\r\n            \r\n            if (showUnmappedOnly && storeId) {\r\n                params.append('unmapped_only', 'true');\r\n                params.append('store_id', storeId);\r\n            }\r\n            \r\n            // Add params to URL if any exist\r\n            if (params.toString()) {\r\n                url += '?' + params.toString();\r\n            }\r\n            \r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch ingredients: ${response.statusText}`);\r\n            }\r\n            \r\n            const ingredientsData = await response.json();\r\n            setIngredients(ingredientsData);\r\n            return ingredientsData;\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error fetching ingredients:\", error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const fetchStoreData = async (storeId) => {\r\n        try {\r\n            setLoading(true);\r\n            \r\n            // Fetch sections\r\n            const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n            if (!sectionsResponse.ok) {\r\n                throw new Error(`Failed to fetch sections: ${sectionsResponse.statusText}`);\r\n            }\r\n            const sectionsData = await sectionsResponse.json();\r\n\r\n            // Filter out duplicate sections\r\n            const uniqueSections = sectionsData.filter((section, index, self) =>\r\n                index === self.findIndex(s => s.name.toLowerCase() === section.name.toLowerCase())\r\n            );\r\n\r\n            setSections(uniqueSections);\r\n\r\n            // Fetch ingredients with current filter options\r\n            await fetchIngredients(storeId, filterOptions);\r\n\r\n            // Fetch ingredient-section mappings\r\n            const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n            if (!mappingsResponse.ok) {\r\n                throw new Error(`Failed to fetch ingredient mappings: ${mappingsResponse.statusText}`);\r\n            }\r\n            const mappingsData = await mappingsResponse.json();\r\n\r\n            const sectionMap = {};\r\n            mappingsData.forEach(mapping => {\r\n                sectionMap[mapping.ingredient_id] = mapping.section_id;\r\n            });\r\n\r\n            setIngredientSections(sectionMap);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error(\"Error fetching store data:\", error);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const createNewStore = async (storeName) => {\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({\r\n                    name: storeName,\r\n                    sections: [\r\n                        { name: \"Produce\", order: 0 },\r\n                        { name: \"Dairy\", order: 1 },\r\n                        { name: \"Meat\", order: 2 },\r\n                        { name: \"Bakery\", order: 3 },\r\n                        { name: \"Frozen\", order: 4 },\r\n                        { name: \"Canned Goods\", order: 5 },\r\n                        { name: \"Uncategorized\", order: 6 }\r\n                    ]\r\n                })\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.store_id) {\r\n                // Refresh the store list\r\n                const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n                const storesData = await storesResponse.json();\r\n                setStores(storesData);\r\n                \r\n                if (storesData.length > 0) {\r\n                    setSelectedStore(data.store_id);\r\n                    await fetchStoreData(data.store_id);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error creating store:\", error);\r\n            alert(\"Failed to create store. Please try again.\");\r\n        }\r\n    };\r\n\r\n    // Load initial data\r\n    useEffect(() => {\r\n        const fetchInitialData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const response = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n                const storesData = await response.json();\r\n                setStores(storesData);\r\n\r\n                if (storesData.length > 0) {\r\n                    setSelectedStore(storesData[0].id);\r\n                    await fetchStoreData(storesData[0].id);\r\n                } else {\r\n                    // Create default store if none exist\r\n                    await createNewStore(\"My Store\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error loading initial data:\", error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchInitialData();\r\n    }, []);\r\n\r\n    const handleStoreChange = async (storeId) => {\r\n        setSelectedStore(storeId);\r\n        await fetchStoreData(storeId);\r\n    };\r\n\r\n    const handleFilterChange = async (newOptions) => {\r\n        const updatedOptions = { ...filterOptions, ...newOptions };\r\n        setFilterOptions(updatedOptions);\r\n        \r\n        if (selectedStore) {\r\n            setLoading(true);\r\n            await fetchIngredients(selectedStore, updatedOptions);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const addNewSection = (name) => {\r\n        if (!name.trim()) {\r\n            alert(\"Please enter a section name\");\r\n            return;\r\n        }\r\n\r\n        // Standardize section name formatting\r\n        const sectionName = name.trim()\r\n            .replace(/\\s+/g, ' ')  // Replace multiple spaces with single space\r\n            .split(' ')\r\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n            .join(' ');\r\n\r\n        // Check for duplicates (case-insensitive)\r\n        const isDuplicate = sections.some(\r\n            section => section.name.toLowerCase() === sectionName.toLowerCase()\r\n        );\r\n\r\n        if (isDuplicate) {\r\n            alert(`A section named \"${sectionName}\" already exists`);\r\n            return;\r\n        }\r\n\r\n        const newSection = {\r\n            id: `temp-${Date.now()}`,\r\n            name: sectionName,\r\n            order: sections.length\r\n        };\r\n\r\n        setSections([...sections, newSection]);\r\n        setNewSectionName(\"\"); // Reset the input field\r\n    };\r\n\r\n    const removeSection = (sectionId) => {\r\n        setSections(sections.filter(s => String(s.id) !== String(sectionId)));\r\n\r\n        // When removing a section, update ingredientSections to remove mappings\r\n        const updatedSectionMap = { ...ingredientSections };\r\n        Object.keys(updatedSectionMap).forEach(ingredientId => {\r\n            if (String(updatedSectionMap[ingredientId]) === String(sectionId)) {\r\n                delete updatedSectionMap[ingredientId];\r\n            }\r\n        });\r\n\r\n        setIngredientSections(updatedSectionMap);\r\n    };\r\n\r\n    const toggleIngredientSelection = (ingredientId) => {\r\n        setSelectedIngredients(prev => ({\r\n            ...prev,\r\n            [ingredientId]: !prev[ingredientId]\r\n        }));\r\n    };\r\n\r\n    const selectAllInSection = (sectionId) => {\r\n        const newSelected = { ...selectedIngredients };\r\n\r\n        ingredients.forEach(ingredient => {\r\n            if (ingredientSections[ingredient.id] === sectionId) {\r\n                newSelected[ingredient.id] = true;\r\n            }\r\n        });\r\n\r\n        setSelectedIngredients(newSelected);\r\n    };\r\n\r\n    const clearSelections = () => {\r\n        setSelectedIngredients({});\r\n    };\r\n\r\n    const moveSelectedIngredients = () => {\r\n        if (!targetSection) {\r\n            alert(\"Please select a target section\");\r\n            return;\r\n        }\r\n\r\n        const selectedIds = Object.keys(selectedIngredients).filter(id => selectedIngredients[id]);\r\n\r\n        if (selectedIds.length === 0) {\r\n            alert(\"Please select at least one ingredient to move\");\r\n            return;\r\n        }\r\n\r\n        const updatedSectionMap = { ...ingredientSections };\r\n\r\n        selectedIds.forEach(ingredientId => {\r\n            // Update the mapping to the new section\r\n            updatedSectionMap[ingredientId] = targetSection;\r\n        });\r\n\r\n        setIngredientSections(updatedSectionMap);\r\n        setSelectedIngredients({});\r\n        setTargetSection(\"\");\r\n        \r\n        // If showing unmapped only, refresh the ingredient list\r\n        if (filterOptions.showUnmappedOnly) {\r\n            fetchIngredients(selectedStore, filterOptions);\r\n        }\r\n    };\r\n\r\n    const saveOrganization = async () => {\r\n        try {\r\n            const sectionData = [];\r\n\r\n            for (const section of sections) {\r\n                const sectionIngredients = ingredients.filter(ing =>\r\n                    String(ingredientSections[ing.id]) === String(section.id)\r\n                );\r\n\r\n                sectionData.push({\r\n                    id: section.id.toString().startsWith('temp-') ? null : section.id,\r\n                    name: section.name,\r\n                    ingredients: sectionIngredients.map(ing => ({\r\n                        id: ing.id,\r\n                        name: ing.name\r\n                    }))\r\n                });\r\n            }\r\n\r\n            // Add uncategorized ingredients\r\n            const uncategorizedIngredients = ingredients.filter(ing => !ingredientSections[ing.id]);\r\n\r\n            if (uncategorizedIngredients.length > 0) {\r\n                sectionData.push({\r\n                    name: \"Uncategorized\",\r\n                    ingredients: uncategorizedIngredients.map(ing => ({\r\n                        id: ing.id,\r\n                        name: ing.name\r\n                    }))\r\n                });\r\n            }\r\n\r\n            const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    store_id: selectedStore,\r\n                    sections: sectionData\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(`Failed to save organization: ${errorData.error || response.statusText}`);\r\n            }\r\n\r\n            setSaveSuccess(true);\r\n            setTimeout(() => setSaveSuccess(false), 3000);\r\n\r\n            // Refresh data after saving\r\n            await fetchStoreData(selectedStore);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error saving organization:\", error);\r\n            alert(\"Error saving organization: \" + error.message);\r\n        }\r\n    };\r\n\r\n    const getIngredientsForSection = (sectionId) => {\r\n        // Return ONLY ingredients mapped to this specific section\r\n        return ingredients.filter(ing =>\r\n            String(ingredientSections[ing.id]) === String(sectionId)\r\n        );\r\n    };\r\n\r\n    const getUncategorizedIngredients = () => {\r\n        // Return ONLY ingredients with no section mapping\r\n        return ingredients.filter(ing => !ingredientSections[ing.id]);\r\n    };\r\n\r\n    const debugIngredientMove = () => {\r\n        console.log(\"=== DEBUG INGREDIENT MOVE ===\");\r\n        console.log(\"Current ingredient sections mapping:\", ingredientSections);\r\n        console.log(\"Selected ingredients:\", selectedIngredients);\r\n        console.log(\"Target section:\", targetSection);\r\n        console.log(\"Filter options:\", filterOptions);\r\n        console.log(\"Total ingredients loaded:\", ingredients.length);\r\n\r\n        sections.forEach(section => {\r\n            const sectionIngredients = ingredients.filter(ing =>\r\n                ingredientSections[ing.id] === section.id\r\n            );\r\n            console.log(`Section ${section.name} (${section.id}) should have:`,\r\n                sectionIngredients.map(ing => ing.name)\r\n            );\r\n        });\r\n\r\n        const uncategorized = ingredients.filter(ing => !ingredientSections[ing.id]);\r\n        console.log(\"Uncategorized should have:\", uncategorized.map(ing => ing.name));\r\n    };\r\n\r\n    // Filter panel component\r\n    const FilterPanel = () => (\r\n        <div className=\"filter-panel\">\r\n            <h3>Filter Options</h3>\r\n            <div className=\"filter-options\">\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={filterOptions.showMealPlanOnly}\r\n                        onChange={(e) => handleFilterChange({ showMealPlanOnly: e.target.checked })}\r\n                        disabled={!weeklyPlanId}\r\n                    />\r\n                    <span>Show only ingredients from current meal plan</span>\r\n                </label>\r\n                \r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={filterOptions.showUnmappedOnly}\r\n                        onChange={(e) => handleFilterChange({ showUnmappedOnly: e.target.checked })}\r\n                    />\r\n                    <span>Show only unmapped ingredients</span>\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"store-organizer-container\">\r\n            <div className=\"store-organizer-header\">\r\n                <h1>Store Section Organizer</h1>\r\n                {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n            </div>\r\n\r\n            <div className=\"store-organizer-controls\">\r\n                <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%', marginBottom: '15px' }}>\r\n                    <button\r\n                        className=\"back-btn\"\r\n                        onClick={() => navigate('/grocery-list')}\r\n                    >\r\n                        ← Back to Grocery List\r\n                    </button>\r\n\r\n                    <DebugButton onClick={debugIngredientMove} />\r\n                    \r\n                    <SaveButton\r\n                        saveSuccess={saveSuccess}\r\n                        onClick={saveOrganization}\r\n                    />\r\n                </div>\r\n\r\n                <div style={{ display: 'flex', gap: '20px', width: '100%' }}>\r\n                    <StoreSelector\r\n                        stores={stores}\r\n                        selectedStore={selectedStore}\r\n                        onChange={handleStoreChange}\r\n                        onCreateStore={createNewStore}\r\n                    />\r\n\r\n                    <SectionManager\r\n                        newSectionName={newSectionName}\r\n                        setNewSectionName={setNewSectionName}\r\n                        addNewSection={addNewSection}\r\n                    />\r\n                </div>\r\n\r\n                <FilterPanel />\r\n            </div>\r\n\r\n            {loading ? (\r\n                <div className=\"loading\">Loading sections and ingredients...</div>\r\n            ) : (\r\n                <div className=\"simple-organizer-layout\">\r\n                    <IngredientMover\r\n                        sections={sections}\r\n                        targetSection={targetSection}\r\n                        setTargetSection={setTargetSection}\r\n                        moveSelectedIngredients={moveSelectedIngredients}\r\n                        clearSelections={clearSelections}\r\n                        selectedIngredients={selectedIngredients}\r\n                        filteredCount={ingredients.length}\r\n                        totalCount={filterOptions.showMealPlanOnly || filterOptions.showUnmappedOnly ? \"filtered\" : ingredients.length}\r\n                    />\r\n\r\n                    <SectionGrid\r\n                        sections={sections}\r\n                        getIngredientsForSection={getIngredientsForSection}\r\n                        getUncategorizedIngredients={getUncategorizedIngredients}\r\n                        selectedIngredients={selectedIngredients}\r\n                        toggleIngredientSelection={toggleIngredientSelection}\r\n                        selectAllInSection={selectAllInSection}\r\n                        removeSection={removeSection}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"organizer-tip\">\r\n                <p>Tip: Check the ingredients you want to move, select a target section, and click \"Move Selected\".</p>\r\n                {weeklyPlanId && (\r\n                    <p className=\"meal-plan-notice\">Currently showing ingredients from selected meal plan. \r\n                        {filterOptions.showUnmappedOnly ? \" Only unmapped ingredients are displayed.\" : \"\"}\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StoreOrganizerSimple;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}