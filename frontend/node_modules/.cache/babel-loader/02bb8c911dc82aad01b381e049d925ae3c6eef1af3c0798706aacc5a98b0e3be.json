{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\StoreOrganizer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// StoreOrganizer.js\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragOverlay } from \"@dnd-kit/core\";\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortableIngredient = ({\n  ingredient,\n  index\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: `ingredient-${ingredient.id}`,\n    data: {\n      type: 'ingredient',\n      ingredient\n    }\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.4 : 1,\n    cursor: 'grab',\n    userSelect: 'none'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    className: `ingredient-item ${isDragging ? 'dragging' : ''}`,\n    ...attributes,\n    ...listeners,\n    \"data-id\": ingredient.id,\n    children: ingredient.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(SortableIngredient, \"iGm8Pp/8VGCO0ItME/dsmuAda4I=\", false, function () {\n  return [useSortable];\n});\n_c = SortableIngredient;\nconst StoreOrganizer = () => {\n  _s2();\n  var _sections$find, _sections$find2;\n  const navigate = useNavigate();\n  const [sections, setSections] = useState([]);\n  const [, setIngredients] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [activeId, setActiveId] = useState(null);\n  const [activeDragData, setActiveDragData] = useState(null);\n  const [activeDroppableId, setActiveDroppableId] = useState(null);\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  const fetchSectionsRef = React.useRef(null);\n  const createDefaultStoreRef = React.useRef(null);\n  const fetchDataRef = React.useRef(null);\n\n  // Create wrapper functions\n  const fetchSections = useCallback(async storeId => {\n    var _fetchSectionsRef$cur;\n    return (_fetchSectionsRef$cur = fetchSectionsRef.current) === null || _fetchSectionsRef$cur === void 0 ? void 0 : _fetchSectionsRef$cur.call(fetchSectionsRef, storeId);\n  }, []);\n  const createDefaultStore = useCallback(async () => {\n    var _createDefaultStoreRe;\n    return (_createDefaultStoreRe = createDefaultStoreRef.current) === null || _createDefaultStoreRe === void 0 ? void 0 : _createDefaultStoreRe.call(createDefaultStoreRef);\n  }, []);\n  const fetchData = useCallback(async () => {\n    var _fetchDataRef$current;\n    return (_fetchDataRef$current = fetchDataRef.current) === null || _fetchDataRef$current === void 0 ? void 0 : _fetchDataRef$current.call(fetchDataRef);\n  }, []);\n\n  // Set up implementations with useEffect\n  useEffect(() => {\n    // Implement fetchSections\n    console.log(\"Sections state after update:\", sections);\n    fetchSectionsRef.current = async storeId => {\n      try {\n        const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n        const sectionsData = await sectionsResponse.json();\n\n        // Initialize sections with empty ingredient arrays\n        const sectionsWithIngredients = sectionsData.map(section => ({\n          ...section,\n          ingredients: []\n        }));\n        setSections(sectionsWithIngredients);\n\n        // Fetch ingredients\n        const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\n        const ingredientsData = await ingredientsResponse.json();\n        if (ingredientsData.length === 0) {\n          setSections(sectionsWithIngredients);\n          setIngredients([]);\n          setLoading(false);\n          return; // Early return if no ingredients to process\n        }\n\n        // Fetch ingredient section mappings\n        const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n        const mappingsData = await mappingsResponse.json();\n\n        // Organize ingredients into sections\n        const sectionMap = {};\n        sectionsWithIngredients.forEach(section => {\n          sectionMap[section.id] = section;\n        });\n\n        // Add a default \"Uncategorized\" section\n        let uncategorizedSection = {\n          id: \"uncategorized\",\n          name: \"Uncategorized\",\n          ingredients: []\n        };\n\n        // Assign ingredients to their sections based on mappings\n        ingredientsData.forEach(ingredient => {\n          const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\n          if (mapping && sectionMap[mapping.section_id]) {\n            sectionMap[mapping.section_id].ingredients.push(ingredient);\n          } else {\n            uncategorizedSection.ingredients.push(ingredient);\n          }\n        });\n\n        // Update sections array with assigned ingredients\n        const updatedSections = [...Object.values(sectionMap)];\n\n        // Add uncategorized section if it has ingredients\n        if (uncategorizedSection.ingredients.length > 0) {\n          updatedSections.push(uncategorizedSection);\n        }\n        setSections(updatedSections);\n        setIngredients(ingredientsData);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching sections and ingredients:\", error);\n        setLoading(false);\n      }\n    };\n\n    // Implement createDefaultStore\n    createDefaultStoreRef.current = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: \"My Store\",\n            sections: [{\n              name: \"Produce\",\n              order: 0\n            }, {\n              name: \"Dairy\",\n              order: 1\n            }, {\n              name: \"Meat\",\n              order: 2\n            }, {\n              name: \"Bakery\",\n              order: 3\n            }, {\n              name: \"Frozen\",\n              order: 4\n            }, {\n              name: \"Canned Goods\",\n              order: 5\n            }, {\n              name: \"Uncategorized\",\n              order: 6\n            }]\n          })\n        });\n        const data = await response.json();\n        if (data.store_id) {\n          // Fetch stores again to get the new store\n          const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n          const storesData = await storesResponse.json();\n          setStores(storesData);\n\n          // Set the first store as selected\n          if (storesData.length > 0) {\n            setSelectedStore(storesData[0].id);\n            await fetchSections(storesData[0].id);\n          }\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error creating default store:\", error);\n        setLoading(false);\n      }\n    };\n\n    // Implement fetchData\n    fetchDataRef.current = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch stores\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n\n          // Fetch sections for the selected store\n          await fetchSections(storesData[0].id);\n        } else {\n          // Create a default store if none exists\n          await createDefaultStore();\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n  }, []);\n\n  // Call fetchData on component mount\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  const handleStoreChange = e => {\n    const storeId = e.target.value;\n    setSelectedStore(storeId);\n    fetchSections(storeId);\n  };\n  const addNewSection = () => {\n    if (!newSectionName.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n\n    // Create new section locally first\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      // Temporary ID until saved\n      name: newSectionName,\n      order: sections.length,\n      ingredients: []\n    };\n    setSections([...sections, newSection]);\n    setNewSectionName(\"\");\n  };\n  const removeSection = sectionId => {\n    // Get the section\n    const section = sections.find(s => s.id.toString() === sectionId.toString());\n    if (!section) return;\n\n    // Make a copy of sections\n    const newSections = [...sections];\n\n    // If section has ingredients, move them to uncategorized\n    let uncategorizedIndex = newSections.findIndex(s => s.id === \"uncategorized\");\n    let uncategorized;\n    if (uncategorizedIndex === -1) {\n      // Create uncategorized section if it doesn't exist\n      uncategorized = {\n        id: \"uncategorized\",\n        name: \"Uncategorized\",\n        ingredients: []\n      };\n\n      // Filter out the section to remove and add uncategorized\n      setSections([...newSections.filter(s => s.id.toString() !== sectionId.toString()), uncategorized]);\n    } else {\n      // Get a reference to the uncategorized section\n      uncategorized = {\n        ...newSections[uncategorizedIndex]\n      };\n\n      // Create a new array for its ingredients\n      uncategorized.ingredients = [...uncategorized.ingredients];\n\n      // If the section to remove has ingredients, add them to uncategorized\n      if (section.ingredients.length > 0) {\n        uncategorized.ingredients = [...uncategorized.ingredients, ...section.ingredients];\n      }\n\n      // Update the uncategorized section in the newSections array\n      newSections[uncategorizedIndex] = uncategorized;\n\n      // Remove the section to delete\n      setSections(newSections.filter(s => s.id.toString() !== sectionId.toString()));\n    }\n  };\n  const saveOrganization = async () => {\n    try {\n      // Prepare the data\n      const sectionData = sections.filter(section => section.id !== \"uncategorized\").map(section => ({\n        id: section.id.toString().startsWith('temp-') ? null : section.id,\n        name: section.name,\n        ingredients: section.ingredients.map((ingredient, index) => ({\n          id: ingredient.id,\n          name: ingredient.name,\n          order: index\n        }))\n      }));\n\n      // Add uncategorized section if it exists\n      const uncategorizedSection = sections.find(s => s.id === \"uncategorized\");\n      if (uncategorizedSection && uncategorizedSection.ingredients.length > 0) {\n        sectionData.push({\n          id: null,\n          name: \"Uncategorized\",\n          ingredients: uncategorizedSection.ingredients.map((ingredient, index) => ({\n            id: ingredient.id,\n            name: ingredient.name,\n            order: index\n          }))\n        });\n      }\n\n      // Send to the backend\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save organization\");\n      }\n\n      // Show success message\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n  const handleDragStart = event => {\n    var _active$data$current;\n    const {\n      active\n    } = event;\n    setActiveId(active.id);\n    setActiveDragData(((_active$data$current = active.data.current) === null || _active$data$current === void 0 ? void 0 : _active$data$current.ingredient) || null);\n  };\n  const handleDragOver = event => {\n    var _over$data, _over$data$current;\n    // eslint-disable-next-line no-unused-vars\n    const {\n      active,\n      over\n    } = event;\n    if (!over) {\n      setActiveDroppableId(null);\n      return;\n    }\n\n    // If we're over a section or a droppable element\n    if (over.id.startsWith('section-') || (_over$data = over.data) !== null && _over$data !== void 0 && (_over$data$current = _over$data.current) !== null && _over$data$current !== void 0 && _over$data$current.droppable) {\n      const sectionId = over.id.startsWith('section-') ? over.id : findContainer(over.id);\n      if (sectionId) {\n        console.log(\"Hovering over section:\", sectionId);\n        setActiveDroppableId(sectionId);\n      } else {\n        setActiveDroppableId(null);\n      }\n    } else {\n      setActiveDroppableId(null);\n    }\n  };\n  const handleDragEnd = event => {\n    var _active$data$current2;\n    console.log(\"handleDragEnd starting with sections:\", JSON.stringify(sections.map(s => ({\n      id: s.id,\n      name: s.name,\n      ingredientCount: s.ingredients.length\n    }))));\n    console.log(\"DRAG END EVENT:\", event);\n    const {\n      active,\n      over\n    } = event;\n    setActiveDroppableId(null);\n    setActiveId(null);\n    setActiveDragData(null);\n    if (!active || !over) {\n      console.log(\"No active or over element in drag end\");\n      return;\n    }\n    console.log(\"Active ID:\", active.id);\n    console.log(\"Over ID:\", over.id);\n\n    // Extract the ingredient ID and data\n    const ingredientId = active.id.replace('ingredient-', '');\n    const ingredientData = (_active$data$current2 = active.data.current) === null || _active$data$current2 === void 0 ? void 0 : _active$data$current2.ingredient;\n    if (!ingredientData) {\n      console.log(\"No ingredient data found\");\n      return;\n    }\n\n    // Find source section\n    let sourceSection = null;\n    let sourceSectionIndex = -1;\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const ingredientIndex = section.ingredients.findIndex(ing => ing.id.toString() === ingredientId);\n      if (ingredientIndex !== -1) {\n        sourceSection = section;\n        sourceSectionIndex = i;\n        break;\n      }\n    }\n    if (sourceSectionIndex === -1) {\n      console.log(\"Source section not found\");\n      return;\n    }\n\n    // Determine target section\n    let targetSectionId;\n    if (over.id.startsWith('section-')) {\n      targetSectionId = over.id.replace('section-', '');\n    } else if (over.id.startsWith('ingredient-')) {\n      // Find which section contains this ingredient\n      const overIngredientId = over.id.replace('ingredient-', '');\n      for (const section of sections) {\n        if (section.ingredients.some(ing => ing.id.toString() === overIngredientId)) {\n          targetSectionId = section.id.toString();\n          break;\n        }\n      }\n    } else {\n      console.log(\"Unknown over target:\", over.id);\n      return;\n    }\n    if (!targetSectionId) {\n      console.log(\"Target section not found\");\n      return;\n    }\n    const targetSectionIndex = sections.findIndex(s => s.id.toString() === targetSectionId);\n    if (targetSectionIndex === -1) {\n      console.log(\"Target section not found in sections array\");\n      return;\n    }\n\n    // Create deep copies of the sections to modify\n    const newSections = [...sections];\n\n    // Remove from source section (create a new array)\n    const newSourceIngredients = [...newSections[sourceSectionIndex].ingredients];\n    const sourceIngredientIndex = newSourceIngredients.findIndex(ing => ing.id.toString() === ingredientId);\n    if (sourceIngredientIndex === -1) {\n      console.log(\"Ingredient not found in source section\");\n      return;\n    }\n\n    // Around line 399 in handleDragEnd, replace the [removedIngredient] line with:\n    const removedIngredient = JSON.parse(JSON.stringify(newSourceIngredients[sourceIngredientIndex]));\n    newSourceIngredients.splice(sourceIngredientIndex, 1);\n\n    // Add to target section (create a new array)\n    const newTargetIngredients = [...newSections[targetSectionIndex].ingredients];\n\n    // If dropping on another ingredient, insert at that position\n    if (over.id.startsWith('ingredient-')) {\n      const overIngredientId = over.id.replace('ingredient-', '');\n      const overIngredientIndex = newTargetIngredients.findIndex(ing => ing.id.toString() === overIngredientId);\n      if (overIngredientIndex !== -1) {\n        newTargetIngredients.splice(overIngredientIndex, 0, removedIngredient);\n      } else {\n        newTargetIngredients.push(removedIngredient);\n      }\n    } else {\n      // Just add to the end of the target section\n      newTargetIngredients.push(removedIngredient);\n    }\n    newSections[targetSectionIndex] = {\n      ...newSections[targetSectionIndex],\n      ingredients: newTargetIngredients\n    };\n    console.log(\"Updated sections structure:\", newSections);\n    console.log(\"Setting sections to:\", JSON.stringify(newSections.map(s => ({\n      id: s.id,\n      name: s.name,\n      ingredientCount: s.ingredients.length\n    }))));\n    // Update state with the new sections array\n    setSections(newSections);\n  };\n  const findContainer = id => {\n    console.debug(\"Finding container for id:\", id);\n\n    // If the ID is a section ID\n    if (id && id.startsWith('section-')) {\n      return id;\n    }\n\n    // For ingredients, find which section they're in\n    if (id && id.startsWith('ingredient-')) {\n      const ingredientId = id.replace('ingredient-', '');\n      for (const section of sections) {\n        const foundIngredient = section.ingredients.find(ingredient => ingredient.id && ingredient.id.toString() === ingredientId);\n        if (foundIngredient) {\n          return `section-${section.id}`;\n        }\n      }\n    }\n    return null;\n  };\n\n  // Helper function to find an ingredient's index within a section\n  const findIndex = (containerId, itemId) => {\n    const sectionId = containerId.replace('section-', '');\n    const section = sections.find(s => s.id.toString() === sectionId);\n    if (!section) return -1;\n    if (itemId.startsWith('ingredient-')) {\n      const ingredientId = itemId.replace('ingredient-', '');\n      return section.ingredients.findIndex(i => i.id.toString() === ingredientId);\n    }\n    return -1;\n  };\n\n  // Helper function to get an ingredient by ID\n  const getIngredientById = id => {\n    if (id.startsWith('ingredient-')) {\n      const ingredientId = id.replace('ingredient-', '');\n      for (const section of sections) {\n        const ingredient = section.ingredients.find(i => i.id.toString() === ingredientId);\n        if (ingredient) return ingredient;\n      }\n    }\n    // Add this before your return statement (around line 560)\n    // Generate a unique key for SortableContext to force re-renders\n    const getSectionKey = (sectionId, count) => `section-${sectionId}-${count}`;\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 9\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: () => navigate('/grocery-list'),\n        children: \"\\u2190 Back to Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"store-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"store-select\",\n          children: \"Select Store:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"store-select\",\n          value: selectedStore || \"\",\n          onChange: handleStoreChange,\n          children: stores.map(store => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: store.id,\n            children: store.name\n          }, store.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-section-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newSectionName,\n          onChange: e => setNewSectionName(e.target.value),\n          placeholder: \"New Section Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewSection,\n          children: \"Add Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-organization-btn\",\n        onClick: saveOrganization,\n        children: \"Save Organization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragStart: handleDragStart,\n      onDragOver: handleDragOver,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"organizer-layout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredients-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"All Ingredients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n            id: \"all-ingredients\",\n            items: ((_sections$find = sections.find(s => s.id === \"uncategorized\")) === null || _sections$find === void 0 ? void 0 : _sections$find.ingredients.map(i => `ingredient-${i.id}`)) || [],\n            strategy: verticalListSortingStrategy,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ingredient-list all-ingredients\",\n              children: [(_sections$find2 = sections.find(s => s.id === \"uncategorized\")) === null || _sections$find2 === void 0 ? void 0 : _sections$find2.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(SortableIngredient, {\n                ingredient: ingredient,\n                index: index\n              }, ingredient.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 21\n              }, this)), !sections.find(s => s.id === \"uncategorized\") || sections.find(s => s.id === \"uncategorized\").ingredients.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"empty-ingredients\",\n                children: \"No uncategorized ingredients\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sections-container\",\n          children: sections.filter(section => section.id !== \"uncategorized\").map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `section-card ${activeDroppableId === `section-${section.id}` ? 'drop-target' : ''}`,\n            id: `section-${section.id}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: section.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 672,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"remove-section-btn\",\n                onClick: () => removeSection(section.id),\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n              id: `section-${section.id}`,\n              items: section.ingredients.map(i => `ingredient-${i.id}`),\n              strategy: verticalListSortingStrategy,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ingredient-list\",\n                \"data-section-id\": section.id,\n                children: section.ingredients.length > 0 ? section.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(SortableIngredient, {\n                  ingredient: ingredient,\n                  index: index\n                }, `${section.id}-ingredient-${ingredient.id}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 693,\n                  columnNumber: 27\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"empty-section\",\n                  children: \"Drag ingredients here\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 687,\n                columnNumber: 21\n              }, this)\n            }, getSectionKey(section.id, section.ingredients.length), false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 19\n            }, this)]\n          }, section.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId && activeDragData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredient-item dragging\",\n          children: activeDragData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 15\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Drag and drop ingredients between sections to organize your grocery list.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Debug Info:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(\"Current sections:\", sections),\n        children: \"Log Sections State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '12px',\n          marginTop: '10px'\n        },\n        children: [\"Active ID: \", activeId || 'none']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 585,\n    columnNumber: 5\n  }, this);\n};\n_s2(StoreOrganizer, \"IT2X81SLbNQFTGjRM+kwiKUvydQ=\", false, function () {\n  return [useNavigate, useSensors, useSensor, useSensor];\n});\n_c2 = StoreOrganizer;\nexport default StoreOrganizer;\nvar _c, _c2;\n$RefreshReg$(_c, \"SortableIngredient\");\n$RefreshReg$(_c2, \"StoreOrganizer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","DragOverlay","arrayMove","SortableContext","sortableKeyboardCoordinates","useSortable","verticalListSortingStrategy","CSS","jsxDEV","_jsxDEV","SortableIngredient","ingredient","index","_s","attributes","listeners","setNodeRef","transform","transition","isDragging","id","data","type","style","Transform","toString","opacity","cursor","userSelect","ref","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","StoreOrganizer","_s2","_sections$find","_sections$find2","navigate","sections","setSections","setIngredients","stores","setStores","selectedStore","setSelectedStore","newSectionName","setNewSectionName","loading","setLoading","saveSuccess","setSaveSuccess","activeId","setActiveId","activeDragData","setActiveDragData","activeDroppableId","setActiveDroppableId","sensors","coordinateGetter","fetchSectionsRef","useRef","createDefaultStoreRef","fetchDataRef","fetchSections","storeId","_fetchSectionsRef$cur","current","call","createDefaultStore","_createDefaultStoreRe","fetchData","_fetchDataRef$current","console","log","sectionsResponse","fetch","sectionsData","json","sectionsWithIngredients","map","section","ingredients","ingredientsResponse","ingredientsData","length","mappingsResponse","mappingsData","sectionMap","forEach","uncategorizedSection","mapping","find","m","ingredient_id","section_id","push","updatedSections","Object","values","error","response","method","headers","body","JSON","stringify","order","store_id","storesResponse","storesData","handleStoreChange","e","target","value","addNewSection","trim","alert","newSection","Date","now","removeSection","sectionId","s","newSections","uncategorizedIndex","findIndex","uncategorized","filter","saveOrganization","sectionData","startsWith","ok","Error","setTimeout","message","handleDragStart","event","_active$data$current","active","handleDragOver","_over$data","_over$data$current","over","droppable","findContainer","handleDragEnd","_active$data$current2","ingredientCount","ingredientId","replace","ingredientData","sourceSection","sourceSectionIndex","i","ingredientIndex","ing","targetSectionId","overIngredientId","some","targetSectionIndex","newSourceIngredients","sourceIngredientIndex","removedIngredient","parse","splice","newTargetIngredients","overIngredientIndex","debug","foundIngredient","containerId","itemId","getIngredientById","getSectionKey","count","onClick","htmlFor","onChange","store","placeholder","collisionDetection","onDragStart","onDragOver","onDragEnd","items","strategy","marginTop","padding","background","borderRadius","fontSize","_c2","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/StoreOrganizer.js"],"sourcesContent":["// StoreOrganizer.js\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragOverlay\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n  verticalListSortingStrategy\r\n} from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\nconst SortableIngredient = ({ ingredient, index }) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging\r\n  } = useSortable({\r\n    id: `ingredient-${ingredient.id}`,\r\n    data: {\r\n      type: 'ingredient',\r\n      ingredient\r\n    }\r\n  });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    opacity: isDragging ? 0.4 : 1,\r\n    cursor: 'grab',\r\n    userSelect: 'none'\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={`ingredient-item ${isDragging ? 'dragging' : ''}`}\r\n      {...attributes}\r\n      {...listeners}\r\n      data-id={ingredient.id}\r\n    >\r\n      {ingredient.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StoreOrganizer = () => {\r\n  const navigate = useNavigate();\r\n  const [sections, setSections] = useState([]);\r\n  const [, setIngredients] = useState([]);\r\n  const [stores, setStores] = useState([]);\r\n  const [selectedStore, setSelectedStore] = useState(null);\r\n  const [newSectionName, setNewSectionName] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  const [activeId, setActiveId] = useState(null);\r\n  const [activeDragData, setActiveDragData] = useState(null);\r\n  const [activeDroppableId, setActiveDroppableId] = useState(null);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  const fetchSectionsRef = React.useRef(null);\r\n  const createDefaultStoreRef = React.useRef(null);\r\n  const fetchDataRef = React.useRef(null);\r\n\r\n  // Create wrapper functions\r\n  const fetchSections = useCallback(async (storeId) => {\r\n    return fetchSectionsRef.current?.(storeId);\r\n  }, []);\r\n\r\n  const createDefaultStore = useCallback(async () => {\r\n    return createDefaultStoreRef.current?.();\r\n  }, []);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    return fetchDataRef.current?.();\r\n  }, []);\r\n\r\n  // Set up implementations with useEffect\r\n  useEffect(() => {\r\n    // Implement fetchSections\r\n    console.log(\"Sections state after update:\", sections);\r\n    fetchSectionsRef.current = async (storeId) => {\r\n      try {\r\n        const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n        const sectionsData = await sectionsResponse.json();\r\n\r\n        // Initialize sections with empty ingredient arrays\r\n        const sectionsWithIngredients = sectionsData.map(section => ({\r\n          ...section,\r\n          ingredients: []\r\n        }));\r\n\r\n        setSections(sectionsWithIngredients);\r\n\r\n        // Fetch ingredients\r\n        const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\r\n        const ingredientsData = await ingredientsResponse.json();\r\n\r\n        if (ingredientsData.length === 0) {\r\n          setSections(sectionsWithIngredients);\r\n          setIngredients([]);\r\n          setLoading(false);\r\n          return; // Early return if no ingredients to process\r\n        }\r\n\r\n        // Fetch ingredient section mappings\r\n        const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n        const mappingsData = await mappingsResponse.json();\r\n\r\n        // Organize ingredients into sections\r\n        const sectionMap = {};\r\n        sectionsWithIngredients.forEach(section => {\r\n          sectionMap[section.id] = section;\r\n        });\r\n\r\n        // Add a default \"Uncategorized\" section\r\n        let uncategorizedSection = {\r\n          id: \"uncategorized\",\r\n          name: \"Uncategorized\",\r\n          ingredients: []\r\n        };\r\n\r\n        // Assign ingredients to their sections based on mappings\r\n        ingredientsData.forEach(ingredient => {\r\n          const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\r\n\r\n          if (mapping && sectionMap[mapping.section_id]) {\r\n            sectionMap[mapping.section_id].ingredients.push(ingredient);\r\n          } else {\r\n            uncategorizedSection.ingredients.push(ingredient);\r\n          }\r\n        });\r\n\r\n        // Update sections array with assigned ingredients\r\n        const updatedSections = [...Object.values(sectionMap)];\r\n\r\n        // Add uncategorized section if it has ingredients\r\n        if (uncategorizedSection.ingredients.length > 0) {\r\n          updatedSections.push(uncategorizedSection);\r\n        }\r\n\r\n        setSections(updatedSections);\r\n        setIngredients(ingredientsData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching sections and ingredients:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Implement createDefaultStore\r\n    createDefaultStoreRef.current = async () => {\r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            name: \"My Store\",\r\n            sections: [\r\n              { name: \"Produce\", order: 0 },\r\n              { name: \"Dairy\", order: 1 },\r\n              { name: \"Meat\", order: 2 },\r\n              { name: \"Bakery\", order: 3 },\r\n              { name: \"Frozen\", order: 4 },\r\n              { name: \"Canned Goods\", order: 5 },\r\n              { name: \"Uncategorized\", order: 6 }\r\n            ]\r\n          })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.store_id) {\r\n          // Fetch stores again to get the new store\r\n          const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n          const storesData = await storesResponse.json();\r\n          setStores(storesData);\r\n\r\n          // Set the first store as selected\r\n          if (storesData.length > 0) {\r\n            setSelectedStore(storesData[0].id);\r\n            await fetchSections(storesData[0].id);\r\n          }\r\n        }\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error creating default store:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Implement fetchData\r\n    fetchDataRef.current = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch stores\r\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n        const storesData = await storesResponse.json();\r\n        setStores(storesData);\r\n\r\n        if (storesData.length > 0) {\r\n          setSelectedStore(storesData[0].id);\r\n\r\n          // Fetch sections for the selected store\r\n          await fetchSections(storesData[0].id);\r\n        } else {\r\n          // Create a default store if none exists\r\n          await createDefaultStore();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Call fetchData on component mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  const handleStoreChange = (e) => {\r\n    const storeId = e.target.value;\r\n    setSelectedStore(storeId);\r\n    fetchSections(storeId);\r\n  };\r\n\r\n  const addNewSection = () => {\r\n    if (!newSectionName.trim()) {\r\n      alert(\"Please enter a section name\");\r\n      return;\r\n    }\r\n\r\n    // Create new section locally first\r\n    const newSection = {\r\n      id: `temp-${Date.now()}`, // Temporary ID until saved\r\n      name: newSectionName,\r\n      order: sections.length,\r\n      ingredients: []\r\n    };\r\n\r\n    setSections([...sections, newSection]);\r\n    setNewSectionName(\"\");\r\n  };\r\n\r\n  const removeSection = (sectionId) => {\r\n    // Get the section\r\n    const section = sections.find(s => s.id.toString() === sectionId.toString());\r\n  \r\n    if (!section) return;\r\n  \r\n    // Make a copy of sections\r\n    const newSections = [...sections];\r\n    \r\n    // If section has ingredients, move them to uncategorized\r\n    let uncategorizedIndex = newSections.findIndex(s => s.id === \"uncategorized\");\r\n    let uncategorized;\r\n    \r\n    if (uncategorizedIndex === -1) {\r\n      // Create uncategorized section if it doesn't exist\r\n      uncategorized = {\r\n        id: \"uncategorized\",\r\n        name: \"Uncategorized\",\r\n        ingredients: []\r\n      };\r\n      \r\n      // Filter out the section to remove and add uncategorized\r\n      setSections([\r\n        ...newSections.filter(s => s.id.toString() !== sectionId.toString()),\r\n        uncategorized\r\n      ]);\r\n    } else {\r\n      // Get a reference to the uncategorized section\r\n      uncategorized = {...newSections[uncategorizedIndex]};\r\n      \r\n      // Create a new array for its ingredients\r\n      uncategorized.ingredients = [...uncategorized.ingredients];\r\n      \r\n      // If the section to remove has ingredients, add them to uncategorized\r\n      if (section.ingredients.length > 0) {\r\n        uncategorized.ingredients = [...uncategorized.ingredients, ...section.ingredients];\r\n      }\r\n      \r\n      // Update the uncategorized section in the newSections array\r\n      newSections[uncategorizedIndex] = uncategorized;\r\n      \r\n      // Remove the section to delete\r\n      setSections(newSections.filter(s => s.id.toString() !== sectionId.toString()));\r\n    }\r\n  };\r\n\r\n  const saveOrganization = async () => {\r\n    try {\r\n      // Prepare the data\r\n      const sectionData = sections\r\n        .filter(section => section.id !== \"uncategorized\")\r\n        .map(section => ({\r\n          id: section.id.toString().startsWith('temp-') ? null : section.id,\r\n          name: section.name,\r\n          ingredients: section.ingredients.map((ingredient, index) => ({\r\n            id: ingredient.id,\r\n            name: ingredient.name,\r\n            order: index\r\n          }))\r\n        }));\r\n\r\n      // Add uncategorized section if it exists\r\n      const uncategorizedSection = sections.find(s => s.id === \"uncategorized\");\r\n      if (uncategorizedSection && uncategorizedSection.ingredients.length > 0) {\r\n        sectionData.push({\r\n          id: null,\r\n          name: \"Uncategorized\",\r\n          ingredients: uncategorizedSection.ingredients.map((ingredient, index) => ({\r\n            id: ingredient.id,\r\n            name: ingredient.name,\r\n            order: index\r\n          }))\r\n        });\r\n      }\r\n\r\n      // Send to the backend\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          store_id: selectedStore,\r\n          sections: sectionData\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to save organization\");\r\n      }\r\n\r\n      // Show success message\r\n      setSaveSuccess(true);\r\n      setTimeout(() => setSaveSuccess(false), 3000);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving organization:\", error);\r\n      alert(\"Error saving organization: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const handleDragStart = (event) => {\r\n    const { active } = event;\r\n    setActiveId(active.id);\r\n    setActiveDragData(active.data.current?.ingredient || null);\r\n  };\r\n\r\n  const handleDragOver = (event) => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const { active, over } = event;\r\n\r\n    if (!over) {\r\n      setActiveDroppableId(null);\r\n      return;\r\n    }\r\n\r\n    // If we're over a section or a droppable element\r\n    if (over.id.startsWith('section-') || over.data?.current?.droppable) {\r\n      const sectionId = over.id.startsWith('section-')\r\n        ? over.id\r\n        : findContainer(over.id);\r\n\r\n      if (sectionId) {\r\n        console.log(\"Hovering over section:\", sectionId);\r\n        setActiveDroppableId(sectionId);\r\n      } else {\r\n        setActiveDroppableId(null);\r\n      }\r\n    } else {\r\n      setActiveDroppableId(null);\r\n    }\r\n  };\r\n\r\n  const handleDragEnd = (event) => {\r\n    console.log(\"handleDragEnd starting with sections:\", JSON.stringify(sections.map(s => ({\r\n      id: s.id,\r\n      name: s.name,\r\n      ingredientCount: s.ingredients.length\r\n    }))));\r\n    console.log(\"DRAG END EVENT:\", event);\r\n    const { active, over } = event;\r\n\r\n    setActiveDroppableId(null);\r\n    setActiveId(null);\r\n    setActiveDragData(null);\r\n\r\n    if (!active || !over) {\r\n      console.log(\"No active or over element in drag end\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Active ID:\", active.id);\r\n    console.log(\"Over ID:\", over.id);\r\n\r\n    // Extract the ingredient ID and data\r\n    const ingredientId = active.id.replace('ingredient-', '');\r\n    const ingredientData = active.data.current?.ingredient;\r\n\r\n    if (!ingredientData) {\r\n      console.log(\"No ingredient data found\");\r\n      return;\r\n    }\r\n\r\n    // Find source section\r\n    let sourceSection = null;\r\n    let sourceSectionIndex = -1;\r\n\r\n    for (let i = 0; i < sections.length; i++) {\r\n      const section = sections[i];\r\n      const ingredientIndex = section.ingredients.findIndex(ing => ing.id.toString() === ingredientId);\r\n      if (ingredientIndex !== -1) {\r\n        sourceSection = section;\r\n        sourceSectionIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (sourceSectionIndex === -1) {\r\n      console.log(\"Source section not found\");\r\n      return;\r\n    }\r\n\r\n    // Determine target section\r\n    let targetSectionId;\r\n\r\n    if (over.id.startsWith('section-')) {\r\n      targetSectionId = over.id.replace('section-', '');\r\n    } else if (over.id.startsWith('ingredient-')) {\r\n      // Find which section contains this ingredient\r\n      const overIngredientId = over.id.replace('ingredient-', '');\r\n      for (const section of sections) {\r\n        if (section.ingredients.some(ing => ing.id.toString() === overIngredientId)) {\r\n          targetSectionId = section.id.toString();\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      console.log(\"Unknown over target:\", over.id);\r\n      return;\r\n    }\r\n\r\n    if (!targetSectionId) {\r\n      console.log(\"Target section not found\");\r\n      return;\r\n    }\r\n\r\n    const targetSectionIndex = sections.findIndex(s => s.id.toString() === targetSectionId);\r\n    if (targetSectionIndex === -1) {\r\n      console.log(\"Target section not found in sections array\");\r\n      return;\r\n    }\r\n\r\n    // Create deep copies of the sections to modify\r\n    const newSections = [...sections];\r\n\r\n    // Remove from source section (create a new array)\r\n    const newSourceIngredients = [...newSections[sourceSectionIndex].ingredients];\r\n    const sourceIngredientIndex = newSourceIngredients.findIndex(ing => ing.id.toString() === ingredientId);\r\n\r\n    if (sourceIngredientIndex === -1) {\r\n      console.log(\"Ingredient not found in source section\");\r\n      return;\r\n    }\r\n\r\n// Around line 399 in handleDragEnd, replace the [removedIngredient] line with:\r\nconst removedIngredient = JSON.parse(JSON.stringify(newSourceIngredients[sourceIngredientIndex]));\r\nnewSourceIngredients.splice(sourceIngredientIndex, 1);\r\n\r\n    // Add to target section (create a new array)\r\n    const newTargetIngredients = [...newSections[targetSectionIndex].ingredients];\r\n\r\n    // If dropping on another ingredient, insert at that position\r\n    if (over.id.startsWith('ingredient-')) {\r\n      const overIngredientId = over.id.replace('ingredient-', '');\r\n      const overIngredientIndex = newTargetIngredients.findIndex(ing => ing.id.toString() === overIngredientId);\r\n\r\n      if (overIngredientIndex !== -1) {\r\n        newTargetIngredients.splice(overIngredientIndex, 0, removedIngredient);\r\n      } else {\r\n        newTargetIngredients.push(removedIngredient);\r\n      }\r\n    } else {\r\n      // Just add to the end of the target section\r\n      newTargetIngredients.push(removedIngredient);\r\n    }\r\n\r\n    newSections[targetSectionIndex] = {\r\n      ...newSections[targetSectionIndex],\r\n      ingredients: newTargetIngredients\r\n    };\r\n\r\n    console.log(\"Updated sections structure:\", newSections);\r\n    console.log(\"Setting sections to:\", JSON.stringify(newSections.map(s => ({\r\n      id: s.id,\r\n      name: s.name,\r\n      ingredientCount: s.ingredients.length\r\n    }))));\r\n    // Update state with the new sections array\r\n    setSections(newSections);\r\n  };\r\n\r\n  const findContainer = (id) => {\r\n    console.debug(\"Finding container for id:\", id);\r\n\r\n    // If the ID is a section ID\r\n    if (id && id.startsWith('section-')) {\r\n      return id;\r\n    }\r\n\r\n    // For ingredients, find which section they're in\r\n    if (id && id.startsWith('ingredient-')) {\r\n      const ingredientId = id.replace('ingredient-', '');\r\n      for (const section of sections) {\r\n        const foundIngredient = section.ingredients.find(ingredient =>\r\n          ingredient.id && ingredient.id.toString() === ingredientId\r\n        );\r\n        if (foundIngredient) {\r\n          return `section-${section.id}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // Helper function to find an ingredient's index within a section\r\n  const findIndex = (containerId, itemId) => {\r\n    const sectionId = containerId.replace('section-', '');\r\n    const section = sections.find(s => s.id.toString() === sectionId);\r\n    if (!section) return -1;\r\n\r\n    if (itemId.startsWith('ingredient-')) {\r\n      const ingredientId = itemId.replace('ingredient-', '');\r\n      return section.ingredients.findIndex(i => i.id.toString() === ingredientId);\r\n    }\r\n\r\n    return -1;\r\n  \r\n  };\r\n\r\n  // Helper function to get an ingredient by ID\r\n  const getIngredientById = (id) => {\r\n    if (id.startsWith('ingredient-')) {\r\n      const ingredientId = id.replace('ingredient-', '');\r\n      for (const section of sections) {\r\n        const ingredient = section.ingredients.find(i => i.id.toString() === ingredientId);\r\n        if (ingredient) return ingredient;\r\n      }\r\n    }\r\n    // Add this before your return statement (around line 560)\r\n// Generate a unique key for SortableContext to force re-renders\r\nconst getSectionKey = (sectionId, count) => `section-${sectionId}-${count}`;\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"store-organizer-container\">\r\n      <div className=\"store-organizer-header\">\r\n        <h1>Store Section Organizer</h1>\r\n        {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n      </div>\r\n\r\n      <div className=\"store-organizer-controls\">\r\n        <button\r\n          className=\"back-btn\"\r\n          onClick={() => navigate('/grocery-list')}\r\n        >\r\n          ← Back to Grocery List\r\n        </button>\r\n\r\n        <div className=\"store-selector\">\r\n          <label htmlFor=\"store-select\">Select Store:</label>\r\n          <select\r\n            id=\"store-select\"\r\n            value={selectedStore || \"\"}\r\n            onChange={handleStoreChange}\r\n          >\r\n            {stores.map(store => (\r\n              <option key={store.id} value={store.id}>{store.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"add-section-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={newSectionName}\r\n            onChange={(e) => setNewSectionName(e.target.value)}\r\n            placeholder=\"New Section Name\"\r\n          />\r\n          <button onClick={addNewSection}>Add Section</button>\r\n        </div>\r\n\r\n        <button className=\"save-organization-btn\" onClick={saveOrganization}>\r\n          Save Organization\r\n        </button>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div className=\"loading\">Loading sections and ingredients...</div>\r\n      ) : (\r\n        <DndContext\r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragStart={handleDragStart}\r\n          onDragOver={handleDragOver}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <div className=\"organizer-layout\">\r\n            <div className=\"ingredients-panel\">\r\n              <h2>All Ingredients</h2>\r\n              <SortableContext\r\n                id=\"all-ingredients\"\r\n                items={sections\r\n                  .find(s => s.id === \"uncategorized\")?.ingredients.map(i => `ingredient-${i.id}`) || []}\r\n                strategy={verticalListSortingStrategy}\r\n              >\r\n                <div className=\"ingredient-list all-ingredients\">\r\n                  {sections.find(s => s.id === \"uncategorized\")?.ingredients.map((ingredient, index) => (\r\n                    <SortableIngredient\r\n                      key={ingredient.id}\r\n                      ingredient={ingredient}\r\n                      index={index}\r\n                    />\r\n                  ))}\r\n                  {!sections.find(s => s.id === \"uncategorized\") ||\r\n                    sections.find(s => s.id === \"uncategorized\").ingredients.length === 0 ? (\r\n                    <div className=\"empty-ingredients\">\r\n                      No uncategorized ingredients\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </SortableContext>\r\n            </div>\r\n\r\n            <div className=\"sections-container\">\r\n              {sections.filter(section => section.id !== \"uncategorized\").map(section => (\r\n                <div\r\n                  className={`section-card ${activeDroppableId === `section-${section.id}` ? 'drop-target' : ''}`}\r\n                  key={section.id}\r\n                  id={`section-${section.id}`}\r\n                >\r\n                  <div className=\"section-header\">\r\n                    <h3>{section.name}</h3>\r\n                    <button\r\n                      className=\"remove-section-btn\"\r\n                      onClick={() => removeSection(section.id)}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  </div>\r\n\r\n                  <SortableContext\r\n  key={getSectionKey(section.id, section.ingredients.length)}\r\n  id={`section-${section.id}`}\r\n  items={section.ingredients.map(i => `ingredient-${i.id}`)}\r\n  strategy={verticalListSortingStrategy}\r\n>\r\n                    <div\r\n                      className=\"ingredient-list\"\r\n                      data-section-id={section.id}\r\n                    >\r\n                      {section.ingredients.length > 0 ? (\r\n                        section.ingredients.map((ingredient, index) => (\r\n                          <SortableIngredient\r\n                            key={`${section.id}-ingredient-${ingredient.id}`}\r\n                            ingredient={ingredient}\r\n                            index={index}\r\n                          />\r\n                        ))\r\n                      ) : (\r\n                        <div className=\"empty-section\">\r\n                          Drag ingredients here\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </SortableContext>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <DragOverlay>\r\n            {activeId && activeDragData ? (\r\n              <div className=\"ingredient-item dragging\">\r\n                {activeDragData.name}\r\n              </div>\r\n            ) : null}\r\n          </DragOverlay>\r\n        </DndContext>\r\n      )}\r\n\r\n      <div className=\"organizer-tip\">\r\n        <p>Tip: Drag and drop ingredients between sections to organize your grocery list.</p>\r\n      </div>\r\n      {/* Add this at the end of your component, before the closing </div> */}\r\n      <div style={{ marginTop: '20px', padding: '10px', background: '#f0f0f0', borderRadius: '4px' }}>\r\n        <h3>Debug Info:</h3>\r\n        <button onClick={() => console.log(\"Current sections:\", sections)}>\r\n          Log Sections State\r\n        </button>\r\n        <div style={{ fontSize: '12px', marginTop: '10px' }}>\r\n          Active ID: {activeId || 'none'}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoreOrganizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}