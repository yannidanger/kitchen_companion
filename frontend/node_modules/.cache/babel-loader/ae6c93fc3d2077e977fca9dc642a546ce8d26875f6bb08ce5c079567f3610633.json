{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\storeorganizer\\\\storeOrganizerSimple.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport StoreSelector from \"./storeSelector\";\nimport SectionManager from \"./sectionManager\";\nimport IngredientMover from \"./ingredientMover\";\nimport SaveButton from \"./saveButton\";\nimport SectionGrid from \"./sectionGrid\";\nimport DebugButton from \"./debugButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StoreOrganizerSimple = () => {\n  _s();\n  const navigate = useNavigate();\n  const [sections, setSections] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [ingredientSections, setIngredientSections] = useState({});\n  const [selectedIngredients, setSelectedIngredients] = useState({});\n  const [targetSection, setTargetSection] = useState(\"\");\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const fetchStores = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\");\n      const storesData = await response.json();\n      setStores(storesData);\n      if (storesData.length > 0) {\n        setSelectedStore(storesData[0].id);\n        fetchStoreData(storesData[0].id);\n      } else {\n        await createDefaultStore();\n      }\n    } catch (error) {\n      console.error(\"Error fetching stores:\", error);\n      setLoading(false);\n    }\n  }, []); // ✅ Empty array ensures function is stable\n\n  useEffect(() => {\n    fetchStores();\n  }, [fetchStores]); // ✅ Warning is gone now\n\n  const fetchStoreData = async storeId => {\n    try {\n      setLoading(true);\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n      const sectionsData = await sectionsResponse.json();\n      setSections(sectionsData);\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\n      const ingredientsData = await ingredientsResponse.json();\n      setIngredients(ingredientsData);\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n      const mappingsData = await mappingsResponse.json();\n      const sectionMap = {};\n      mappingsData.forEach(mapping => {\n        sectionMap[mapping.ingredient_id] = mapping.section_id;\n      });\n      setIngredientSections(sectionMap);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching store data:\", error);\n      setLoading(false);\n    }\n  };\n  const createDefaultStore = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: \"My Store\",\n          sections: [{\n            name: \"Produce\",\n            order: 0\n          }, {\n            name: \"Dairy\",\n            order: 1\n          }, {\n            name: \"Meat\",\n            order: 2\n          }, {\n            name: \"Bakery\",\n            order: 3\n          }, {\n            name: \"Frozen\",\n            order: 4\n          }, {\n            name: \"Canned Goods\",\n            order: 5\n          }, {\n            name: \"Uncategorized\",\n            order: 6\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.store_id) {\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n          fetchStoreData(storesData[0].id);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error creating default store:\", error);\n      setLoading(false);\n    }\n  };\n  const handleStoreChange = storeId => {\n    setSelectedStore(storeId);\n    fetchStoreData(storeId);\n  };\n  const addNewSection = name => {\n    if (!name.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      name: name,\n      order: sections.length\n    };\n    setSections([...sections, newSection]);\n  };\n  const removeSection = sectionId => {\n    setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n    const updatedSectionMap = {\n      ...ingredientSections\n    };\n    Object.keys(updatedSectionMap).forEach(ingredientId => {\n      if (updatedSectionMap[ingredientId].toString() === sectionId.toString()) {\n        delete updatedSectionMap[ingredientId];\n      }\n    });\n    setIngredientSections(updatedSectionMap);\n  };\n  const toggleIngredientSelection = ingredientId => {\n    setSelectedIngredients(prev => ({\n      ...prev,\n      [ingredientId]: !prev[ingredientId]\n    }));\n  };\n  const selectAllInSection = sectionId => {\n    const newSelected = {\n      ...selectedIngredients\n    };\n    ingredients.forEach(ingredient => {\n      if (ingredientSections[ingredient.id] === sectionId) {\n        newSelected[ingredient.id] = true;\n      }\n    });\n    setSelectedIngredients(newSelected);\n  };\n  const clearSelections = () => {\n    setSelectedIngredients({});\n  };\n  const moveSelectedIngredients = () => {\n    if (!targetSection) {\n      alert(\"Please select a target section\");\n      return;\n    }\n    const selectedIds = Object.keys(selectedIngredients).filter(id => selectedIngredients[id]);\n    if (selectedIds.length === 0) {\n      alert(\"Please select at least one ingredient to move\");\n      return;\n    }\n    const updatedSectionMap = {\n      ...ingredientSections\n    };\n    selectedIds.forEach(ingredientId => {\n      updatedSectionMap[ingredientId] = targetSection;\n    });\n    setIngredientSections(updatedSectionMap);\n    setSelectedIngredients({});\n    setTargetSection(\"\");\n  };\n  const saveOrganization = async () => {\n    try {\n      const sectionData = [];\n      for (const section of sections) {\n        const sectionIngredients = ingredients.filter(ing => String(ingredientSections[ing.id]) === String(section.id));\n        if (section.id.toString().startsWith('temp-') || sectionIngredients.length > 0) {\n          sectionData.push({\n            id: section.id.toString().startsWith('temp-') ? null : section.id,\n            name: section.name,\n            ingredients: sectionIngredients.map((ing, index) => ({\n              id: ing.id,\n              name: ing.name,\n              order: index\n            }))\n          });\n        }\n      }\n      const uncategorizedIngredients = ingredients.filter(ing => !ingredientSections[ing.id]);\n      if (uncategorizedIngredients.length > 0) {\n        sectionData.push({\n          id: null,\n          name: \"Uncategorized\",\n          ingredients: uncategorizedIngredients.map((ing, index) => ({\n            id: ing.id,\n            name: ing.name,\n            order: index\n          }))\n        });\n      }\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Failed to save organization: ${errorData.error || response.statusText}`);\n      }\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n      await fetchStoreData(selectedStore);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n  const getIngredientsForSection = sectionId => {\n    return ingredients.filter(ing => String(ingredientSections[ing.id]) === String(sectionId));\n  };\n  const getUncategorizedIngredients = () => {\n    return ingredients.filter(ing => !ingredientSections[ing.id]);\n  };\n  const debugIngredientMove = () => {\n    console.log(\"=== DEBUG INGREDIENT MOVE ===\");\n    console.log(\"Current ingredient sections mapping:\", ingredientSections);\n    console.log(\"Selected ingredients:\", selectedIngredients);\n    console.log(\"Target section:\", targetSection);\n    sections.forEach(section => {\n      const sectionIngredients = ingredients.filter(ing => ingredientSections[ing.id] === section.id);\n      console.log(`Section ${section.name} (${section.id}) should have:`, sectionIngredients.map(ing => ing.name));\n    });\n    const uncategorized = ingredients.filter(ing => !ingredientSections[ing.id]);\n    console.log(\"Uncategorized should have:\", uncategorized.map(ing => ing.name));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(DebugButton, {\n        onClick: debugIngredientMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: () => navigate('/grocery-list'),\n        children: \"\\u2190 Back to Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StoreSelector, {\n        stores: stores,\n        selectedStore: selectedStore,\n        onChange: handleStoreChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SectionManager, {\n        newSectionName: newSectionName,\n        setNewSectionName: setNewSectionName,\n        addNewSection: addNewSection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SaveButton, {\n        saveSuccess: saveSuccess,\n        onClick: saveOrganization\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simple-organizer-layout\",\n      children: [/*#__PURE__*/_jsxDEV(IngredientMover, {\n        sections: sections,\n        targetSection: targetSection,\n        setTargetSection: setTargetSection,\n        moveSelectedIngredients: moveSelectedIngredients,\n        clearSelections: clearSelections\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SectionGrid, {\n        sections: sections,\n        getIngredientsForSection: getIngredientsForSection,\n        getUncategorizedIngredients: getUncategorizedIngredients,\n        selectedIngredients: selectedIngredients,\n        toggleIngredientSelection: toggleIngredientSelection,\n        selectAllInSection: selectAllInSection,\n        removeSection: removeSection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Check the ingredients you want to move, select a target section, and click \\\"Move Selected\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 9\n  }, this);\n};\n_s(StoreOrganizerSimple, \"//eros8LtkQw2ubTytV4J7MT4Ec=\", false, function () {\n  return [useNavigate];\n});\n_c = StoreOrganizerSimple;\nexport default StoreOrganizerSimple;\nvar _c;\n$RefreshReg$(_c, \"StoreOrganizerSimple\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","StoreSelector","SectionManager","IngredientMover","SaveButton","SectionGrid","DebugButton","jsxDEV","_jsxDEV","StoreOrganizerSimple","_s","navigate","sections","setSections","ingredients","setIngredients","stores","setStores","selectedStore","setSelectedStore","loading","setLoading","saveSuccess","setSaveSuccess","ingredientSections","setIngredientSections","selectedIngredients","setSelectedIngredients","targetSection","setTargetSection","newSectionName","setNewSectionName","fetchStores","response","fetch","storesData","json","length","id","fetchStoreData","createDefaultStore","error","console","storeId","sectionsResponse","sectionsData","ingredientsResponse","ingredientsData","mappingsResponse","mappingsData","sectionMap","forEach","mapping","ingredient_id","section_id","method","headers","body","JSON","stringify","name","order","data","store_id","storesResponse","handleStoreChange","addNewSection","trim","alert","newSection","Date","now","removeSection","sectionId","filter","s","toString","updatedSectionMap","Object","keys","ingredientId","toggleIngredientSelection","prev","selectAllInSection","newSelected","ingredient","clearSelections","moveSelectedIngredients","selectedIds","saveOrganization","sectionData","section","sectionIngredients","ing","String","startsWith","push","map","index","uncategorizedIngredients","ok","errorData","Error","statusText","setTimeout","message","getIngredientsForSection","getUncategorizedIngredients","debugIngredientMove","log","uncategorized","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/storeorganizer/storeOrganizerSimple.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport StoreSelector from \"./storeSelector\";\r\nimport SectionManager from \"./sectionManager\";\r\nimport IngredientMover from \"./ingredientMover\";\r\nimport SaveButton from \"./saveButton\";\r\nimport SectionGrid from \"./sectionGrid\";\r\nimport DebugButton from \"./debugButton\";\r\n\r\nconst StoreOrganizerSimple = () => {\r\n    const navigate = useNavigate();\r\n    const [sections, setSections] = useState([]);\r\n    const [ingredients, setIngredients] = useState([]);\r\n    const [stores, setStores] = useState([]);\r\n    const [selectedStore, setSelectedStore] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [saveSuccess, setSaveSuccess] = useState(false);\r\n    const [ingredientSections, setIngredientSections] = useState({});\r\n    const [selectedIngredients, setSelectedIngredients] = useState({});\r\n    const [targetSection, setTargetSection] = useState(\"\");\r\n    const [newSectionName, setNewSectionName] = useState(\"\");\r\n\r\n    \r\n    const fetchStores = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n            const storesData = await response.json();\r\n            setStores(storesData);\r\n    \r\n            if (storesData.length > 0) {\r\n                setSelectedStore(storesData[0].id);\r\n                fetchStoreData(storesData[0].id);\r\n            } else {\r\n                await createDefaultStore();\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching stores:\", error);\r\n            setLoading(false);\r\n        }\r\n    }, []); // ✅ Empty array ensures function is stable\r\n    \r\n    useEffect(() => {\r\n        fetchStores();\r\n    }, [fetchStores]); // ✅ Warning is gone now\r\n    \r\n\r\n    const fetchStoreData = async (storeId) => {\r\n        try {\r\n            setLoading(true);\r\n            const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n            const sectionsData = await sectionsResponse.json();\r\n            setSections(sectionsData);\r\n\r\n            const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\r\n            const ingredientsData = await ingredientsResponse.json();\r\n            setIngredients(ingredientsData);\r\n\r\n            const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n            const mappingsData = await mappingsResponse.json();\r\n\r\n            const sectionMap = {};\r\n            mappingsData.forEach(mapping => {\r\n                sectionMap[mapping.ingredient_id] = mapping.section_id;\r\n            });\r\n\r\n            setIngredientSections(sectionMap);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error(\"Error fetching store data:\", error);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const createDefaultStore = async () => {\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    name: \"My Store\",\r\n                    sections: [\r\n                        { name: \"Produce\", order: 0 },\r\n                        { name: \"Dairy\", order: 1 },\r\n                        { name: \"Meat\", order: 2 },\r\n                        { name: \"Bakery\", order: 3 },\r\n                        { name: \"Frozen\", order: 4 },\r\n                        { name: \"Canned Goods\", order: 5 },\r\n                        { name: \"Uncategorized\", order: 6 }\r\n                    ]\r\n                })\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.store_id) {\r\n                const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n                const storesData = await storesResponse.json();\r\n                setStores(storesData);\r\n\r\n                if (storesData.length > 0) {\r\n                    setSelectedStore(storesData[0].id);\r\n                    fetchStoreData(storesData[0].id);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error creating default store:\", error);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleStoreChange = (storeId) => {\r\n        setSelectedStore(storeId);\r\n        fetchStoreData(storeId);\r\n    };\r\n\r\n    const addNewSection = (name) => {\r\n        if (!name.trim()) {\r\n            alert(\"Please enter a section name\");\r\n            return;\r\n        }\r\n\r\n        const newSection = {\r\n            id: `temp-${Date.now()}`,\r\n            name: name,\r\n            order: sections.length\r\n        };\r\n\r\n        setSections([...sections, newSection]);\r\n    };\r\n\r\n    const removeSection = (sectionId) => {\r\n        setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n\r\n        const updatedSectionMap = { ...ingredientSections };\r\n        Object.keys(updatedSectionMap).forEach(ingredientId => {\r\n            if (updatedSectionMap[ingredientId].toString() === sectionId.toString()) {\r\n                delete updatedSectionMap[ingredientId];\r\n            }\r\n        });\r\n\r\n        setIngredientSections(updatedSectionMap);\r\n    };\r\n\r\n    const toggleIngredientSelection = (ingredientId) => {\r\n        setSelectedIngredients(prev => ({\r\n            ...prev,\r\n            [ingredientId]: !prev[ingredientId]\r\n        }));\r\n    };\r\n\r\n    const selectAllInSection = (sectionId) => {\r\n        const newSelected = { ...selectedIngredients };\r\n\r\n        ingredients.forEach(ingredient => {\r\n            if (ingredientSections[ingredient.id] === sectionId) {\r\n                newSelected[ingredient.id] = true;\r\n            }\r\n        });\r\n\r\n        setSelectedIngredients(newSelected);\r\n    };\r\n\r\n    const clearSelections = () => {\r\n        setSelectedIngredients({});\r\n    };\r\n\r\n    const moveSelectedIngredients = () => {\r\n        if (!targetSection) {\r\n            alert(\"Please select a target section\");\r\n            return;\r\n        }\r\n        \r\n        const selectedIds = Object.keys(selectedIngredients).filter(id => selectedIngredients[id]);\r\n        \r\n        if (selectedIds.length === 0) {\r\n            alert(\"Please select at least one ingredient to move\");\r\n            return;\r\n        }\r\n        \r\n        const updatedSectionMap = { ...ingredientSections };\r\n        \r\n        selectedIds.forEach(ingredientId => {\r\n            updatedSectionMap[ingredientId] = targetSection;\r\n        });\r\n        \r\n        setIngredientSections(updatedSectionMap);\r\n        setSelectedIngredients({});\r\n        setTargetSection(\"\");\r\n    };\r\n\r\n    const saveOrganization = async () => {\r\n        try {\r\n            const sectionData = [];\r\n            \r\n            for (const section of sections) {\r\n                const sectionIngredients = ingredients.filter(ing => \r\n                    String(ingredientSections[ing.id]) === String(section.id)\r\n                );\r\n                \r\n                if (section.id.toString().startsWith('temp-') || sectionIngredients.length > 0) {\r\n                    sectionData.push({\r\n                        id: section.id.toString().startsWith('temp-') ? null : section.id,\r\n                        name: section.name,\r\n                        ingredients: sectionIngredients.map((ing, index) => ({\r\n                            id: ing.id,\r\n                            name: ing.name,\r\n                            order: index\r\n                        }))\r\n                    });\r\n                }\r\n            }\r\n            \r\n            const uncategorizedIngredients = ingredients.filter(ing => !ingredientSections[ing.id]);\r\n            \r\n            if (uncategorizedIngredients.length > 0) {\r\n                sectionData.push({\r\n                    id: null,\r\n                    name: \"Uncategorized\",\r\n                    ingredients: uncategorizedIngredients.map((ing, index) => ({\r\n                        id: ing.id,\r\n                        name: ing.name,\r\n                        order: index\r\n                    }))\r\n                });\r\n            }\r\n            \r\n            const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    store_id: selectedStore,\r\n                    sections: sectionData\r\n                })\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(`Failed to save organization: ${errorData.error || response.statusText}`);\r\n            }\r\n            \r\n            setSaveSuccess(true);\r\n            setTimeout(() => setSaveSuccess(false), 3000);\r\n            \r\n            await fetchStoreData(selectedStore);\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error saving organization:\", error);\r\n            alert(\"Error saving organization: \" + error.message);\r\n        }\r\n    };\r\n\r\n    const getIngredientsForSection = (sectionId) => {\r\n        return ingredients.filter(ing => \r\n            String(ingredientSections[ing.id]) === String(sectionId)\r\n        );\r\n    };\r\n    \r\n    const getUncategorizedIngredients = () => {\r\n        return ingredients.filter(ing => !ingredientSections[ing.id]);\r\n    };\r\n\r\n    const debugIngredientMove = () => {\r\n        console.log(\"=== DEBUG INGREDIENT MOVE ===\");\r\n        console.log(\"Current ingredient sections mapping:\", ingredientSections);\r\n        console.log(\"Selected ingredients:\", selectedIngredients);\r\n        console.log(\"Target section:\", targetSection);\r\n\r\n        sections.forEach(section => {\r\n            const sectionIngredients = ingredients.filter(ing =>\r\n                ingredientSections[ing.id] === section.id\r\n            );\r\n            console.log(`Section ${section.name} (${section.id}) should have:`,\r\n                sectionIngredients.map(ing => ing.name)\r\n            );\r\n        });\r\n\r\n        const uncategorized = ingredients.filter(ing => !ingredientSections[ing.id]);\r\n        console.log(\"Uncategorized should have:\", uncategorized.map(ing => ing.name));\r\n    };\r\n\r\n    return (\r\n        <div className=\"store-organizer-container\">\r\n            <div className=\"store-organizer-header\">\r\n                <h1>Store Section Organizer</h1>\r\n                {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n            </div>\r\n\r\n            <div className=\"store-organizer-controls\">\r\n                <DebugButton onClick={debugIngredientMove} />\r\n                \r\n                <button\r\n                    className=\"back-btn\"\r\n                    onClick={() => navigate('/grocery-list')}\r\n                >\r\n                    ← Back to Grocery List\r\n                </button>\r\n\r\n                <StoreSelector \r\n                    stores={stores} \r\n                    selectedStore={selectedStore} \r\n                    onChange={handleStoreChange} \r\n                />\r\n\r\n                <SectionManager \r\n                    newSectionName={newSectionName}\r\n                    setNewSectionName={setNewSectionName}\r\n                    addNewSection={addNewSection}\r\n                />\r\n\r\n                <SaveButton \r\n                    saveSuccess={saveSuccess}\r\n                    onClick={saveOrganization}\r\n                />\r\n            </div>\r\n\r\n            {loading ? (\r\n                <div className=\"loading\">Loading sections and ingredients...</div>\r\n            ) : (\r\n                <div className=\"simple-organizer-layout\">\r\n                    <IngredientMover\r\n                        sections={sections}\r\n                        targetSection={targetSection}\r\n                        setTargetSection={setTargetSection}\r\n                        moveSelectedIngredients={moveSelectedIngredients}\r\n                        clearSelections={clearSelections}\r\n                    />\r\n\r\n                    <SectionGrid\r\n                        sections={sections}\r\n                        getIngredientsForSection={getIngredientsForSection}\r\n                        getUncategorizedIngredients={getUncategorizedIngredients}\r\n                        selectedIngredients={selectedIngredients}\r\n                        toggleIngredientSelection={toggleIngredientSelection}\r\n                        selectAllInSection={selectAllInSection}\r\n                        removeSection={removeSection}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"organizer-tip\">\r\n                <p>Tip: Check the ingredients you want to move, select a target section, and click \"Move Selected\".</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StoreOrganizerSimple;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}