{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\pages\\\\GroceryListView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GroceryListView() {\n  _s();\n  const {\n    planId\n  } = useParams(); // For viewing an existing saved plan's groceries\n  const location = useLocation(); // For previewing groceries without saving\n  const navigate = useNavigate();\n  const [groceryList, setGroceryList] = useState([]);\n  const [planDetails, setPlanDetails] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPrinting, setIsPrinting] = useState(false);\n  const [isReordering, setIsReordering] = useState(false);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [detailedView, setDetailedView] = useState(false);\n  useEffect(() => {\n    if (planId) {\n      // If planId is provided, fetch the grocery list for this saved plan\n      fetchGroceryListForPlan(planId);\n    } else if (location.state && location.state.meals) {\n      // If we have meals data in location state, generate grocery list without saving\n      generateGroceryListFromMeals(location.state.meals);\n      setPlanDetails({\n        name: location.state.planName || \"Unnamed Meal Plan\",\n        isTemporary: true\n      });\n    } else {\n      // No plan ID or meals data\n      setError(\"No meal plan data found.\");\n      setLoading(false);\n    }\n  }, [planId, location.state]);\n  const saveNewSectionOrder = async () => {\n    try {\n      if (!selectedStore) {\n        // Fetch store if not already selected\n        const storesResponse = await fetch('http://127.0.0.1:5000/api/stores');\n        const storesData = await storesResponse.json();\n        if (storesData.length === 0) {\n          alert('No stores available to save section order');\n          return;\n        }\n        const defaultStore = storesData.find(store => store.is_default) || storesData[0];\n        setSelectedStore(defaultStore.id);\n\n        // Pass the reordered section IDs\n        const sectionIds = groceryList.filter(section => section.sectionId) // Only include sections with IDs\n        .map(section => section.sectionId);\n        await reorderSections(defaultStore.id, sectionIds);\n      } else {\n        const sectionIds = groceryList.filter(section => section.sectionId) // Only include sections with IDs\n        .map(section => section.sectionId);\n        await reorderSections(selectedStore, sectionIds);\n      }\n      setIsReordering(false);\n      alert('Section order saved successfully!');\n    } catch (error) {\n      console.error('Error saving section order:', error);\n      alert('Failed to save section order');\n    }\n  };\n\n  // Function to make API call for reordering\n  const reorderSections = async (storeId, sectionIds) => {\n    if (!sectionIds || sectionIds.length === 0) {\n      alert('No sections to reorder');\n      return;\n    }\n    const response = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections/reorder`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        sections: sectionIds\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to save section order');\n    }\n  };\n\n  // Update the fetchGroceryListForPlan function\n  const fetchGroceryListForPlan = async id => {\n    try {\n      setLoading(true);\n\n      // First, fetch plan details\n      const planResponse = await fetch(`http://127.0.0.1:5000/api/weekly_plan/${id}`);\n      if (!planResponse.ok) {\n        throw new Error(\"Failed to fetch plan details\");\n      }\n      const planData = await planResponse.json();\n      setPlanDetails({\n        ...planData,\n        isTemporary: false\n      });\n\n      // Then fetch grocery list\n      const groceryResponse = await fetch(`http://127.0.0.1:5000/api/grocery_list?weekly_plan_id=${id}`);\n      if (!groceryResponse.ok) {\n        throw new Error(\"Failed to fetch grocery list\");\n      }\n      const groceryData = await groceryResponse.json();\n\n      // Sort the grocery list by section order if available\n      const sortedList = groceryData.grocery_list.sort((a, b) => {\n        // Put Uncategorized at the end\n        if (a.section === \"Uncategorized\") return 1;\n        if (b.section === \"Uncategorized\") return -1;\n\n        // Sort by order if available\n        if (a.order !== undefined && b.order !== undefined) {\n          return a.order - b.order;\n        }\n\n        // Fall back to alphabetical order\n        return a.section.localeCompare(b.section);\n      });\n      setGroceryList(sortedList || []);\n      console.log(\"Grocery list data:\", sortedList);\n      setLoading(false);\n    } catch (err) {\n      console.error(\"Error fetching grocery list:\", err);\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  // Update the generateGroceryListFromMeals function similarly\n  const generateGroceryListFromMeals = async meals => {\n    try {\n      setLoading(true);\n\n      // Generate grocery list from meals array without saving the plan\n      const response = await fetch(`http://127.0.0.1:5000/api/generate_grocery_list`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          meals: meals\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to generate grocery list\");\n      }\n      const data = await response.json();\n\n      // Sort the grocery list by section order if available\n      const sortedList = data.grocery_list.sort((a, b) => {\n        // Put Uncategorized at the end\n        if (a.section === \"Uncategorized\") return 1;\n        if (b.section === \"Uncategorized\") return -1;\n\n        // Sort by order if available\n        if (a.order !== undefined && b.order !== undefined) {\n          return a.order - b.order;\n        }\n\n        // Fall back to alphabetical order\n        return a.section.localeCompare(b.section);\n      });\n      setGroceryList(sortedList || []);\n      setLoading(false);\n    } catch (err) {\n      console.error(\"Error generating grocery list:\", err);\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n  const printGroceryList = () => {\n    setIsPrinting(true);\n    setTimeout(() => {\n      window.print();\n      setIsPrinting(false);\n    }, 100);\n  };\n  const exportGroceryListToCSV = () => {\n    // Create CSV content\n    let csvContent = \"Section,Item,Quantity,Unit\\n\";\n    groceryList.forEach(section => {\n      section.items.forEach(item => {\n        // Clean up the item data and escape any commas\n        const sectionName = section.section.replace(/,/g, \" \");\n        const itemName = item.name ? item.name.replace(/,/g, \" \") : \"\";\n        const quantity = item.quantity || \"\";\n        const unit = item.unit ? item.unit.replace(/,/g, \" \") : \"\";\n        csvContent += `${sectionName},${itemName},${quantity},${unit}\\n`;\n      });\n    });\n\n    // Create a download link and trigger it\n    const encodedUri = encodeURI(\"data:text/csv;charset=utf-8,\" + csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", `grocery_list_${new Date().toISOString().split('T')[0]}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const savePlan = async () => {\n    if (!(planDetails !== null && planDetails !== void 0 && planDetails.isTemporary) || !location.state || !location.state.meals) {\n      return; // Only save if this is a temporary plan\n    }\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/weekly_plan\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: planDetails.name,\n          meals: location.state.meals\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save weekly plan\");\n      }\n      const data = await response.json();\n\n      // Update the plan details to reflect it's now saved\n      setPlanDetails({\n        ...planDetails,\n        id: data.id,\n        isTemporary: false\n      });\n      alert(\"Meal plan saved successfully!\");\n    } catch (err) {\n      console.error(\"Error saving plan:\", err);\n      alert(\"Error saving plan: \" + err.message);\n    }\n  };\n\n  // Fixed handleCheckboxChange function to work with grouped items\n  const handleCheckboxChange = (sectionIndex, groupKey) => {\n    console.log(`Toggling checkbox for section ${sectionIndex}, group ${groupKey}`);\n    setGroceryList(prevList => {\n      const newList = JSON.parse(JSON.stringify(prevList)); // Deep copy\n      const section = newList[sectionIndex];\n\n      // Find all items in this section that match the groupKey\n      const groupItems = section.items.filter(item => (item.normalized_name || item.name.toLowerCase()) === groupKey);\n\n      // Determine the new checked state (toggle based on current state)\n      const currentCheckedState = groupItems.length > 0 && groupItems[0].checked;\n      const newCheckedState = !currentCheckedState;\n\n      // Update all matching items\n      section.items.forEach(item => {\n        if ((item.normalized_name || item.name.toLowerCase()) === groupKey) {\n          item.checked = newCheckedState;\n        }\n      });\n      return newList;\n    });\n  };\n\n  // Go back to weekly planner\n  const goToWeeklyPlanner = () => {\n    navigate(\"/weekly-planner\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `grocery-list-container ${isPrinting ? 'printing' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grocery-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), planDetails && /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"plan-name\",\n        children: planDetails.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grocery-list-actions no-print\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: goToWeeklyPlanner,\n        children: \"\\u2190 Back to Planner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [planDetails && planDetails.isTemporary && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-plan-btn\",\n          onClick: savePlan,\n          children: \"Save Meal Plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"organize-btn\",\n          onClick: () => navigate('/store-organizer'),\n          children: \"Organize Sections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `reorder-btn ${isReordering ? 'active' : ''}`,\n          onClick: () => setIsReordering(!isReordering),\n          children: isReordering ? 'Done Reordering' : 'Reorder Sections'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"print-btn\",\n          onClick: printGroceryList,\n          children: \"Print List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"export-btn\",\n          onClick: exportGroceryListToCSV,\n          children: \"Export to CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `detail-toggle-btn ${detailedView ? 'active' : ''}`,\n          onClick: () => setDetailedView(!detailedView),\n          children: detailedView ? 'Simple View' : 'Detailed View'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), isReordering && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reordering-actions no-print\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag sections to reorder them\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-order-btn\",\n        onClick: saveNewSectionOrder,\n        children: \"Save New Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading grocery list...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }, this) : isReordering ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sections-container reordering\",\n      children: groceryList.map((section, sectionIndex) => section.items && section.items.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grocery-section reorderable\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"section-title\",\n          children: section.section\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-count\",\n          children: [section.items.length, \" items\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reorder-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"move-up-btn\",\n            disabled: sectionIndex === 0,\n            onClick: () => {\n              const newList = [...groceryList];\n              [newList[sectionIndex], newList[sectionIndex - 1]] = [newList[sectionIndex - 1], newList[sectionIndex]];\n              setGroceryList(newList);\n            },\n            children: \"\\u2191\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"move-down-btn\",\n            disabled: sectionIndex === groceryList.length - 1,\n            onClick: () => {\n              const newList = [...groceryList];\n              [newList[sectionIndex], newList[sectionIndex + 1]] = [newList[sectionIndex + 1], newList[sectionIndex]];\n              setGroceryList(newList);\n            },\n            children: \"\\u2193\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 19\n        }, this)]\n      }, section.section, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }, this) : null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sections-container\",\n      children: groceryList.map((section, sectionIndex) => section.items && section.items.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grocery-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"section-title\",\n          children: section.section\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"grocery-items\",\n          children: (() => {\n            // Group items by normalized name\n            const groupedItems = {};\n            section.items.forEach(item => {\n              const key = item.normalized_name || item.name.toLowerCase();\n              if (!groupedItems[key]) {\n                // Initialize the group with the first item\n                groupedItems[key] = {\n                  name: item.name,\n                  normalized_name: key,\n                  checked: item.checked || false,\n                  quantities: item.quantities || [],\n                  unit: item.unit || '',\n                  combined_quantity: item.combined_quantity || 0,\n                  formatted_combined: item.formatted_combined || '',\n                  has_multiple_units: item.has_multiple_units || false\n                };\n              } else {\n                // Update checked state (if any item is checked, the group is checked)\n                if (item.checked) {\n                  groupedItems[key].checked = true;\n                }\n\n                // Ensure quantities array exists and is populated\n                if (item.quantities && item.quantities.length) {\n                  if (!groupedItems[key].quantities) {\n                    groupedItems[key].quantities = [];\n                  }\n                  // Only add quantities that aren't already in the group\n                  item.quantities.forEach(qty => {\n                    if (!groupedItems[key].quantities.some(existingQty => existingQty.recipe_id === qty.recipe_id && existingQty.quantity_text === qty.quantity_text)) {\n                      groupedItems[key].quantities.push(qty);\n                    }\n                  });\n                }\n              }\n            });\n\n            // Render the grouped items\n            return Object.entries(groupedItems).map(([key, group], groupIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `grocery-item ${group.checked ? 'checked' : ''}`,\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"checkbox-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"item-checkbox no-print\",\n                  checked: group.checked || false,\n                  onChange: () => handleCheckboxChange(sectionIndex, key)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"checkmark no-print\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"item-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"item-name\",\n                    children: group.name || \"Unnamed Item\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 31\n                  }, this), detailedView ?\n                  /*#__PURE__*/\n                  // Detailed view: show all quantities with their sources\n                  _jsxDEV(\"div\", {\n                    className: \"item-quantities\",\n                    children: group.quantities && group.quantities.length > 0 ? group.quantities.map((qty, qIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"quantity-entry\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"quantity-value\",\n                        children: qty.quantity_text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 475,\n                        columnNumber: 41\n                      }, this), qty.source && /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"quantity-source\",\n                        children: [\"from \", qty.source]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 477,\n                        columnNumber: 43\n                      }, this)]\n                    }, qIndex, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 474,\n                      columnNumber: 39\n                    }, this)) :\n                    /*#__PURE__*/\n                    // Fallback if quantities array is missing or empty\n                    _jsxDEV(\"span\", {\n                      className: \"item-quantity\",\n                      children: group.formatted_combined || (group.combined_quantity && group.unit ? `${group.combined_quantity} ${group.unit}` : \"\")\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 483,\n                      columnNumber: 37\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 471,\n                    columnNumber: 33\n                  }, this) :\n                  /*#__PURE__*/\n                  // Simple view: show combined quantity\n                  _jsxDEV(\"span\", {\n                    className: \"item-quantity\",\n                    children: group.formatted_combined || (group.combined_quantity && group.unit ? `${group.combined_quantity} ${group.unit}` : \"\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 492,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 27\n              }, this)\n            }, `${section.section}-${key}-${groupIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 25\n            }, this));\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 19\n        }, this)]\n      }, section.section, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this) : null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n}\n_s(GroceryListView, \"c5zROXcby2XW3eHgbC0ZofLV4uA=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = GroceryListView;\nexport default GroceryListView;\nvar _c;\n$RefreshReg$(_c, \"GroceryListView\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","useNavigate","jsxDEV","_jsxDEV","GroceryListView","_s","planId","location","navigate","groceryList","setGroceryList","planDetails","setPlanDetails","loading","setLoading","error","setError","isPrinting","setIsPrinting","isReordering","setIsReordering","selectedStore","setSelectedStore","detailedView","setDetailedView","fetchGroceryListForPlan","state","meals","generateGroceryListFromMeals","name","planName","isTemporary","saveNewSectionOrder","storesResponse","fetch","storesData","json","length","alert","defaultStore","find","store","is_default","id","sectionIds","filter","section","sectionId","map","reorderSections","console","storeId","response","method","headers","body","JSON","stringify","sections","ok","Error","planResponse","planData","groceryResponse","groceryData","sortedList","grocery_list","sort","a","b","order","undefined","localeCompare","log","err","message","data","printGroceryList","setTimeout","window","print","exportGroceryListToCSV","csvContent","forEach","items","item","sectionName","replace","itemName","quantity","unit","encodedUri","encodeURI","link","document","createElement","setAttribute","Date","toISOString","split","appendChild","click","removeChild","savePlan","handleCheckboxChange","sectionIndex","groupKey","prevList","newList","parse","groupItems","normalized_name","toLowerCase","currentCheckedState","checked","newCheckedState","goToWeeklyPlanner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","groupedItems","key","quantities","combined_quantity","formatted_combined","has_multiple_units","qty","some","existingQty","recipe_id","quantity_text","push","Object","entries","group","groupIndex","type","onChange","qIndex","source","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/pages/GroceryListView.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nfunction GroceryListView() {\r\n  const { planId } = useParams(); // For viewing an existing saved plan's groceries\r\n  const location = useLocation(); // For previewing groceries without saving\r\n  const navigate = useNavigate();\r\n\r\n  const [groceryList, setGroceryList] = useState([]);\r\n  const [planDetails, setPlanDetails] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isPrinting, setIsPrinting] = useState(false);\r\n  const [isReordering, setIsReordering] = useState(false);\r\n  const [selectedStore, setSelectedStore] = useState(null);\r\n  const [detailedView, setDetailedView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (planId) {\r\n      // If planId is provided, fetch the grocery list for this saved plan\r\n      fetchGroceryListForPlan(planId);\r\n    } else if (location.state && location.state.meals) {\r\n      // If we have meals data in location state, generate grocery list without saving\r\n      generateGroceryListFromMeals(location.state.meals);\r\n      setPlanDetails({\r\n        name: location.state.planName || \"Unnamed Meal Plan\",\r\n        isTemporary: true\r\n      });\r\n    } else {\r\n      // No plan ID or meals data\r\n      setError(\"No meal plan data found.\");\r\n      setLoading(false);\r\n    }\r\n  }, [planId, location.state]);\r\n\r\n  const saveNewSectionOrder = async () => {\r\n    try {\r\n      if (!selectedStore) {\r\n        // Fetch store if not already selected\r\n        const storesResponse = await fetch('http://127.0.0.1:5000/api/stores');\r\n        const storesData = await storesResponse.json();\r\n\r\n        if (storesData.length === 0) {\r\n          alert('No stores available to save section order');\r\n          return;\r\n        }\r\n\r\n        const defaultStore = storesData.find(store => store.is_default) || storesData[0];\r\n        setSelectedStore(defaultStore.id);\r\n\r\n        // Pass the reordered section IDs\r\n        const sectionIds = groceryList\r\n          .filter(section => section.sectionId) // Only include sections with IDs\r\n          .map(section => section.sectionId);\r\n        await reorderSections(defaultStore.id, sectionIds);\r\n      } else {\r\n        const sectionIds = groceryList\r\n          .filter(section => section.sectionId) // Only include sections with IDs\r\n          .map(section => section.sectionId);\r\n        await reorderSections(selectedStore, sectionIds);\r\n      }\r\n\r\n      setIsReordering(false);\r\n      alert('Section order saved successfully!');\r\n    } catch (error) {\r\n      console.error('Error saving section order:', error);\r\n      alert('Failed to save section order');\r\n    }\r\n  };\r\n\r\n  // Function to make API call for reordering\r\n  const reorderSections = async (storeId, sectionIds) => {\r\n    if (!sectionIds || sectionIds.length === 0) {\r\n      alert('No sections to reorder');\r\n      return;\r\n    }\r\n\r\n    const response = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections/reorder`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        sections: sectionIds\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to save section order');\r\n    }\r\n  };\r\n\r\n  // Update the fetchGroceryListForPlan function\r\n  const fetchGroceryListForPlan = async (id) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // First, fetch plan details\r\n      const planResponse = await fetch(`http://127.0.0.1:5000/api/weekly_plan/${id}`);\r\n      if (!planResponse.ok) {\r\n        throw new Error(\"Failed to fetch plan details\");\r\n      }\r\n\r\n      const planData = await planResponse.json();\r\n      setPlanDetails({\r\n        ...planData,\r\n        isTemporary: false\r\n      });\r\n\r\n      // Then fetch grocery list\r\n      const groceryResponse = await fetch(`http://127.0.0.1:5000/api/grocery_list?weekly_plan_id=${id}`);\r\n      if (!groceryResponse.ok) {\r\n        throw new Error(\"Failed to fetch grocery list\");\r\n      }\r\n\r\n      const groceryData = await groceryResponse.json();\r\n\r\n      // Sort the grocery list by section order if available\r\n      const sortedList = groceryData.grocery_list.sort((a, b) => {\r\n        // Put Uncategorized at the end\r\n        if (a.section === \"Uncategorized\") return 1;\r\n        if (b.section === \"Uncategorized\") return -1;\r\n\r\n        // Sort by order if available\r\n        if (a.order !== undefined && b.order !== undefined) {\r\n          return a.order - b.order;\r\n        }\r\n\r\n        // Fall back to alphabetical order\r\n        return a.section.localeCompare(b.section);\r\n      });\r\n\r\n      setGroceryList(sortedList || []);\r\n      console.log(\"Grocery list data:\", sortedList);\r\n      setLoading(false);\r\n\r\n    } catch (err) {\r\n      console.error(\"Error fetching grocery list:\", err);\r\n      setError(err.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update the generateGroceryListFromMeals function similarly\r\n  const generateGroceryListFromMeals = async (meals) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Generate grocery list from meals array without saving the plan\r\n      const response = await fetch(`http://127.0.0.1:5000/api/generate_grocery_list`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          meals: meals\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to generate grocery list\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // Sort the grocery list by section order if available\r\n      const sortedList = data.grocery_list.sort((a, b) => {\r\n        // Put Uncategorized at the end\r\n        if (a.section === \"Uncategorized\") return 1;\r\n        if (b.section === \"Uncategorized\") return -1;\r\n\r\n        // Sort by order if available\r\n        if (a.order !== undefined && b.order !== undefined) {\r\n          return a.order - b.order;\r\n        }\r\n\r\n        // Fall back to alphabetical order\r\n        return a.section.localeCompare(b.section);\r\n      });\r\n\r\n      setGroceryList(sortedList || []);\r\n      setLoading(false);\r\n\r\n    } catch (err) {\r\n      console.error(\"Error generating grocery list:\", err);\r\n      setError(err.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const printGroceryList = () => {\r\n    setIsPrinting(true);\r\n    setTimeout(() => {\r\n      window.print();\r\n      setIsPrinting(false);\r\n    }, 100);\r\n  };\r\n\r\n  const exportGroceryListToCSV = () => {\r\n    // Create CSV content\r\n    let csvContent = \"Section,Item,Quantity,Unit\\n\";\r\n\r\n    groceryList.forEach(section => {\r\n      section.items.forEach(item => {\r\n        // Clean up the item data and escape any commas\r\n        const sectionName = section.section.replace(/,/g, \" \");\r\n        const itemName = item.name ? item.name.replace(/,/g, \" \") : \"\";\r\n        const quantity = item.quantity || \"\";\r\n        const unit = item.unit ? item.unit.replace(/,/g, \" \") : \"\";\r\n\r\n        csvContent += `${sectionName},${itemName},${quantity},${unit}\\n`;\r\n      });\r\n    });\r\n\r\n    // Create a download link and trigger it\r\n    const encodedUri = encodeURI(\"data:text/csv;charset=utf-8,\" + csvContent);\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", `grocery_list_${new Date().toISOString().split('T')[0]}.csv`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const savePlan = async () => {\r\n    if (!planDetails?.isTemporary || !location.state || !location.state.meals) {\r\n      return; // Only save if this is a temporary plan\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/weekly_plan\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: planDetails.name,\r\n          meals: location.state.meals\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to save weekly plan\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // Update the plan details to reflect it's now saved\r\n      setPlanDetails({\r\n        ...planDetails,\r\n        id: data.id,\r\n        isTemporary: false\r\n      });\r\n\r\n      alert(\"Meal plan saved successfully!\");\r\n\r\n    } catch (err) {\r\n      console.error(\"Error saving plan:\", err);\r\n      alert(\"Error saving plan: \" + err.message);\r\n    }\r\n  };\r\n\r\n  // Fixed handleCheckboxChange function to work with grouped items\r\n  const handleCheckboxChange = (sectionIndex, groupKey) => {\r\n    console.log(`Toggling checkbox for section ${sectionIndex}, group ${groupKey}`);\r\n\r\n    setGroceryList(prevList => {\r\n      const newList = JSON.parse(JSON.stringify(prevList)); // Deep copy\r\n      const section = newList[sectionIndex];\r\n      \r\n      // Find all items in this section that match the groupKey\r\n      const groupItems = section.items.filter(item => \r\n        (item.normalized_name || item.name.toLowerCase()) === groupKey\r\n      );\r\n      \r\n      // Determine the new checked state (toggle based on current state)\r\n      const currentCheckedState = groupItems.length > 0 && groupItems[0].checked;\r\n      const newCheckedState = !currentCheckedState;\r\n      \r\n      // Update all matching items\r\n      section.items.forEach(item => {\r\n        if ((item.normalized_name || item.name.toLowerCase()) === groupKey) {\r\n          item.checked = newCheckedState;\r\n        }\r\n      });\r\n      \r\n      return newList;\r\n    });\r\n  };\r\n\r\n  // Go back to weekly planner\r\n  const goToWeeklyPlanner = () => {\r\n    navigate(\"/weekly-planner\");\r\n  };\r\n\r\n  return (\r\n    <div className={`grocery-list-container ${isPrinting ? 'printing' : ''}`}>\r\n      <div className=\"grocery-list-header\">\r\n        <h1>Grocery List</h1>\r\n        {planDetails && (\r\n          <h2 className=\"plan-name\">{planDetails.name}</h2>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"grocery-list-actions no-print\">\r\n        <button className=\"back-btn\" onClick={goToWeeklyPlanner}>\r\n          ← Back to Planner\r\n        </button>\r\n\r\n        <div className=\"action-buttons\">\r\n          {planDetails && planDetails.isTemporary && (\r\n            <button className=\"save-plan-btn\" onClick={savePlan}>\r\n              Save Meal Plan\r\n            </button>\r\n          )}\r\n\r\n          <button\r\n            className=\"organize-btn\"\r\n            onClick={() => navigate('/store-organizer')}>\r\n            Organize Sections\r\n          </button>\r\n\r\n          {/* Add this new reorder button */}\r\n          <button\r\n            className={`reorder-btn ${isReordering ? 'active' : ''}`}\r\n            onClick={() => setIsReordering(!isReordering)}>\r\n            {isReordering ? 'Done Reordering' : 'Reorder Sections'}\r\n          </button>\r\n\r\n          <button className=\"print-btn\" onClick={printGroceryList}>\r\n            Print List\r\n          </button>\r\n\r\n          <button className=\"export-btn\" onClick={exportGroceryListToCSV}>\r\n            Export to CSV\r\n          </button>\r\n\r\n          <button\r\n            className={`detail-toggle-btn ${detailedView ? 'active' : ''}`}\r\n            onClick={() => setDetailedView(!detailedView)}\r\n          >\r\n            {detailedView ? 'Simple View' : 'Detailed View'}\r\n          </button>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      {/* Show save button when reordering */}\r\n      {isReordering && (\r\n        <div className=\"reordering-actions no-print\">\r\n          <p>Drag sections to reorder them</p>\r\n          <button className=\"save-order-btn\" onClick={saveNewSectionOrder}>\r\n            Save New Order\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {loading ? (\r\n        <div className=\"loading\">Loading grocery list...</div>\r\n      ) : error ? (\r\n        <div className=\"error-message\">{error}</div>\r\n      ) : (\r\n        isReordering ? (\r\n          <div className=\"sections-container reordering\">\r\n            {groceryList.map((section, sectionIndex) => (\r\n              section.items && section.items.length > 0 ? (\r\n                <div key={section.section} className=\"grocery-section reorderable\">\r\n                  <h3 className=\"section-title\">{section.section}</h3>\r\n                  <div className=\"item-count\">{section.items.length} items</div>\r\n                  <div className=\"reorder-buttons\">\r\n                    <button\r\n                      className=\"move-up-btn\"\r\n                      disabled={sectionIndex === 0}\r\n                      onClick={() => {\r\n                        const newList = [...groceryList];\r\n                        [newList[sectionIndex], newList[sectionIndex - 1]] =\r\n                          [newList[sectionIndex - 1], newList[sectionIndex]];\r\n                        setGroceryList(newList);\r\n                      }}\r\n                    >\r\n                      ↑\r\n                    </button>\r\n                    <button\r\n                      className=\"move-down-btn\"\r\n                      disabled={sectionIndex === groceryList.length - 1}\r\n                      onClick={() => {\r\n                        const newList = [...groceryList];\r\n                        [newList[sectionIndex], newList[sectionIndex + 1]] =\r\n                          [newList[sectionIndex + 1], newList[sectionIndex]];\r\n                        setGroceryList(newList);\r\n                      }}\r\n                    >\r\n                      ↓\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ) : null\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"sections-container\">\r\n            {groceryList.map((section, sectionIndex) => (\r\n              section.items && section.items.length > 0 ? (\r\n                <div key={section.section} className=\"grocery-section\">\r\n                  <h3 className=\"section-title\">{section.section}</h3>\r\n                  <ul className=\"grocery-items\">\r\n                    {/* Group items by normalized name for display */}\r\n                    {(() => {\r\n                      // Group items by normalized name\r\n                      const groupedItems = {};\r\n                      \r\n                      section.items.forEach(item => {\r\n                        const key = item.normalized_name || item.name.toLowerCase();\r\n                        \r\n                        if (!groupedItems[key]) {\r\n                          // Initialize the group with the first item\r\n                          groupedItems[key] = {\r\n                            name: item.name,\r\n                            normalized_name: key,\r\n                            checked: item.checked || false,\r\n                            quantities: item.quantities || [],\r\n                            unit: item.unit || '',\r\n                            combined_quantity: item.combined_quantity || 0,\r\n                            formatted_combined: item.formatted_combined || '',\r\n                            has_multiple_units: item.has_multiple_units || false\r\n                          };\r\n                        } else {\r\n                          // Update checked state (if any item is checked, the group is checked)\r\n                          if (item.checked) {\r\n                            groupedItems[key].checked = true;\r\n                          }\r\n                          \r\n                          // Ensure quantities array exists and is populated\r\n                          if (item.quantities && item.quantities.length) {\r\n                            if (!groupedItems[key].quantities) {\r\n                              groupedItems[key].quantities = [];\r\n                            }\r\n                            // Only add quantities that aren't already in the group\r\n                            item.quantities.forEach(qty => {\r\n                              if (!groupedItems[key].quantities.some(\r\n                                existingQty => existingQty.recipe_id === qty.recipe_id && \r\n                                              existingQty.quantity_text === qty.quantity_text)) {\r\n                                groupedItems[key].quantities.push(qty);\r\n                              }\r\n                            });\r\n                          }\r\n                        }\r\n                      });\r\n\r\n                      // Render the grouped items\r\n                      return Object.entries(groupedItems).map(([key, group], groupIndex) => (\r\n                        <li\r\n                          key={`${section.section}-${key}-${groupIndex}`}\r\n                          className={`grocery-item ${group.checked ? 'checked' : ''}`}\r\n                        >\r\n                          <label className=\"checkbox-container\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"item-checkbox no-print\"\r\n                              checked={group.checked || false}\r\n                              onChange={() => handleCheckboxChange(sectionIndex, key)}\r\n                            />\r\n                            <span className=\"checkmark no-print\"></span>\r\n                            <div className=\"item-details\">\r\n                              <span className=\"item-name\">\r\n                                {group.name || \"Unnamed Item\"}\r\n                              </span>\r\n\r\n                              {detailedView ? (\r\n                                // Detailed view: show all quantities with their sources\r\n                                <div className=\"item-quantities\">\r\n                                  {group.quantities && group.quantities.length > 0 ? (\r\n                                    group.quantities.map((qty, qIndex) => (\r\n                                      <div key={qIndex} className=\"quantity-entry\">\r\n                                        <span className=\"quantity-value\">{qty.quantity_text}</span>\r\n                                        {qty.source && (\r\n                                          <span className=\"quantity-source\">from {qty.source}</span>\r\n                                        )}\r\n                                      </div>\r\n                                    ))\r\n                                  ) : (\r\n                                    // Fallback if quantities array is missing or empty\r\n                                    <span className=\"item-quantity\">\r\n                                      {group.formatted_combined || \r\n                                       (group.combined_quantity && group.unit ? \r\n                                        `${group.combined_quantity} ${group.unit}` : \"\")}\r\n                                    </span>\r\n                                  )}\r\n                                </div>\r\n                              ) : (\r\n                                // Simple view: show combined quantity\r\n                                <span className=\"item-quantity\">\r\n                                  {group.formatted_combined || \r\n                                   (group.combined_quantity && group.unit ? \r\n                                    `${group.combined_quantity} ${group.unit}` : \"\")}\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </label>\r\n                        </li>\r\n                      ));\r\n                    })()}\r\n                  </ul>\r\n                </div>\r\n              ) : null\r\n            ))}\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GroceryListView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}