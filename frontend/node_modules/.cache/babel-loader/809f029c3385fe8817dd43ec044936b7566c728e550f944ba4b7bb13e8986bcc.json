{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\StoreOrganizer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// StoreOrganizer.js\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragOverlay } from \"@dnd-kit/core\";\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortableIngredient = ({\n  ingredient,\n  index\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: `ingredient-${ingredient.id}`,\n    data: {\n      ingredient\n    }\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.4 : 1\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    className: `ingredient-item ${isDragging ? 'dragging' : ''}`,\n    ...attributes,\n    ...listeners,\n    children: ingredient.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(SortableIngredient, \"iGm8Pp/8VGCO0ItME/dsmuAda4I=\", false, function () {\n  return [useSortable];\n});\n_c = SortableIngredient;\nconst StoreOrganizer = () => {\n  _s2();\n  var _sections$find, _sections$find2;\n  const navigate = useNavigate();\n  const [sections, setSections] = useState([]);\n  const [, setIngredients] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [activeId, setActiveId] = useState(null);\n  const [activeDragData, setActiveDragData] = useState(null);\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  const fetchSectionsRef = React.useRef(null);\n  const createDefaultStoreRef = React.useRef(null);\n  const fetchDataRef = React.useRef(null);\n\n  // Create wrapper functions\n  const fetchSections = useCallback(async storeId => {\n    var _fetchSectionsRef$cur;\n    return (_fetchSectionsRef$cur = fetchSectionsRef.current) === null || _fetchSectionsRef$cur === void 0 ? void 0 : _fetchSectionsRef$cur.call(fetchSectionsRef, storeId);\n  }, []);\n  const createDefaultStore = useCallback(async () => {\n    var _createDefaultStoreRe;\n    return (_createDefaultStoreRe = createDefaultStoreRef.current) === null || _createDefaultStoreRe === void 0 ? void 0 : _createDefaultStoreRe.call(createDefaultStoreRef);\n  }, []);\n  const fetchData = useCallback(async () => {\n    var _fetchDataRef$current;\n    return (_fetchDataRef$current = fetchDataRef.current) === null || _fetchDataRef$current === void 0 ? void 0 : _fetchDataRef$current.call(fetchDataRef);\n  }, []);\n\n  // Set up implementations with useEffect\n  useEffect(() => {\n    // Implement fetchSections\n    fetchSectionsRef.current = async storeId => {\n      try {\n        const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n        const sectionsData = await sectionsResponse.json();\n\n        // Initialize sections with empty ingredient arrays\n        const sectionsWithIngredients = sectionsData.map(section => ({\n          ...section,\n          ingredients: []\n        }));\n        setSections(sectionsWithIngredients);\n\n        // Fetch ingredients\n        const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\n        const ingredientsData = await ingredientsResponse.json();\n        if (ingredientsData.length === 0) {\n          setSections(sectionsWithIngredients);\n          setIngredients([]);\n          setLoading(false);\n          return; // Early return if no ingredients to process\n        }\n\n        // Fetch ingredient section mappings\n        const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n        const mappingsData = await mappingsResponse.json();\n\n        // Organize ingredients into sections\n        const sectionMap = {};\n        sectionsWithIngredients.forEach(section => {\n          sectionMap[section.id] = section;\n        });\n\n        // Add a default \"Uncategorized\" section\n        let uncategorizedSection = {\n          id: \"uncategorized\",\n          name: \"Uncategorized\",\n          ingredients: []\n        };\n\n        // Assign ingredients to their sections based on mappings\n        ingredientsData.forEach(ingredient => {\n          const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\n          if (mapping && sectionMap[mapping.section_id]) {\n            sectionMap[mapping.section_id].ingredients.push(ingredient);\n          } else {\n            uncategorizedSection.ingredients.push(ingredient);\n          }\n        });\n\n        // Update sections array with assigned ingredients\n        const updatedSections = [...Object.values(sectionMap)];\n\n        // Add uncategorized section if it has ingredients\n        if (uncategorizedSection.ingredients.length > 0) {\n          updatedSections.push(uncategorizedSection);\n        }\n        setSections(updatedSections);\n        setIngredients(ingredientsData);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching sections and ingredients:\", error);\n        setLoading(false);\n      }\n    };\n\n    // Implement createDefaultStore\n    createDefaultStoreRef.current = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: \"My Store\",\n            sections: [{\n              name: \"Produce\",\n              order: 0\n            }, {\n              name: \"Dairy\",\n              order: 1\n            }, {\n              name: \"Meat\",\n              order: 2\n            }, {\n              name: \"Bakery\",\n              order: 3\n            }, {\n              name: \"Frozen\",\n              order: 4\n            }, {\n              name: \"Canned Goods\",\n              order: 5\n            }, {\n              name: \"Uncategorized\",\n              order: 6\n            }]\n          })\n        });\n        const data = await response.json();\n        if (data.store_id) {\n          // Fetch stores again to get the new store\n          const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n          const storesData = await storesResponse.json();\n          setStores(storesData);\n\n          // Set the first store as selected\n          if (storesData.length > 0) {\n            setSelectedStore(storesData[0].id);\n            await fetchSections(storesData[0].id);\n          }\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error creating default store:\", error);\n        setLoading(false);\n      }\n    };\n\n    // Implement fetchData\n    fetchDataRef.current = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch stores\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n\n          // Fetch sections for the selected store\n          await fetchSections(storesData[0].id);\n        } else {\n          // Create a default store if none exists\n          await createDefaultStore();\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n  }, [fetchSections, createDefaultStore]);\n\n  // Call fetchData on component mount\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  const handleStoreChange = e => {\n    const storeId = e.target.value;\n    setSelectedStore(storeId);\n    fetchSections(storeId);\n  };\n  const addNewSection = () => {\n    if (!newSectionName.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n\n    // Create new section locally first\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      // Temporary ID until saved\n      name: newSectionName,\n      order: sections.length,\n      ingredients: []\n    };\n    setSections([...sections, newSection]);\n    setNewSectionName(\"\");\n  };\n  const removeSection = sectionId => {\n    // Get the section\n    const section = sections.find(s => s.id.toString() === sectionId.toString());\n    if (!section) return;\n\n    // If section has ingredients, move them to uncategorized\n    let uncategorized = sections.find(s => s.id === \"uncategorized\");\n    if (section.ingredients.length > 0) {\n      if (!uncategorized) {\n        // Create uncategorized section if it doesn't exist\n        uncategorized = {\n          id: \"uncategorized\",\n          name: \"Uncategorized\",\n          ingredients: []\n        };\n\n        // Add to sections\n        setSections([...sections.filter(s => s.id.toString() !== sectionId.toString()), uncategorized]);\n      } else {\n        // Update sections without the removed one\n        setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n      }\n\n      // Move ingredients to uncategorized\n      uncategorized.ingredients = [...uncategorized.ingredients, ...section.ingredients];\n    } else {\n      // Just remove the section\n      setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n    }\n  };\n  const saveOrganization = async () => {\n    try {\n      // Prepare the data\n      const sectionData = sections.map(section => ({\n        id: section.id === \"uncategorized\" ? null : section.id,\n        name: section.name,\n        ingredients: section.ingredients.map((ingredient, index) => ({\n          id: ingredient.id,\n          name: ingredient.name,\n          order: index\n        }))\n      }));\n\n      // Send to the backend\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save organization\");\n      }\n\n      // Show success message\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n  const handleDragStart = event => {\n    var _active$data$current;\n    const {\n      active\n    } = event;\n    setActiveId(active.id);\n    setActiveDragData(((_active$data$current = active.data.current) === null || _active$data$current === void 0 ? void 0 : _active$data$current.ingredient) || null);\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!active || !over) {\n      console.log(\"No active or over element in drag end\");\n      return;\n    }\n    console.log(\"Active ID:\", active.id);\n    console.log(\"Over ID:\", over.id);\n\n    // Find the containers (sections)\n    const activeContainer = findContainer(active.id);\n    const overContainer = findContainer(over.id);\n\n    // If we can't determine the containers, return\n    if (!activeContainer || !overContainer) {\n      console.log(\"Could not determine containers\");\n      return;\n    }\n    console.log(\"Active Container:\", activeContainer);\n    console.log(\"Over Container:\", overContainer);\n\n    // If dropping over a section directly (not an ingredient)\n    if (over.id.startsWith('section-')) {\n      console.log(\"Dropping directly onto a section\");\n\n      // Get the active ingredient\n      const activeIngredient = getIngredientById(active.id);\n      if (!activeIngredient) return;\n\n      // Remove from original section\n      const activeSectionId = activeContainer.replace('section-', '');\n      const overSectionId = over.id.replace('section-', '');\n      setSections(prev => {\n        const newSections = [...prev];\n\n        // Remove from original section\n        const activeSectionIndex = newSections.findIndex(s => s.id.toString() === activeSectionId);\n        if (activeSectionIndex !== -1) {\n          const activeIngredientId = active.id.replace('ingredient-', '');\n          newSections[activeSectionIndex].ingredients = newSections[activeSectionIndex].ingredients.filter(i => i.id.toString() !== activeIngredientId);\n        }\n\n        // Add to target section\n        const overSectionIndex = newSections.findIndex(s => s.id.toString() === overSectionId);\n        if (overSectionIndex !== -1) {\n          newSections[overSectionIndex].ingredients.push(activeIngredient);\n        }\n        return newSections;\n      });\n      setActiveId(null);\n      setActiveDragData(null);\n      return;\n    }\n\n    // Handle the case where we're moving an item within the same section\n    if (activeContainer === overContainer) {\n      console.log(\"Moving within the same section\");\n      const activeIndex = findIndex(activeContainer, active.id);\n      const overIndex = findIndex(overContainer, over.id);\n      console.log(\"Active Index:\", activeIndex);\n      console.log(\"Over Index:\", overIndex);\n      if (activeIndex !== overIndex) {\n        setSections(prev => {\n          const newSections = [...prev];\n          const sectionId = activeContainer.replace('section-', '');\n          const sectionIndex = newSections.findIndex(s => s.id.toString() === sectionId);\n          if (sectionIndex !== -1) {\n            const newIngredients = [...newSections[sectionIndex].ingredients];\n            newSections[sectionIndex].ingredients = arrayMove(newIngredients, activeIndex, overIndex);\n          }\n          return newSections;\n        });\n      }\n    }\n    // Handle the case where we're moving an item to a different section\n    else if (activeContainer !== overContainer) {\n      console.log(\"Moving to a different section\");\n      const activeIngredient = getIngredientById(active.id);\n      console.log(\"Active Ingredient:\", activeIngredient);\n      if (!activeIngredient) {\n        console.log(\"No active ingredient found\");\n        return;\n      }\n      setSections(prev => {\n        const newSections = [...prev];\n\n        // Remove from original section\n        const activeSectionId = activeContainer.replace('section-', '');\n        console.log(\"Active Section ID:\", activeSectionId);\n        const activeSectionIndex = newSections.findIndex(s => s.id.toString() === activeSectionId);\n        console.log(\"Active Section Index:\", activeSectionIndex);\n        if (activeSectionIndex !== -1) {\n          const activeIngredientId = active.id.replace('ingredient-', '');\n          console.log(\"Active Ingredient ID:\", activeIngredientId);\n          newSections[activeSectionIndex].ingredients = newSections[activeSectionIndex].ingredients.filter(i => i.id.toString() !== activeIngredientId);\n        }\n\n        // Add to new section\n        const overSectionId = overContainer.replace('section-', '');\n        console.log(\"Over Section ID:\", overSectionId);\n        const overSectionIndex = newSections.findIndex(s => s.id.toString() === overSectionId);\n        console.log(\"Over Section Index:\", overSectionIndex);\n        if (overSectionIndex !== -1) {\n          // Find the position to insert at\n          const overItemId = over.id;\n          const overItemIndex = findIndex(overContainer, overItemId);\n          console.log(\"Over Item Index:\", overItemIndex);\n\n          // Insert the dragged ingredient at the new position\n          const newIngredients = [...newSections[overSectionIndex].ingredients];\n          if (overItemIndex >= 0) {\n            newIngredients.splice(overItemIndex, 0, activeIngredient);\n          } else {\n            // If we can't find a valid index, just append to the end\n            newIngredients.push(activeIngredient);\n          }\n          newSections[overSectionIndex].ingredients = newIngredients;\n        }\n        return newSections;\n      });\n    }\n    setActiveId(null);\n    setActiveDragData(null);\n  };\n\n  // Helper function to find the container (section) an item belongs to\n  const findContainer = id => {\n    // Check if this is a section ID (sections are directly draggable too)\n    const sectionIdMatch = sections.find(section => `section-${section.id}` === id);\n    if (sectionIdMatch) {\n      return `section-${sectionIdMatch.id}`;\n    }\n\n    // Check if this is an ingredient ID\n    if (id.startsWith('ingredient-')) {\n      const ingredientId = id.replace('ingredient-', '');\n      for (const section of sections) {\n        const foundIngredient = section.ingredients.find(ingredient => ingredient.id.toString() === ingredientId);\n        if (foundIngredient) {\n          return `section-${section.id}`;\n        }\n      }\n    }\n    return null;\n  };\n\n  // Helper function to find an ingredient's index within a section\n  const findIndex = (containerId, itemId) => {\n    const sectionId = containerId.replace('section-', '');\n    const section = sections.find(s => s.id.toString() === sectionId);\n    if (!section) return -1;\n    if (itemId.startsWith('ingredient-')) {\n      const ingredientId = itemId.replace('ingredient-', '');\n      return section.ingredients.findIndex(i => i.id.toString() === ingredientId);\n    }\n    return -1;\n  };\n\n  // Helper function to get an ingredient by ID\n  const getIngredientById = id => {\n    if (id.startsWith('ingredient-')) {\n      const ingredientId = id.replace('ingredient-', '');\n      for (const section of sections) {\n        const ingredient = section.ingredients.find(i => i.id.toString() === ingredientId);\n        if (ingredient) return ingredient;\n      }\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: () => navigate('/grocery-list'),\n        children: \"\\u2190 Back to Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"store-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"store-select\",\n          children: \"Select Store:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"store-select\",\n          value: selectedStore || \"\",\n          onChange: handleStoreChange,\n          children: stores.map(store => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: store.id,\n            children: store.name\n          }, store.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-section-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newSectionName,\n          onChange: e => setNewSectionName(e.target.value),\n          placeholder: \"New Section Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewSection,\n          children: \"Add Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-organization-btn\",\n        onClick: saveOrganization,\n        children: \"Save Organization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"organizer-layout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredients-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"All Ingredients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n            id: \"all-ingredients\",\n            items: ((_sections$find = sections.find(s => s.id === \"uncategorized\")) === null || _sections$find === void 0 ? void 0 : _sections$find.ingredients.map(i => `ingredient-${i.id}`)) || [],\n            strategy: verticalListSortingStrategy,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ingredient-list all-ingredients\",\n              children: [(_sections$find2 = sections.find(s => s.id === \"uncategorized\")) === null || _sections$find2 === void 0 ? void 0 : _sections$find2.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(SortableIngredient, {\n                ingredient: ingredient,\n                index: index\n              }, ingredient.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 602,\n                columnNumber: 21\n              }, this)), !sections.find(s => s.id === \"uncategorized\") || sections.find(s => s.id === \"uncategorized\").ingredients.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"empty-ingredients\",\n                children: \"No uncategorized ingredients\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sections-container\",\n          children: sections.filter(section => section.id !== \"uncategorized\").map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-card\",\n            id: `section-${section.id}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: section.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 626,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"remove-section-btn\",\n                onClick: () => removeSection(section.id),\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n              id: `section-${section.id}`,\n              items: section.ingredients.map(i => `ingredient-${i.id}`),\n              strategy: verticalListSortingStrategy,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ingredient-list\",\n                children: section.ingredients.length > 0 ? section.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(SortableIngredient, {\n                  ingredient: ingredient,\n                  index: index\n                }, ingredient.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 643,\n                  columnNumber: 27\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"empty-section\",\n                  children: \"Drag ingredients here\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 650,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 19\n            }, this)]\n          }, section.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId && activeDragData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredient-item dragging\",\n          children: activeDragData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 15\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Drag and drop ingredients between sections to organize your grocery list.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 540,\n    columnNumber: 5\n  }, this);\n};\n_s2(StoreOrganizer, \"dNLe7/bZf1SttIRskf/++eyOqjo=\", false, function () {\n  return [useNavigate, useSensors, useSensor, useSensor];\n});\n_c2 = StoreOrganizer;\nexport default StoreOrganizer;\nvar _c, _c2;\n$RefreshReg$(_c, \"SortableIngredient\");\n$RefreshReg$(_c2, \"StoreOrganizer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","DragOverlay","arrayMove","SortableContext","sortableKeyboardCoordinates","useSortable","verticalListSortingStrategy","CSS","jsxDEV","_jsxDEV","SortableIngredient","ingredient","index","_s","attributes","listeners","setNodeRef","transform","transition","isDragging","id","data","style","Transform","toString","opacity","ref","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","StoreOrganizer","_s2","_sections$find","_sections$find2","navigate","sections","setSections","setIngredients","stores","setStores","selectedStore","setSelectedStore","newSectionName","setNewSectionName","loading","setLoading","saveSuccess","setSaveSuccess","activeId","setActiveId","activeDragData","setActiveDragData","sensors","coordinateGetter","fetchSectionsRef","useRef","createDefaultStoreRef","fetchDataRef","fetchSections","storeId","_fetchSectionsRef$cur","current","call","createDefaultStore","_createDefaultStoreRe","fetchData","_fetchDataRef$current","sectionsResponse","fetch","sectionsData","json","sectionsWithIngredients","map","section","ingredients","ingredientsResponse","ingredientsData","length","mappingsResponse","mappingsData","sectionMap","forEach","uncategorizedSection","mapping","find","m","ingredient_id","section_id","push","updatedSections","Object","values","error","console","response","method","headers","body","JSON","stringify","order","store_id","storesResponse","storesData","handleStoreChange","e","target","value","addNewSection","trim","alert","newSection","Date","now","removeSection","sectionId","s","uncategorized","filter","saveOrganization","sectionData","ok","Error","setTimeout","message","handleDragStart","event","_active$data$current","active","handleDragEnd","over","log","activeContainer","findContainer","overContainer","startsWith","activeIngredient","getIngredientById","activeSectionId","replace","overSectionId","prev","newSections","activeSectionIndex","findIndex","activeIngredientId","i","overSectionIndex","activeIndex","overIndex","sectionIndex","newIngredients","overItemId","overItemIndex","splice","sectionIdMatch","ingredientId","foundIngredient","containerId","itemId","onClick","htmlFor","onChange","store","type","placeholder","collisionDetection","onDragStart","onDragEnd","items","strategy","_c2","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/StoreOrganizer.js"],"sourcesContent":["// StoreOrganizer.js\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragOverlay\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n  verticalListSortingStrategy\r\n} from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\nconst SortableIngredient = ({ ingredient, index }) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging\r\n  } = useSortable({\r\n    id: `ingredient-${ingredient.id}`,\r\n    data: { ingredient }\r\n  });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    opacity: isDragging ? 0.4 : 1,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={`ingredient-item ${isDragging ? 'dragging' : ''}`}\r\n      {...attributes}\r\n      {...listeners}\r\n    >\r\n      {ingredient.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StoreOrganizer = () => {\r\n  const navigate = useNavigate();\r\n  const [sections, setSections] = useState([]);\r\n  const [, setIngredients] = useState([]);\r\n  const [stores, setStores] = useState([]);\r\n  const [selectedStore, setSelectedStore] = useState(null);\r\n  const [newSectionName, setNewSectionName] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  const [activeId, setActiveId] = useState(null);\r\n  const [activeDragData, setActiveDragData] = useState(null);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  const fetchSectionsRef = React.useRef(null);\r\n  const createDefaultStoreRef = React.useRef(null);\r\n  const fetchDataRef = React.useRef(null);\r\n\r\n  // Create wrapper functions\r\n  const fetchSections = useCallback(async (storeId) => {\r\n    return fetchSectionsRef.current?.(storeId);\r\n  }, []);\r\n\r\n  const createDefaultStore = useCallback(async () => {\r\n    return createDefaultStoreRef.current?.();\r\n  }, []);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    return fetchDataRef.current?.();\r\n  }, []);\r\n\r\n  // Set up implementations with useEffect\r\n  useEffect(() => {\r\n    // Implement fetchSections\r\n    fetchSectionsRef.current = async (storeId) => {\r\n      try {\r\n        const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n        const sectionsData = await sectionsResponse.json();\r\n\r\n        // Initialize sections with empty ingredient arrays\r\n        const sectionsWithIngredients = sectionsData.map(section => ({\r\n          ...section,\r\n          ingredients: []\r\n        }));\r\n\r\n        setSections(sectionsWithIngredients);\r\n\r\n        // Fetch ingredients\r\n        const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\r\n        const ingredientsData = await ingredientsResponse.json();\r\n\r\n        if (ingredientsData.length === 0) {\r\n          setSections(sectionsWithIngredients);\r\n          setIngredients([]);\r\n          setLoading(false);\r\n          return; // Early return if no ingredients to process\r\n        }\r\n\r\n        // Fetch ingredient section mappings\r\n        const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n        const mappingsData = await mappingsResponse.json();\r\n\r\n        // Organize ingredients into sections\r\n        const sectionMap = {};\r\n        sectionsWithIngredients.forEach(section => {\r\n          sectionMap[section.id] = section;\r\n        });\r\n\r\n        // Add a default \"Uncategorized\" section\r\n        let uncategorizedSection = {\r\n          id: \"uncategorized\",\r\n          name: \"Uncategorized\",\r\n          ingredients: []\r\n        };\r\n\r\n        // Assign ingredients to their sections based on mappings\r\n        ingredientsData.forEach(ingredient => {\r\n          const mapping = mappingsData.find(m => m.ingredient_id === ingredient.id);\r\n\r\n          if (mapping && sectionMap[mapping.section_id]) {\r\n            sectionMap[mapping.section_id].ingredients.push(ingredient);\r\n          } else {\r\n            uncategorizedSection.ingredients.push(ingredient);\r\n          }\r\n        });\r\n\r\n        // Update sections array with assigned ingredients\r\n        const updatedSections = [...Object.values(sectionMap)];\r\n\r\n        // Add uncategorized section if it has ingredients\r\n        if (uncategorizedSection.ingredients.length > 0) {\r\n          updatedSections.push(uncategorizedSection);\r\n        }\r\n\r\n        setSections(updatedSections);\r\n        setIngredients(ingredientsData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching sections and ingredients:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Implement createDefaultStore\r\n    createDefaultStoreRef.current = async () => {\r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            name: \"My Store\",\r\n            sections: [\r\n              { name: \"Produce\", order: 0 },\r\n              { name: \"Dairy\", order: 1 },\r\n              { name: \"Meat\", order: 2 },\r\n              { name: \"Bakery\", order: 3 },\r\n              { name: \"Frozen\", order: 4 },\r\n              { name: \"Canned Goods\", order: 5 },\r\n              { name: \"Uncategorized\", order: 6 }\r\n            ]\r\n          })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.store_id) {\r\n          // Fetch stores again to get the new store\r\n          const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n          const storesData = await storesResponse.json();\r\n          setStores(storesData);\r\n\r\n          // Set the first store as selected\r\n          if (storesData.length > 0) {\r\n            setSelectedStore(storesData[0].id);\r\n            await fetchSections(storesData[0].id);\r\n          }\r\n        }\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error creating default store:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Implement fetchData\r\n    fetchDataRef.current = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch stores\r\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n        const storesData = await storesResponse.json();\r\n        setStores(storesData);\r\n\r\n        if (storesData.length > 0) {\r\n          setSelectedStore(storesData[0].id);\r\n\r\n          // Fetch sections for the selected store\r\n          await fetchSections(storesData[0].id);\r\n        } else {\r\n          // Create a default store if none exists\r\n          await createDefaultStore();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n  }, [fetchSections, createDefaultStore]);\r\n\r\n  // Call fetchData on component mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  const handleStoreChange = (e) => {\r\n    const storeId = e.target.value;\r\n    setSelectedStore(storeId);\r\n    fetchSections(storeId);\r\n  };\r\n\r\n  const addNewSection = () => {\r\n    if (!newSectionName.trim()) {\r\n      alert(\"Please enter a section name\");\r\n      return;\r\n    }\r\n\r\n    // Create new section locally first\r\n    const newSection = {\r\n      id: `temp-${Date.now()}`, // Temporary ID until saved\r\n      name: newSectionName,\r\n      order: sections.length,\r\n      ingredients: []\r\n    };\r\n\r\n    setSections([...sections, newSection]);\r\n    setNewSectionName(\"\");\r\n  };\r\n\r\n  const removeSection = (sectionId) => {\r\n    // Get the section\r\n    const section = sections.find(s => s.id.toString() === sectionId.toString());\r\n\r\n    if (!section) return;\r\n\r\n    // If section has ingredients, move them to uncategorized\r\n    let uncategorized = sections.find(s => s.id === \"uncategorized\");\r\n\r\n    if (section.ingredients.length > 0) {\r\n      if (!uncategorized) {\r\n        // Create uncategorized section if it doesn't exist\r\n        uncategorized = {\r\n          id: \"uncategorized\",\r\n          name: \"Uncategorized\",\r\n          ingredients: []\r\n        };\r\n\r\n        // Add to sections\r\n        setSections([...sections.filter(s => s.id.toString() !== sectionId.toString()), uncategorized]);\r\n      } else {\r\n        // Update sections without the removed one\r\n        setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n      }\r\n\r\n      // Move ingredients to uncategorized\r\n      uncategorized.ingredients = [...uncategorized.ingredients, ...section.ingredients];\r\n    } else {\r\n      // Just remove the section\r\n      setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n    }\r\n  };\r\n\r\n  const saveOrganization = async () => {\r\n    try {\r\n      // Prepare the data\r\n      const sectionData = sections.map(section => ({\r\n        id: section.id === \"uncategorized\" ? null : section.id,\r\n        name: section.name,\r\n        ingredients: section.ingredients.map((ingredient, index) => ({\r\n          id: ingredient.id,\r\n          name: ingredient.name,\r\n          order: index\r\n        }))\r\n      }));\r\n\r\n      // Send to the backend\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          store_id: selectedStore,\r\n          sections: sectionData\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to save organization\");\r\n      }\r\n\r\n      // Show success message\r\n      setSaveSuccess(true);\r\n      setTimeout(() => setSaveSuccess(false), 3000);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving organization:\", error);\r\n      alert(\"Error saving organization: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const handleDragStart = (event) => {\r\n    const { active } = event;\r\n    setActiveId(active.id);\r\n    setActiveDragData(active.data.current?.ingredient || null);\r\n  };\r\n\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (!active || !over) {\r\n      console.log(\"No active or over element in drag end\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Active ID:\", active.id);\r\n    console.log(\"Over ID:\", over.id);\r\n\r\n    // Find the containers (sections)\r\n    const activeContainer = findContainer(active.id);\r\n    const overContainer = findContainer(over.id);\r\n\r\n    // If we can't determine the containers, return\r\n    if (!activeContainer || !overContainer) {\r\n      console.log(\"Could not determine containers\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Active Container:\", activeContainer);\r\n    console.log(\"Over Container:\", overContainer);\r\n\r\n    // If dropping over a section directly (not an ingredient)\r\n    if (over.id.startsWith('section-')) {\r\n      console.log(\"Dropping directly onto a section\");\r\n\r\n      // Get the active ingredient\r\n      const activeIngredient = getIngredientById(active.id);\r\n      if (!activeIngredient) return;\r\n\r\n      // Remove from original section\r\n      const activeSectionId = activeContainer.replace('section-', '');\r\n      const overSectionId = over.id.replace('section-', '');\r\n\r\n      setSections(prev => {\r\n        const newSections = [...prev];\r\n\r\n        // Remove from original section\r\n        const activeSectionIndex = newSections.findIndex(s => s.id.toString() === activeSectionId);\r\n        if (activeSectionIndex !== -1) {\r\n          const activeIngredientId = active.id.replace('ingredient-', '');\r\n          newSections[activeSectionIndex].ingredients = newSections[activeSectionIndex].ingredients.filter(\r\n            i => i.id.toString() !== activeIngredientId\r\n          );\r\n        }\r\n\r\n        // Add to target section\r\n        const overSectionIndex = newSections.findIndex(s => s.id.toString() === overSectionId);\r\n        if (overSectionIndex !== -1) {\r\n          newSections[overSectionIndex].ingredients.push(activeIngredient);\r\n        }\r\n\r\n        return newSections;\r\n      });\r\n\r\n      setActiveId(null);\r\n      setActiveDragData(null);\r\n      return;\r\n    }\r\n\r\n    // Handle the case where we're moving an item within the same section\r\n    if (activeContainer === overContainer) {\r\n      console.log(\"Moving within the same section\");\r\n      const activeIndex = findIndex(activeContainer, active.id);\r\n      const overIndex = findIndex(overContainer, over.id);\r\n\r\n      console.log(\"Active Index:\", activeIndex);\r\n      console.log(\"Over Index:\", overIndex);\r\n\r\n      if (activeIndex !== overIndex) {\r\n        setSections(prev => {\r\n          const newSections = [...prev];\r\n          const sectionId = activeContainer.replace('section-', '');\r\n          const sectionIndex = newSections.findIndex(s => s.id.toString() === sectionId);\r\n\r\n          if (sectionIndex !== -1) {\r\n            const newIngredients = [...newSections[sectionIndex].ingredients];\r\n            newSections[sectionIndex].ingredients = arrayMove(\r\n              newIngredients,\r\n              activeIndex,\r\n              overIndex\r\n            );\r\n          }\r\n          return newSections;\r\n        });\r\n      }\r\n    }\r\n    // Handle the case where we're moving an item to a different section\r\n    else if (activeContainer !== overContainer) {\r\n      console.log(\"Moving to a different section\");\r\n      const activeIngredient = getIngredientById(active.id);\r\n      console.log(\"Active Ingredient:\", activeIngredient);\r\n\r\n      if (!activeIngredient) {\r\n        console.log(\"No active ingredient found\");\r\n        return;\r\n      }\r\n\r\n      setSections(prev => {\r\n        const newSections = [...prev];\r\n\r\n        // Remove from original section\r\n        const activeSectionId = activeContainer.replace('section-', '');\r\n        console.log(\"Active Section ID:\", activeSectionId);\r\n        const activeSectionIndex = newSections.findIndex(s => s.id.toString() === activeSectionId);\r\n        console.log(\"Active Section Index:\", activeSectionIndex);\r\n\r\n        if (activeSectionIndex !== -1) {\r\n          const activeIngredientId = active.id.replace('ingredient-', '');\r\n          console.log(\"Active Ingredient ID:\", activeIngredientId);\r\n          newSections[activeSectionIndex].ingredients = newSections[activeSectionIndex].ingredients.filter(\r\n            i => i.id.toString() !== activeIngredientId\r\n          );\r\n        }\r\n\r\n        // Add to new section\r\n        const overSectionId = overContainer.replace('section-', '');\r\n        console.log(\"Over Section ID:\", overSectionId);\r\n        const overSectionIndex = newSections.findIndex(s => s.id.toString() === overSectionId);\r\n        console.log(\"Over Section Index:\", overSectionIndex);\r\n\r\n        if (overSectionIndex !== -1) {\r\n          // Find the position to insert at\r\n          const overItemId = over.id;\r\n          const overItemIndex = findIndex(overContainer, overItemId);\r\n          console.log(\"Over Item Index:\", overItemIndex);\r\n\r\n          // Insert the dragged ingredient at the new position\r\n          const newIngredients = [...newSections[overSectionIndex].ingredients];\r\n          if (overItemIndex >= 0) {\r\n            newIngredients.splice(overItemIndex, 0, activeIngredient);\r\n          } else {\r\n            // If we can't find a valid index, just append to the end\r\n            newIngredients.push(activeIngredient);\r\n          }\r\n          newSections[overSectionIndex].ingredients = newIngredients;\r\n        }\r\n\r\n        return newSections;\r\n      });\r\n    }\r\n\r\n    setActiveId(null);\r\n    setActiveDragData(null);\r\n  };\r\n\r\n  // Helper function to find the container (section) an item belongs to\r\n  const findContainer = (id) => {\r\n    // Check if this is a section ID (sections are directly draggable too)\r\n    const sectionIdMatch = sections.find(section =>\r\n      `section-${section.id}` === id\r\n    );\r\n    if (sectionIdMatch) {\r\n      return `section-${sectionIdMatch.id}`;\r\n    }\r\n\r\n    // Check if this is an ingredient ID\r\n    if (id.startsWith('ingredient-')) {\r\n      const ingredientId = id.replace('ingredient-', '');\r\n      for (const section of sections) {\r\n        const foundIngredient = section.ingredients.find(ingredient =>\r\n          ingredient.id.toString() === ingredientId\r\n        );\r\n        if (foundIngredient) {\r\n          return `section-${section.id}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // Helper function to find an ingredient's index within a section\r\n  const findIndex = (containerId, itemId) => {\r\n    const sectionId = containerId.replace('section-', '');\r\n    const section = sections.find(s => s.id.toString() === sectionId);\r\n    if (!section) return -1;\r\n\r\n    if (itemId.startsWith('ingredient-')) {\r\n      const ingredientId = itemId.replace('ingredient-', '');\r\n      return section.ingredients.findIndex(i => i.id.toString() === ingredientId);\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  // Helper function to get an ingredient by ID\r\n  const getIngredientById = (id) => {\r\n    if (id.startsWith('ingredient-')) {\r\n      const ingredientId = id.replace('ingredient-', '');\r\n      for (const section of sections) {\r\n        const ingredient = section.ingredients.find(i => i.id.toString() === ingredientId);\r\n        if (ingredient) return ingredient;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"store-organizer-container\">\r\n      <div className=\"store-organizer-header\">\r\n        <h1>Store Section Organizer</h1>\r\n        {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n      </div>\r\n\r\n      <div className=\"store-organizer-controls\">\r\n        <button\r\n          className=\"back-btn\"\r\n          onClick={() => navigate('/grocery-list')}\r\n        >\r\n          ← Back to Grocery List\r\n        </button>\r\n\r\n        <div className=\"store-selector\">\r\n          <label htmlFor=\"store-select\">Select Store:</label>\r\n          <select\r\n            id=\"store-select\"\r\n            value={selectedStore || \"\"}\r\n            onChange={handleStoreChange}\r\n          >\r\n            {stores.map(store => (\r\n              <option key={store.id} value={store.id}>{store.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"add-section-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={newSectionName}\r\n            onChange={(e) => setNewSectionName(e.target.value)}\r\n            placeholder=\"New Section Name\"\r\n          />\r\n          <button onClick={addNewSection}>Add Section</button>\r\n        </div>\r\n\r\n        <button className=\"save-organization-btn\" onClick={saveOrganization}>\r\n          Save Organization\r\n        </button>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div className=\"loading\">Loading sections and ingredients...</div>\r\n      ) : (\r\n        <DndContext\r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragStart={handleDragStart}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <div className=\"organizer-layout\">\r\n            <div className=\"ingredients-panel\">\r\n              <h2>All Ingredients</h2>\r\n              <SortableContext\r\n                id=\"all-ingredients\"\r\n                items={sections\r\n                  .find(s => s.id === \"uncategorized\")?.ingredients.map(i => `ingredient-${i.id}`) || []}\r\n                strategy={verticalListSortingStrategy}\r\n              >\r\n                <div className=\"ingredient-list all-ingredients\">\r\n                  {sections.find(s => s.id === \"uncategorized\")?.ingredients.map((ingredient, index) => (\r\n                    <SortableIngredient\r\n                      key={ingredient.id}\r\n                      ingredient={ingredient}\r\n                      index={index}\r\n                    />\r\n                  ))}\r\n                  {!sections.find(s => s.id === \"uncategorized\") ||\r\n                    sections.find(s => s.id === \"uncategorized\").ingredients.length === 0 ? (\r\n                    <div className=\"empty-ingredients\">\r\n                      No uncategorized ingredients\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </SortableContext>\r\n            </div>\r\n\r\n            <div className=\"sections-container\">\r\n              {sections.filter(section => section.id !== \"uncategorized\").map(section => (\r\n                <div\r\n                  className=\"section-card\"\r\n                  key={section.id}\r\n                  id={`section-${section.id}`}\r\n                >\r\n                  <div className=\"section-header\">\r\n                    <h3>{section.name}</h3>\r\n                    <button\r\n                      className=\"remove-section-btn\"\r\n                      onClick={() => removeSection(section.id)}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  </div>\r\n\r\n                  <SortableContext\r\n                    id={`section-${section.id}`}\r\n                    items={section.ingredients.map(i => `ingredient-${i.id}`)}\r\n                    strategy={verticalListSortingStrategy}\r\n                  >\r\n                    <div className=\"ingredient-list\">\r\n                      {section.ingredients.length > 0 ? (\r\n                        section.ingredients.map((ingredient, index) => (\r\n                          <SortableIngredient\r\n                            key={ingredient.id}\r\n                            ingredient={ingredient}\r\n                            index={index}\r\n                          />\r\n                        ))\r\n                      ) : (\r\n                        <div className=\"empty-section\">\r\n                          Drag ingredients here\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </SortableContext>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <DragOverlay>\r\n            {activeId && activeDragData ? (\r\n              <div className=\"ingredient-item dragging\">\r\n                {activeDragData.name}\r\n              </div>\r\n            ) : null}\r\n          </DragOverlay>\r\n        </DndContext>\r\n      )}\r\n\r\n      <div className=\"organizer-tip\">\r\n        <p>Tip: Drag and drop ingredients between sections to organize your grocery list.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoreOrganizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}