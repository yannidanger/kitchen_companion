{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\StoreOrganizerFixed.js\",\n  _s = $RefreshSig$();\n// StoreOrganizerSimple.js\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StoreOrganizerSimple = () => {\n  _s();\n  const navigate = useNavigate();\n  const [sections, setSections] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n\n  // Track which section an ingredient belongs to\n  const [ingredientSections, setIngredientSections] = useState({});\n  // Track which ingredients are selected for move operations\n  const [selectedIngredients, setSelectedIngredients] = useState({});\n  const [targetSection, setTargetSection] = useState(\"\");\n\n  // Add this function to your StoreOrganizerSimple component\n  const debugIngredientMove = () => {\n    console.log(\"=== DEBUG INGREDIENT MOVE ===\");\n    console.log(\"Current ingredient sections mapping:\", ingredientSections);\n    console.log(\"Selected ingredients:\", selectedIngredients);\n    console.log(\"Target section:\", targetSection);\n\n    // Check what ingredients should be in each section\n    sections.forEach(section => {\n      const sectionIngredients = ingredients.filter(ing => ingredientSections[ing.id] === section.id);\n      console.log(`Section ${section.name} (${section.id}) should have:`, sectionIngredients.map(ing => ing.name));\n    });\n\n    // Check uncategorized\n    const uncategorized = ingredients.filter(ing => !ingredientSections[ing.id]);\n    console.log(\"Uncategorized should have:\", uncategorized.map(ing => ing.name));\n  };\n\n  // Load all data\n  useEffect(() => {\n    const fetchStores = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await response.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n          fetchStoreData(storesData[0].id);\n        } else {\n          await createDefaultStore();\n        }\n      } catch (error) {\n        console.error(\"Error fetching stores:\", error);\n        setLoading(false);\n      }\n    };\n    fetchStores();\n  }, []);\n\n  // Fetch all data for a store\n  const fetchStoreData = async storeId => {\n    try {\n      // Get sections\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n      const sectionsData = await sectionsResponse.json();\n      setSections(sectionsData);\n\n      // Get all ingredients\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\n      const ingredientsData = await ingredientsResponse.json();\n      setIngredients(ingredientsData);\n\n      // Get section mappings\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n      const mappingsData = await mappingsResponse.json();\n\n      // Create a map of ingredient ID to section ID\n      const sectionMap = {};\n      mappingsData.forEach(mapping => {\n        sectionMap[mapping.ingredient_id] = mapping.section_id;\n      });\n      setIngredientSections(sectionMap);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching store data:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Create a default store if needed\n  const createDefaultStore = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: \"My Store\",\n          sections: [{\n            name: \"Produce\",\n            order: 0\n          }, {\n            name: \"Dairy\",\n            order: 1\n          }, {\n            name: \"Meat\",\n            order: 2\n          }, {\n            name: \"Bakery\",\n            order: 3\n          }, {\n            name: \"Frozen\",\n            order: 4\n          }, {\n            name: \"Canned Goods\",\n            order: 5\n          }, {\n            name: \"Uncategorized\",\n            order: 6\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.store_id) {\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n          fetchStoreData(storesData[0].id);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error creating default store:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Handle store selection change\n  const handleStoreChange = e => {\n    const storeId = e.target.value;\n    setSelectedStore(storeId);\n    fetchStoreData(storeId);\n  };\n\n  // Add a new section\n  const addNewSection = () => {\n    if (!newSectionName.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n\n    // We'll add it to the UI immediately, but it won't have an ID until it's saved\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      name: newSectionName,\n      order: sections.length\n    };\n    setSections([...sections, newSection]);\n    setNewSectionName(\"\");\n  };\n\n  // Remove a section\n  const removeSection = sectionId => {\n    // Remove the section\n    setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n\n    // Update ingredient mappings\n    const updatedSectionMap = {\n      ...ingredientSections\n    };\n\n    // Remove all mappings to this section\n    Object.keys(updatedSectionMap).forEach(ingredientId => {\n      if (updatedSectionMap[ingredientId].toString() === sectionId.toString()) {\n        delete updatedSectionMap[ingredientId];\n      }\n    });\n    setIngredientSections(updatedSectionMap);\n  };\n\n  // Toggle ingredient selection\n  const toggleIngredientSelection = ingredientId => {\n    setSelectedIngredients(prev => ({\n      ...prev,\n      [ingredientId]: !prev[ingredientId]\n    }));\n  };\n\n  // Select all ingredients in a section\n  const selectAllInSection = sectionId => {\n    const newSelected = {\n      ...selectedIngredients\n    };\n    ingredients.forEach(ingredient => {\n      if (ingredientSections[ingredient.id] === sectionId) {\n        newSelected[ingredient.id] = true;\n      }\n    });\n    setSelectedIngredients(newSelected);\n  };\n\n  // Clear all selections\n  const clearSelections = () => {\n    setSelectedIngredients({});\n  };\n  const moveSelectedIngredients = () => {\n    if (!targetSection) {\n      alert(\"Please select a target section\");\n      return;\n    }\n    const selectedIds = Object.keys(selectedIngredients).filter(id => selectedIngredients[id]);\n    if (selectedIds.length === 0) {\n      alert(\"Please select at least one ingredient to move\");\n      return;\n    }\n    console.log(\"Moving ingredients:\", selectedIds);\n    console.log(\"To section:\", targetSection);\n\n    // Create a new mapping object (always create a new object for state updates)\n    const updatedSectionMap = {\n      ...ingredientSections\n    };\n    selectedIds.forEach(ingredientId => {\n      updatedSectionMap[ingredientId] = targetSection;\n    });\n\n    // Update the state\n    setIngredientSections(updatedSectionMap);\n\n    // Clear selections\n    setSelectedIngredients({});\n    setTargetSection(\"\");\n  };\n\n  // Save organization to backend\n  const saveOrganization = async () => {\n    try {\n      // Convert our data structure to the format expected by the API\n      const sectionData = sections.map(section => {\n        // Get ingredients for this section\n        const sectionIngredients = ingredients.filter(ing => ingredientSections[ing.id] === section.id);\n        return {\n          id: section.id.toString().startsWith('temp-') ? null : section.id,\n          name: section.name,\n          ingredients: sectionIngredients.map((ing, index) => ({\n            id: ing.id,\n            name: ing.name,\n            order: index\n          }))\n        };\n      });\n\n      // Get uncategorized ingredients (those without a section mapping)\n      const uncategorizedIngredients = ingredients.filter(ing => !ingredientSections[ing.id]);\n      if (uncategorizedIngredients.length > 0) {\n        sectionData.push({\n          id: null,\n          name: \"Uncategorized\",\n          ingredients: uncategorizedIngredients.map((ing, index) => ({\n            id: ing.id,\n            name: ing.name,\n            order: index\n          }))\n        });\n      }\n\n      // Send to API\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save organization\");\n      }\n\n      // Show success message\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n\n      // Refresh data to get server-assigned IDs\n      fetchStoreData(selectedStore);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n\n  // Get ingredients for a specific section\n  // Get ingredients for a specific section\n  const getIngredientsForSection = sectionId => {\n    // Log for debugging\n    console.log(`Getting ingredients for section ${sectionId}`, ingredients.filter(ing => ingredientSections[ing.id] === sectionId).map(i => i.name));\n\n    // IMPORTANT: Convert both to strings for comparison\n    return ingredients.filter(ing => String(ingredientSections[ing.id]) === String(sectionId));\n  };\n\n  // Get uncategorized ingredients \n  const getUncategorizedIngredients = () => {\n    return ingredients.filter(ing => !ingredientSections[ing.id]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: debugIngredientMove,\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Debug Move\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: () => navigate('/grocery-list'),\n        children: \"\\u2190 Back to Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"store-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"store-select\",\n          children: \"Select Store:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"store-select\",\n          value: selectedStore || \"\",\n          onChange: handleStoreChange,\n          children: stores.map(store => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: store.id,\n            children: store.name\n          }, store.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-section-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newSectionName,\n          onChange: e => setNewSectionName(e.target.value),\n          placeholder: \"New Section Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewSection,\n          children: \"Add Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-organization-btn\",\n        onClick: saveOrganization,\n        children: \"Save Organization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simple-organizer-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movement-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move Selected Ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: targetSection,\n            onChange: e => setTargetSection(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Target Section\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 33\n            }, this), sections.map(section => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: section.id,\n              children: section.name\n            }, section.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: moveSelectedIngredients,\n            disabled: !targetSection,\n            children: \"Move Selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearSelections,\n            children: \"Clear Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Uncategorized\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => selectAllInSection(null),\n              children: \"Select All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ingredient-list\",\n            children: getUncategorizedIngredients().length > 0 ? getUncategorizedIngredients().map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`,\n              onClick: () => toggleIngredientSelection(ingredient.id),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: !!selectedIngredients[ingredient.id],\n                onChange: () => toggleIngredientSelection(ingredient.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: ingredient.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 45\n              }, this)]\n            }, ingredient.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 41\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-section\",\n              children: \"No uncategorized ingredients\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 25\n        }, this), sections.map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: section.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => selectAllInSection(section.id),\n                children: \"Select All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"remove-section-btn\",\n                onClick: () => removeSection(section.id),\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ingredient-list\",\n            children: getIngredientsForSection(section.id).length > 0 ? getIngredientsForSection(section.id).map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`,\n              onClick: () => toggleIngredientSelection(ingredient.id),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: !!selectedIngredients[ingredient.id],\n                onChange: () => toggleIngredientSelection(ingredient.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: ingredient.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 49\n              }, this)]\n            }, ingredient.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 45\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-section\",\n              children: \"No ingredients in this section\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 33\n          }, this)]\n        }, section.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Check the ingredients you want to move, select a target section, and click \\\"Move Selected\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 9\n  }, this);\n};\n_s(StoreOrganizerSimple, \"zINns1D/g08YrP2OB0FQiSSJQEg=\", false, function () {\n  return [useNavigate];\n});\n_c = StoreOrganizerSimple;\nexport default StoreOrganizerSimple;\nvar _c;\n$RefreshReg$(_c, \"StoreOrganizerSimple\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","StoreOrganizerSimple","_s","navigate","sections","setSections","ingredients","setIngredients","stores","setStores","selectedStore","setSelectedStore","newSectionName","setNewSectionName","loading","setLoading","saveSuccess","setSaveSuccess","ingredientSections","setIngredientSections","selectedIngredients","setSelectedIngredients","targetSection","setTargetSection","debugIngredientMove","console","log","forEach","section","sectionIngredients","filter","ing","id","name","map","uncategorized","fetchStores","response","fetch","storesData","json","length","fetchStoreData","createDefaultStore","error","storeId","sectionsResponse","sectionsData","ingredientsResponse","ingredientsData","mappingsResponse","mappingsData","sectionMap","mapping","ingredient_id","section_id","method","headers","body","JSON","stringify","order","data","store_id","storesResponse","handleStoreChange","e","target","value","addNewSection","trim","alert","newSection","Date","now","removeSection","sectionId","s","toString","updatedSectionMap","Object","keys","ingredientId","toggleIngredientSelection","prev","selectAllInSection","newSelected","ingredient","clearSelections","moveSelectedIngredients","selectedIds","saveOrganization","sectionData","startsWith","index","uncategorizedIngredients","push","ok","Error","setTimeout","message","getIngredientsForSection","i","String","getUncategorizedIngredients","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","marginLeft","htmlFor","onChange","store","type","placeholder","disabled","checked","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/StoreOrganizerFixed.js"],"sourcesContent":["// StoreOrganizerSimple.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst StoreOrganizerSimple = () => {\r\n    const navigate = useNavigate();\r\n    const [sections, setSections] = useState([]);\r\n    const [ingredients, setIngredients] = useState([]);\r\n    const [stores, setStores] = useState([]);\r\n    const [selectedStore, setSelectedStore] = useState(null);\r\n    const [newSectionName, setNewSectionName] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const [saveSuccess, setSaveSuccess] = useState(false);\r\n\r\n    // Track which section an ingredient belongs to\r\n    const [ingredientSections, setIngredientSections] = useState({});\r\n    // Track which ingredients are selected for move operations\r\n    const [selectedIngredients, setSelectedIngredients] = useState({});\r\n    const [targetSection, setTargetSection] = useState(\"\");\r\n\r\n    // Add this function to your StoreOrganizerSimple component\r\n    const debugIngredientMove = () => {\r\n        console.log(\"=== DEBUG INGREDIENT MOVE ===\");\r\n        console.log(\"Current ingredient sections mapping:\", ingredientSections);\r\n        console.log(\"Selected ingredients:\", selectedIngredients);\r\n        console.log(\"Target section:\", targetSection);\r\n\r\n        // Check what ingredients should be in each section\r\n        sections.forEach(section => {\r\n            const sectionIngredients = ingredients.filter(ing =>\r\n                ingredientSections[ing.id] === section.id\r\n            );\r\n            console.log(`Section ${section.name} (${section.id}) should have:`,\r\n                sectionIngredients.map(ing => ing.name)\r\n            );\r\n        });\r\n\r\n        // Check uncategorized\r\n        const uncategorized = ingredients.filter(ing => !ingredientSections[ing.id]);\r\n        console.log(\"Uncategorized should have:\", uncategorized.map(ing => ing.name));\r\n    }\r\n\r\n    // Load all data\r\n    useEffect(() => {\r\n        const fetchStores = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const response = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n                const storesData = await response.json();\r\n                setStores(storesData);\r\n\r\n                if (storesData.length > 0) {\r\n                    setSelectedStore(storesData[0].id);\r\n                    fetchStoreData(storesData[0].id);\r\n                } else {\r\n                    await createDefaultStore();\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching stores:\", error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchStores();\r\n    }, []);\r\n\r\n    // Fetch all data for a store\r\n    const fetchStoreData = async (storeId) => {\r\n        try {\r\n            // Get sections\r\n            const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n            const sectionsData = await sectionsResponse.json();\r\n            setSections(sectionsData);\r\n\r\n            // Get all ingredients\r\n            const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\r\n            const ingredientsData = await ingredientsResponse.json();\r\n            setIngredients(ingredientsData);\r\n\r\n            // Get section mappings\r\n            const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n            const mappingsData = await mappingsResponse.json();\r\n\r\n            // Create a map of ingredient ID to section ID\r\n            const sectionMap = {};\r\n            mappingsData.forEach(mapping => {\r\n                sectionMap[mapping.ingredient_id] = mapping.section_id;\r\n            });\r\n\r\n            setIngredientSections(sectionMap);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error(\"Error fetching store data:\", error);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Create a default store if needed\r\n    const createDefaultStore = async () => {\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    name: \"My Store\",\r\n                    sections: [\r\n                        { name: \"Produce\", order: 0 },\r\n                        { name: \"Dairy\", order: 1 },\r\n                        { name: \"Meat\", order: 2 },\r\n                        { name: \"Bakery\", order: 3 },\r\n                        { name: \"Frozen\", order: 4 },\r\n                        { name: \"Canned Goods\", order: 5 },\r\n                        { name: \"Uncategorized\", order: 6 }\r\n                    ]\r\n                })\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.store_id) {\r\n                const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n                const storesData = await storesResponse.json();\r\n                setStores(storesData);\r\n\r\n                if (storesData.length > 0) {\r\n                    setSelectedStore(storesData[0].id);\r\n                    fetchStoreData(storesData[0].id);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error creating default store:\", error);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Handle store selection change\r\n    const handleStoreChange = (e) => {\r\n        const storeId = e.target.value;\r\n        setSelectedStore(storeId);\r\n        fetchStoreData(storeId);\r\n    };\r\n\r\n    // Add a new section\r\n    const addNewSection = () => {\r\n        if (!newSectionName.trim()) {\r\n            alert(\"Please enter a section name\");\r\n            return;\r\n        }\r\n\r\n        // We'll add it to the UI immediately, but it won't have an ID until it's saved\r\n        const newSection = {\r\n            id: `temp-${Date.now()}`,\r\n            name: newSectionName,\r\n            order: sections.length\r\n        };\r\n\r\n        setSections([...sections, newSection]);\r\n        setNewSectionName(\"\");\r\n    };\r\n\r\n    // Remove a section\r\n    const removeSection = (sectionId) => {\r\n        // Remove the section\r\n        setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n\r\n        // Update ingredient mappings\r\n        const updatedSectionMap = { ...ingredientSections };\r\n\r\n        // Remove all mappings to this section\r\n        Object.keys(updatedSectionMap).forEach(ingredientId => {\r\n            if (updatedSectionMap[ingredientId].toString() === sectionId.toString()) {\r\n                delete updatedSectionMap[ingredientId];\r\n            }\r\n        });\r\n\r\n        setIngredientSections(updatedSectionMap);\r\n    };\r\n\r\n    // Toggle ingredient selection\r\n    const toggleIngredientSelection = (ingredientId) => {\r\n        setSelectedIngredients(prev => ({\r\n            ...prev,\r\n            [ingredientId]: !prev[ingredientId]\r\n        }));\r\n    };\r\n\r\n    // Select all ingredients in a section\r\n    const selectAllInSection = (sectionId) => {\r\n        const newSelected = { ...selectedIngredients };\r\n\r\n        ingredients.forEach(ingredient => {\r\n            if (ingredientSections[ingredient.id] === sectionId) {\r\n                newSelected[ingredient.id] = true;\r\n            }\r\n        });\r\n\r\n        setSelectedIngredients(newSelected);\r\n    };\r\n\r\n    // Clear all selections\r\n    const clearSelections = () => {\r\n        setSelectedIngredients({});\r\n    };\r\n\r\n    const moveSelectedIngredients = () => {\r\n        if (!targetSection) {\r\n          alert(\"Please select a target section\");\r\n          return;\r\n        }\r\n        \r\n        const selectedIds = Object.keys(selectedIngredients).filter(id => selectedIngredients[id]);\r\n        \r\n        if (selectedIds.length === 0) {\r\n          alert(\"Please select at least one ingredient to move\");\r\n          return;\r\n        }\r\n        \r\n        console.log(\"Moving ingredients:\", selectedIds);\r\n        console.log(\"To section:\", targetSection);\r\n        \r\n        // Create a new mapping object (always create a new object for state updates)\r\n        const updatedSectionMap = { ...ingredientSections };\r\n        \r\n        selectedIds.forEach(ingredientId => {\r\n          updatedSectionMap[ingredientId] = targetSection;\r\n        });\r\n        \r\n        // Update the state\r\n        setIngredientSections(updatedSectionMap);\r\n        \r\n        // Clear selections\r\n        setSelectedIngredients({});\r\n        setTargetSection(\"\");\r\n      }\r\n\r\n    // Save organization to backend\r\n    const saveOrganization = async () => {\r\n        try {\r\n            // Convert our data structure to the format expected by the API\r\n            const sectionData = sections.map(section => {\r\n                // Get ingredients for this section\r\n                const sectionIngredients = ingredients.filter(ing =>\r\n                    ingredientSections[ing.id] === section.id\r\n                );\r\n\r\n                return {\r\n                    id: section.id.toString().startsWith('temp-') ? null : section.id,\r\n                    name: section.name,\r\n                    ingredients: sectionIngredients.map((ing, index) => ({\r\n                        id: ing.id,\r\n                        name: ing.name,\r\n                        order: index\r\n                    }))\r\n                };\r\n            });\r\n\r\n            // Get uncategorized ingredients (those without a section mapping)\r\n            const uncategorizedIngredients = ingredients.filter(ing =>\r\n                !ingredientSections[ing.id]\r\n            );\r\n\r\n            if (uncategorizedIngredients.length > 0) {\r\n                sectionData.push({\r\n                    id: null,\r\n                    name: \"Uncategorized\",\r\n                    ingredients: uncategorizedIngredients.map((ing, index) => ({\r\n                        id: ing.id,\r\n                        name: ing.name,\r\n                        order: index\r\n                    }))\r\n                });\r\n            }\r\n\r\n            // Send to API\r\n            const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    store_id: selectedStore,\r\n                    sections: sectionData\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to save organization\");\r\n            }\r\n\r\n            // Show success message\r\n            setSaveSuccess(true);\r\n            setTimeout(() => setSaveSuccess(false), 3000);\r\n\r\n            // Refresh data to get server-assigned IDs\r\n            fetchStoreData(selectedStore);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error saving organization:\", error);\r\n            alert(\"Error saving organization: \" + error.message);\r\n        }\r\n    };\r\n\r\n    // Get ingredients for a specific section\r\n// Get ingredients for a specific section\r\nconst getIngredientsForSection = (sectionId) => {\r\n    // Log for debugging\r\n    console.log(`Getting ingredients for section ${sectionId}`, \r\n      ingredients.filter(ing => ingredientSections[ing.id] === sectionId).map(i => i.name)\r\n    );\r\n    \r\n    // IMPORTANT: Convert both to strings for comparison\r\n    return ingredients.filter(ing => \r\n      String(ingredientSections[ing.id]) === String(sectionId)\r\n    );\r\n  };\r\n  \r\n  // Get uncategorized ingredients \r\n  const getUncategorizedIngredients = () => {\r\n    return ingredients.filter(ing => !ingredientSections[ing.id]);\r\n  };\r\n\r\n    return (\r\n        <div className=\"store-organizer-container\">\r\n            <div className=\"store-organizer-header\">\r\n                <h1>Store Section Organizer</h1>\r\n                {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n            </div>\r\n\r\n            <div className=\"store-organizer-controls\">\r\n                <button onClick={debugIngredientMove} style={{ marginLeft: '10px' }}>\r\n                    Debug Move\r\n                </button>\r\n                <button\r\n                    className=\"back-btn\"\r\n                    onClick={() => navigate('/grocery-list')}\r\n                >\r\n                    ← Back to Grocery List\r\n                </button>\r\n\r\n                <div className=\"store-selector\">\r\n                    <label htmlFor=\"store-select\">Select Store:</label>\r\n                    <select\r\n                        id=\"store-select\"\r\n                        value={selectedStore || \"\"}\r\n                        onChange={handleStoreChange}\r\n                    >\r\n                        {stores.map(store => (\r\n                            <option key={store.id} value={store.id}>{store.name}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"add-section-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newSectionName}\r\n                        onChange={(e) => setNewSectionName(e.target.value)}\r\n                        placeholder=\"New Section Name\"\r\n                    />\r\n                    <button onClick={addNewSection}>Add Section</button>\r\n                </div>\r\n\r\n                <button className=\"save-organization-btn\" onClick={saveOrganization}>\r\n                    Save Organization\r\n                </button>\r\n            </div>\r\n\r\n            {loading ? (\r\n                <div className=\"loading\">Loading sections and ingredients...</div>\r\n            ) : (\r\n                <div className=\"simple-organizer-layout\">\r\n                    {/* Ingredient Movement Controls */}\r\n                    <div className=\"movement-controls\">\r\n                        <h3>Move Selected Ingredients</h3>\r\n                        <div className=\"control-row\">\r\n                            <select\r\n                                value={targetSection}\r\n                                onChange={(e) => setTargetSection(e.target.value)}\r\n                            >\r\n                                <option value=\"\">Select Target Section</option>\r\n                                {sections.map(section => (\r\n                                    <option key={section.id} value={section.id}>\r\n                                        {section.name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                            <button\r\n                                onClick={moveSelectedIngredients}\r\n                                disabled={!targetSection}\r\n                            >\r\n                                Move Selected\r\n                            </button>\r\n                            <button onClick={clearSelections}>\r\n                                Clear Selection\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Section Grid */}\r\n                    <div className=\"section-grid\">\r\n                        {/* Uncategorized Section */}\r\n                        <div className=\"section-card\">\r\n                            <div className=\"section-header\">\r\n                                <h3>Uncategorized</h3>\r\n                                <button onClick={() => selectAllInSection(null)}>\r\n                                    Select All\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"ingredient-list\">\r\n                                {getUncategorizedIngredients().length > 0 ? (\r\n                                    getUncategorizedIngredients().map(ingredient => (\r\n                                        <div\r\n                                            key={ingredient.id}\r\n                                            className={`ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`}\r\n                                            onClick={() => toggleIngredientSelection(ingredient.id)}\r\n                                        >\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={!!selectedIngredients[ingredient.id]}\r\n                                                onChange={() => toggleIngredientSelection(ingredient.id)}\r\n                                            />\r\n                                            <span>{ingredient.name}</span>\r\n                                        </div>\r\n                                    ))\r\n                                ) : (\r\n                                    <div className=\"empty-section\">No uncategorized ingredients</div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Regular Sections */}\r\n                        {sections.map(section => (\r\n                            <div className=\"section-card\" key={section.id}>\r\n                                <div className=\"section-header\">\r\n                                    <h3>{section.name}</h3>\r\n                                    <div className=\"section-actions\">\r\n                                        <button onClick={() => selectAllInSection(section.id)}>\r\n                                            Select All\r\n                                        </button>\r\n                                        <button\r\n                                            className=\"remove-section-btn\"\r\n                                            onClick={() => removeSection(section.id)}\r\n                                        >\r\n                                            ✕\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"ingredient-list\">\r\n                                    {getIngredientsForSection(section.id).length > 0 ? (\r\n                                        getIngredientsForSection(section.id).map(ingredient => (\r\n                                            <div\r\n                                                key={ingredient.id}\r\n                                                className={`ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`}\r\n                                                onClick={() => toggleIngredientSelection(ingredient.id)}\r\n                                            >\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={!!selectedIngredients[ingredient.id]}\r\n                                                    onChange={() => toggleIngredientSelection(ingredient.id)}\r\n                                                />\r\n                                                <span>{ingredient.name}</span>\r\n                                            </div>\r\n                                        ))\r\n                                    ) : (\r\n                                        <div className=\"empty-section\">No ingredients in this section</div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"organizer-tip\">\r\n                <p>Tip: Check the ingredients you want to move, select a target section, and click \"Move Selected\".</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StoreOrganizerSimple;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}