{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\pages\\\\WeeklyPlanner.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/pages/weeklyPlanner.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction WeeklyPlanner() {\n  _s();\n  const navigate = useNavigate();\n  const [recipes, setRecipes] = useState([]);\n  const [weeklyPlan, setWeeklyPlan] = useState({\n    name: `Meal Plan for Week of ${new Date().toLocaleDateString()}`,\n    meals: []\n  });\n  const [availablePlans, setAvailablePlans] = useState([]);\n  const [selectedPlanId, setSelectedPlanId] = useState(\"\");\n  const [savedSuccessfully, setSavedSuccessfully] = useState(false);\n\n  // Days of the week\n  const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\n  // Available meal types\n  const defaultMealTypes = [\"Breakfast\", \"Lunch\", \"Dinner\"];\n\n  // Custom meal slots state\n  const [customMealSlots, setCustomMealSlots] = useState({});\n  const [newCustomSlot, setNewCustomSlot] = useState({\n    day: days[0],\n    name: \"\",\n    person: \"\"\n  });\n\n  // Fetch all recipes\n  useEffect(() => {\n    fetchRecipes();\n    fetchSavedPlans();\n  }, []);\n  const fetchRecipes = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/recipes\");\n      const data = await response.json();\n      setRecipes(data);\n    } catch (error) {\n      console.error(\"Error fetching recipes:\", error);\n    }\n  };\n  const fetchSavedPlans = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/weekly_plan_list\");\n      const data = await response.json();\n      setAvailablePlans(data);\n    } catch (error) {\n      console.error(\"Error fetching saved plans:\", error);\n    }\n  };\n  const fetchPlanDetails = async planId => {\n    if (!planId) return;\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/weekly_plan/${planId}`);\n      const data = await response.json();\n\n      // Transform the data to our expected format\n      const transformedPlan = {\n        name: data.name,\n        meals: data.meals.map(meal => ({\n          day: meal.day,\n          meal_type: meal.meal_type,\n          recipe_id: meal.recipe_id\n        }))\n      };\n      setWeeklyPlan(transformedPlan);\n\n      // Populate custom meal slots from existing data\n      const customSlots = {};\n      data.meals.forEach(meal => {\n        // If this isn't a default meal type, add it to custom slots\n        if (!defaultMealTypes.includes(meal.meal_type.split(\" (\")[0])) {\n          const [mealName, person] = meal.meal_type.includes(\" (\") ? [meal.meal_type.split(\" (\")[0], meal.meal_type.split(\" (\")[1].replace(\")\", \"\")] : [meal.meal_type, \"\"];\n          if (!customSlots[meal.day]) {\n            customSlots[meal.day] = [];\n          }\n          customSlots[meal.day].push({\n            name: mealName,\n            person: person\n          });\n        }\n      });\n      setCustomMealSlots(customSlots);\n    } catch (error) {\n      console.error(\"Error fetching plan details:\", error);\n    }\n  };\n\n  // Initialize meal slots for each day and default meal types\n  useEffect(() => {\n    const initialMeals = [];\n    days.forEach(day => {\n      defaultMealTypes.forEach(mealType => {\n        initialMeals.push({\n          day: day,\n          meal_type: mealType,\n          recipe_id: \"\"\n        });\n      });\n\n      // Add custom meal slots if any\n      if (customMealSlots[day]) {\n        customMealSlots[day].forEach(slot => {\n          const mealType = slot.person ? `${slot.name} (${slot.person})` : slot.name;\n          initialMeals.push({\n            day: day,\n            meal_type: mealType,\n            recipe_id: \"\"\n          });\n        });\n      }\n    });\n    setWeeklyPlan(prev => ({\n      ...prev,\n      meals: initialMeals\n    }));\n  }, [customMealSlots]);\n\n  // Handle recipe selection for a meal slot\n  const handleRecipeSelect = (day, mealType, recipeId) => {\n    setWeeklyPlan(prev => ({\n      ...prev,\n      meals: prev.meals.map(meal => {\n        if (meal.day === day && meal.meal_type === mealType) {\n          return {\n            ...meal,\n            recipe_id: recipeId\n          };\n        }\n        return meal;\n      })\n    }));\n  };\n\n  // Add a custom meal slot\n  const addCustomMealSlot = () => {\n    if (!newCustomSlot.name.trim()) {\n      alert(\"Please enter a name for the custom meal slot\");\n      return;\n    }\n    const day = newCustomSlot.day;\n    const newSlot = {\n      name: newCustomSlot.name,\n      person: newCustomSlot.person\n    };\n    setCustomMealSlots(prev => {\n      const updatedSlots = {\n        ...prev\n      };\n      if (!updatedSlots[day]) {\n        updatedSlots[day] = [];\n      }\n      updatedSlots[day] = [...updatedSlots[day], newSlot];\n      return updatedSlots;\n    });\n\n    // Reset the form\n    setNewCustomSlot({\n      day: days[0],\n      name: \"\",\n      person: \"\"\n    });\n  };\n\n  // Remove a custom meal slot\n  const removeCustomMealSlot = (day, index) => {\n    setCustomMealSlots(prev => {\n      const updatedSlots = {\n        ...prev\n      };\n      updatedSlots[day] = updatedSlots[day].filter((_, i) => i !== index);\n\n      // If there are no more slots for this day, remove the day entry\n      if (updatedSlots[day].length === 0) {\n        delete updatedSlots[day];\n      }\n      return updatedSlots;\n    });\n\n    // Also remove from the weekly plan if it exists\n    setWeeklyPlan(prev => {\n      var _prev$meals$find;\n      const mealType = (_prev$meals$find = prev.meals.find(meal => meal.day === day && meal.meal_type === `${customMealSlots[day][index].name} (${customMealSlots[day][index].person})`)) === null || _prev$meals$find === void 0 ? void 0 : _prev$meals$find.meal_type;\n      if (mealType) {\n        return {\n          ...prev,\n          meals: prev.meals.filter(meal => !(meal.day === day && meal.meal_type === mealType))\n        };\n      }\n      return prev;\n    });\n  };\n\n  // Save the weekly plan\n  const saveWeeklyPlan = async () => {\n    try {\n      // Filter out meals with no recipe selected\n      const filledMeals = weeklyPlan.meals.filter(meal => meal.recipe_id);\n      if (filledMeals.length === 0) {\n        alert(\"Please select at least one recipe for your meal plan\");\n        return;\n      }\n      const response = await fetch(\"http://127.0.0.1:5000/api/weekly_plan\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: weeklyPlan.name,\n          meals: filledMeals\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save weekly plan\");\n      }\n      const data = await response.json();\n      setSavedSuccessfully(true);\n\n      // Refresh the available plans list\n      fetchSavedPlans();\n\n      // Set a timeout to hide the success message after 3 seconds\n      setTimeout(() => {\n        setSavedSuccessfully(false);\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error saving weekly plan:\", error);\n      alert(\"Error saving weekly plan: \" + error.message);\n    }\n  };\n\n  // Generate grocery list without saving the plan\n  const generateGroceryList = async () => {\n    try {\n      // Filter out meals with no recipe selected\n      const filledMeals = weeklyPlan.meals.filter(meal => meal.recipe_id);\n      if (filledMeals.length === 0) {\n        alert(\"Please select at least one recipe for your meal plan\");\n        return;\n      }\n\n      // Navigate to grocery list page with plan data\n      // We'll need to create a new route and component for this\n      navigate(\"/grocery-list-preview\", {\n        state: {\n          meals: filledMeals,\n          planName: weeklyPlan.name\n        }\n      });\n    } catch (error) {\n      console.error(\"Error generating grocery list:\", error);\n      alert(\"Error generating grocery list: \" + error.message);\n    }\n  };\n\n  // Handle plan name change\n  const handlePlanNameChange = e => {\n    setWeeklyPlan(prev => ({\n      ...prev,\n      name: e.target.value\n    }));\n  };\n\n  // Handle selecting a saved plan\n  const handleSelectPlan = e => {\n    const planId = e.target.value;\n    setSelectedPlanId(planId);\n    if (planId) {\n      fetchPlanDetails(planId);\n    } else {\n      // Reset to default if \"Create New\" is selected\n      setWeeklyPlan({\n        name: `Meal Plan for Week of ${new Date().toLocaleDateString()}`,\n        meals: []\n      });\n      setCustomMealSlots({});\n    }\n  };\n\n  // Get recipe name by ID\n  const getRecipeName = recipeId => {\n    const recipe = recipes.find(r => r.id === parseInt(recipeId));\n    return recipe ? recipe.name : \"\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weekly-planner-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weekly-planner-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weekly Meal Planner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), savedSuccessfully && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: \"Plan saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plan-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"saved-plans\",\n          children: \"Load Saved Plan:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"saved-plans\",\n          value: selectedPlanId,\n          onChange: handleSelectPlan,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Create New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), availablePlans.map(plan => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: plan.id,\n            children: plan.name\n          }, plan.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-name-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"plan-name\",\n          children: \"Plan Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"plan-name\",\n          type: \"text\",\n          value: weeklyPlan.name,\n          onChange: handlePlanNameChange,\n          placeholder: \"Enter a name for your meal plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-plan-btn\",\n          onClick: saveWeeklyPlan,\n          children: \"Save Plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generate-list-btn\",\n          onClick: generateGroceryList,\n          children: \"Generate Grocery List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-meal-creator\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Custom Meal Slot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-meal-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"custom-day\",\n            children: \"Day:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"custom-day\",\n            value: newCustomSlot.day,\n            onChange: e => setNewCustomSlot({\n              ...newCustomSlot,\n              day: e.target.value\n            }),\n            children: days.map(day => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: day,\n              children: day\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"custom-name\",\n            children: \"Meal Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"custom-name\",\n            type: \"text\",\n            value: newCustomSlot.name,\n            onChange: e => setNewCustomSlot({\n              ...newCustomSlot,\n              name: e.target.value\n            }),\n            placeholder: \"e.g., Snack, Dessert\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"custom-person\",\n            children: \"Person (Optional):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"custom-person\",\n            type: \"text\",\n            value: newCustomSlot.person,\n            onChange: e => setNewCustomSlot({\n              ...newCustomSlot,\n              person: e.target.value\n            }),\n            placeholder: \"e.g., Johnny, Suzy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-custom-btn\",\n          onClick: addCustomMealSlot,\n          children: \"Add Meal Slot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meal-planner-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-headers\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meal-type-header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), \" \", days.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day-header\",\n          children: day\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), defaultMealTypes.map(mealType => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meal-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meal-type-label\",\n          children: mealType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 13\n        }, this), days.map(day => {\n          const meal = weeklyPlan.meals.find(m => m.day === day && m.meal_type === mealType);\n          const recipeId = meal ? meal.recipe_id : \"\";\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"meal-cell\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: recipeId,\n              onChange: e => handleRecipeSelect(day, mealType, e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a recipe...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 21\n              }, this), recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: recipe.id,\n                children: recipe.name\n              }, recipe.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 19\n            }, this), recipeId && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-recipe-name\",\n              children: getRecipeName(recipeId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 21\n            }, this)]\n          }, `${day}-${mealType}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 17\n          }, this);\n        })]\n      }, mealType, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this)), Object.entries(customMealSlots).map(([day, slots]) => slots.map((slot, index) => {\n        const mealType = slot.person ? `${slot.name} (${slot.person})` : slot.name;\n        const meal = weeklyPlan.meals.find(m => m.day === day && m.meal_type === mealType);\n        const recipeId = meal ? meal.recipe_id : \"\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-meal-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"meal-type-label custom-meal\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: mealType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-slot-btn\",\n              onClick: () => removeCustomMealSlot(day, index),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 17\n          }, this), days.map(gridDay => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `meal-cell ${gridDay === day ? 'active' : 'inactive'}`,\n            children: gridDay === day ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                value: recipeId,\n                onChange: e => handleRecipeSelect(day, mealType, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a recipe...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 500,\n                  columnNumber: 27\n                }, this), recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: recipe.id,\n                  children: recipe.name\n                }, recipe.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 502,\n                  columnNumber: 29\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 25\n              }, this), recipeId && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"selected-recipe-name\",\n                children: getRecipeName(recipeId)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true) : null\n          }, `${gridDay}-${mealType}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 19\n          }, this))]\n        }, `${day}-${mealType}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 15\n        }, this);\n      }))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n}\n_s(WeeklyPlanner, \"n8/JJrzC+iFO1g+ne0AyiPaYNKo=\", false, function () {\n  return [useNavigate];\n});\n_c = WeeklyPlanner;\nexport default WeeklyPlanner;\nvar _c;\n$RefreshReg$(_c, \"WeeklyPlanner\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","WeeklyPlanner","_s","navigate","recipes","setRecipes","weeklyPlan","setWeeklyPlan","name","Date","toLocaleDateString","meals","availablePlans","setAvailablePlans","selectedPlanId","setSelectedPlanId","savedSuccessfully","setSavedSuccessfully","days","defaultMealTypes","customMealSlots","setCustomMealSlots","newCustomSlot","setNewCustomSlot","day","person","fetchRecipes","fetchSavedPlans","response","fetch","data","json","error","console","fetchPlanDetails","planId","transformedPlan","map","meal","meal_type","recipe_id","customSlots","forEach","includes","split","mealName","replace","push","initialMeals","mealType","slot","prev","handleRecipeSelect","recipeId","addCustomMealSlot","trim","alert","newSlot","updatedSlots","removeCustomMealSlot","index","filter","_","i","length","_prev$meals$find","find","saveWeeklyPlan","filledMeals","method","headers","body","JSON","stringify","ok","Error","setTimeout","message","generateGroceryList","state","planName","handlePlanNameChange","e","target","value","handleSelectPlan","getRecipeName","recipe","r","id","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","plan","type","placeholder","onClick","m","Object","entries","slots","gridDay","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/pages/WeeklyPlanner.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../styles/pages/weeklyPlanner.css\";\r\n\r\nfunction WeeklyPlanner() {\r\n  const navigate = useNavigate();\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [weeklyPlan, setWeeklyPlan] = useState({\r\n    name: `Meal Plan for Week of ${new Date().toLocaleDateString()}`,\r\n    meals: []\r\n  });\r\n  const [availablePlans, setAvailablePlans] = useState([]);\r\n  const [selectedPlanId, setSelectedPlanId] = useState(\"\");\r\n  const [savedSuccessfully, setSavedSuccessfully] = useState(false);\r\n  \r\n  // Days of the week\r\n  const days = [\r\n    \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \r\n    \"Friday\", \"Saturday\", \"Sunday\"\r\n  ];\r\n  \r\n  // Available meal types\r\n  const defaultMealTypes = [\"Breakfast\", \"Lunch\", \"Dinner\"];\r\n  \r\n  // Custom meal slots state\r\n  const [customMealSlots, setCustomMealSlots] = useState({});\r\n  const [newCustomSlot, setNewCustomSlot] = useState({\r\n    day: days[0],\r\n    name: \"\",\r\n    person: \"\"\r\n  });\r\n\r\n  // Fetch all recipes\r\n  useEffect(() => {\r\n    fetchRecipes();\r\n    fetchSavedPlans();\r\n  }, []);\r\n\r\n  const fetchRecipes = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/recipes\");\r\n      const data = await response.json();\r\n      setRecipes(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching recipes:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchSavedPlans = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/weekly_plan_list\");\r\n      const data = await response.json();\r\n      setAvailablePlans(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching saved plans:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchPlanDetails = async (planId) => {\r\n    if (!planId) return;\r\n    \r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:5000/api/weekly_plan/${planId}`);\r\n      const data = await response.json();\r\n      \r\n      // Transform the data to our expected format\r\n      const transformedPlan = {\r\n        name: data.name,\r\n        meals: data.meals.map(meal => ({\r\n          day: meal.day,\r\n          meal_type: meal.meal_type,\r\n          recipe_id: meal.recipe_id\r\n        }))\r\n      };\r\n      \r\n      setWeeklyPlan(transformedPlan);\r\n      \r\n      // Populate custom meal slots from existing data\r\n      const customSlots = {};\r\n      data.meals.forEach(meal => {\r\n        // If this isn't a default meal type, add it to custom slots\r\n        if (!defaultMealTypes.includes(meal.meal_type.split(\" (\")[0])) {\r\n          const [mealName, person] = meal.meal_type.includes(\" (\") ? \r\n            [meal.meal_type.split(\" (\")[0], meal.meal_type.split(\" (\")[1].replace(\")\", \"\")] : \r\n            [meal.meal_type, \"\"];\r\n            \r\n          if (!customSlots[meal.day]) {\r\n            customSlots[meal.day] = [];\r\n          }\r\n          \r\n          customSlots[meal.day].push({\r\n            name: mealName,\r\n            person: person\r\n          });\r\n        }\r\n      });\r\n      \r\n      setCustomMealSlots(customSlots);\r\n    } catch (error) {\r\n      console.error(\"Error fetching plan details:\", error);\r\n    }\r\n  };\r\n\r\n  // Initialize meal slots for each day and default meal types\r\n  useEffect(() => {\r\n    const initialMeals = [];\r\n    \r\n    days.forEach(day => {\r\n      defaultMealTypes.forEach(mealType => {\r\n        initialMeals.push({\r\n          day: day,\r\n          meal_type: mealType,\r\n          recipe_id: \"\"\r\n        });\r\n      });\r\n      \r\n      // Add custom meal slots if any\r\n      if (customMealSlots[day]) {\r\n        customMealSlots[day].forEach(slot => {\r\n          const mealType = slot.person ? \r\n            `${slot.name} (${slot.person})` : \r\n            slot.name;\r\n            \r\n          initialMeals.push({\r\n            day: day,\r\n            meal_type: mealType,\r\n            recipe_id: \"\"\r\n          });\r\n        });\r\n      }\r\n    });\r\n    \r\n    setWeeklyPlan(prev => ({\r\n      ...prev,\r\n      meals: initialMeals\r\n    }));\r\n  }, [customMealSlots]);\r\n\r\n  // Handle recipe selection for a meal slot\r\n  const handleRecipeSelect = (day, mealType, recipeId) => {\r\n    setWeeklyPlan(prev => ({\r\n      ...prev,\r\n      meals: prev.meals.map(meal => {\r\n        if (meal.day === day && meal.meal_type === mealType) {\r\n          return { ...meal, recipe_id: recipeId };\r\n        }\r\n        return meal;\r\n      })\r\n    }));\r\n  };\r\n\r\n  // Add a custom meal slot\r\n  const addCustomMealSlot = () => {\r\n    if (!newCustomSlot.name.trim()) {\r\n      alert(\"Please enter a name for the custom meal slot\");\r\n      return;\r\n    }\r\n    \r\n    const day = newCustomSlot.day;\r\n    const newSlot = {\r\n      name: newCustomSlot.name,\r\n      person: newCustomSlot.person\r\n    };\r\n    \r\n    setCustomMealSlots(prev => {\r\n      const updatedSlots = { ...prev };\r\n      if (!updatedSlots[day]) {\r\n        updatedSlots[day] = [];\r\n      }\r\n      updatedSlots[day] = [...updatedSlots[day], newSlot];\r\n      return updatedSlots;\r\n    });\r\n    \r\n    // Reset the form\r\n    setNewCustomSlot({\r\n      day: days[0],\r\n      name: \"\",\r\n      person: \"\"\r\n    });\r\n  };\r\n\r\n  // Remove a custom meal slot\r\n  const removeCustomMealSlot = (day, index) => {\r\n    setCustomMealSlots(prev => {\r\n      const updatedSlots = { ...prev };\r\n      updatedSlots[day] = updatedSlots[day].filter((_, i) => i !== index);\r\n      \r\n      // If there are no more slots for this day, remove the day entry\r\n      if (updatedSlots[day].length === 0) {\r\n        delete updatedSlots[day];\r\n      }\r\n      \r\n      return updatedSlots;\r\n    });\r\n    \r\n    // Also remove from the weekly plan if it exists\r\n    setWeeklyPlan(prev => {\r\n      const mealType = prev.meals.find(meal => \r\n        meal.day === day && \r\n        meal.meal_type === `${customMealSlots[day][index].name} (${customMealSlots[day][index].person})`\r\n      )?.meal_type;\r\n      \r\n      if (mealType) {\r\n        return {\r\n          ...prev,\r\n          meals: prev.meals.filter(meal => !(meal.day === day && meal.meal_type === mealType))\r\n        };\r\n      }\r\n      \r\n      return prev;\r\n    });\r\n  };\r\n\r\n  // Save the weekly plan\r\n  const saveWeeklyPlan = async () => {\r\n    try {\r\n      // Filter out meals with no recipe selected\r\n      const filledMeals = weeklyPlan.meals.filter(meal => meal.recipe_id);\r\n      \r\n      if (filledMeals.length === 0) {\r\n        alert(\"Please select at least one recipe for your meal plan\");\r\n        return;\r\n      }\r\n      \r\n      const response = await fetch(\"http://127.0.0.1:5000/api/weekly_plan\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: weeklyPlan.name,\r\n          meals: filledMeals\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to save weekly plan\");\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setSavedSuccessfully(true);\r\n      \r\n      // Refresh the available plans list\r\n      fetchSavedPlans();\r\n      \r\n      // Set a timeout to hide the success message after 3 seconds\r\n      setTimeout(() => {\r\n        setSavedSuccessfully(false);\r\n      }, 3000);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error saving weekly plan:\", error);\r\n      alert(\"Error saving weekly plan: \" + error.message);\r\n    }\r\n  };\r\n\r\n  // Generate grocery list without saving the plan\r\n  const generateGroceryList = async () => {\r\n    try {\r\n      // Filter out meals with no recipe selected\r\n      const filledMeals = weeklyPlan.meals.filter(meal => meal.recipe_id);\r\n      \r\n      if (filledMeals.length === 0) {\r\n        alert(\"Please select at least one recipe for your meal plan\");\r\n        return;\r\n      }\r\n      \r\n      // Navigate to grocery list page with plan data\r\n      // We'll need to create a new route and component for this\r\n      navigate(\"/grocery-list-preview\", { \r\n        state: { \r\n          meals: filledMeals,\r\n          planName: weeklyPlan.name\r\n        } \r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error generating grocery list:\", error);\r\n      alert(\"Error generating grocery list: \" + error.message);\r\n    }\r\n  };\r\n\r\n  // Handle plan name change\r\n  const handlePlanNameChange = (e) => {\r\n    setWeeklyPlan(prev => ({\r\n      ...prev,\r\n      name: e.target.value\r\n    }));\r\n  };\r\n\r\n  // Handle selecting a saved plan\r\n  const handleSelectPlan = (e) => {\r\n    const planId = e.target.value;\r\n    setSelectedPlanId(planId);\r\n    \r\n    if (planId) {\r\n      fetchPlanDetails(planId);\r\n    } else {\r\n      // Reset to default if \"Create New\" is selected\r\n      setWeeklyPlan({\r\n        name: `Meal Plan for Week of ${new Date().toLocaleDateString()}`,\r\n        meals: []\r\n      });\r\n      setCustomMealSlots({});\r\n    }\r\n  };\r\n\r\n  // Get recipe name by ID\r\n  const getRecipeName = (recipeId) => {\r\n    const recipe = recipes.find(r => r.id === parseInt(recipeId));\r\n    return recipe ? recipe.name : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"weekly-planner-container\">\r\n      <div className=\"weekly-planner-header\">\r\n        <h1>Weekly Meal Planner</h1>\r\n        {savedSuccessfully && (\r\n          <div className=\"success-message\">\r\n            Plan saved successfully!\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"plan-controls\">\r\n        {/* Load saved plan dropdown */}\r\n        <div className=\"plan-selector\">\r\n          <label htmlFor=\"saved-plans\">Load Saved Plan:</label>\r\n          <select \r\n            id=\"saved-plans\" \r\n            value={selectedPlanId} \r\n            onChange={handleSelectPlan}\r\n          >\r\n            <option value=\"\">Create New</option>\r\n            {availablePlans.map(plan => (\r\n              <option key={plan.id} value={plan.id}>\r\n                {plan.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        {/* Plan name input */}\r\n        <div className=\"plan-name-container\">\r\n          <label htmlFor=\"plan-name\">Plan Name:</label>\r\n          <input \r\n            id=\"plan-name\"\r\n            type=\"text\" \r\n            value={weeklyPlan.name}\r\n            onChange={handlePlanNameChange}\r\n            placeholder=\"Enter a name for your meal plan\"\r\n          />\r\n        </div>\r\n        \r\n        {/* Save and generate grocery list buttons */}\r\n        <div className=\"plan-actions\">\r\n          <button \r\n            className=\"save-plan-btn\" \r\n            onClick={saveWeeklyPlan}\r\n          >\r\n            Save Plan\r\n          </button>\r\n          <button \r\n            className=\"generate-list-btn\" \r\n            onClick={generateGroceryList}\r\n          >\r\n            Generate Grocery List\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Custom meal slot creator */}\r\n      <div className=\"custom-meal-creator\">\r\n        <h3>Add Custom Meal Slot</h3>\r\n        <div className=\"custom-meal-form\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"custom-day\">Day:</label>\r\n            <select \r\n              id=\"custom-day\"\r\n              value={newCustomSlot.day} \r\n              onChange={(e) => setNewCustomSlot({...newCustomSlot, day: e.target.value})}\r\n            >\r\n              {days.map(day => (\r\n                <option key={day} value={day}>{day}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"custom-name\">Meal Name:</label>\r\n            <input \r\n              id=\"custom-name\"\r\n              type=\"text\" \r\n              value={newCustomSlot.name}\r\n              onChange={(e) => setNewCustomSlot({...newCustomSlot, name: e.target.value})}\r\n              placeholder=\"e.g., Snack, Dessert\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"custom-person\">Person (Optional):</label>\r\n            <input \r\n              id=\"custom-person\"\r\n              type=\"text\" \r\n              value={newCustomSlot.person}\r\n              onChange={(e) => setNewCustomSlot({...newCustomSlot, person: e.target.value})}\r\n              placeholder=\"e.g., Johnny, Suzy\"\r\n            />\r\n          </div>\r\n          \r\n          <button \r\n            className=\"add-custom-btn\"\r\n            onClick={addCustomMealSlot}\r\n          >\r\n            Add Meal Slot\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Weekly meal planner grid */}\r\n      <div className=\"meal-planner-grid\">\r\n        <div className=\"day-headers\">\r\n          <div className=\"meal-type-header\"></div> {/* Empty cell for alignment */}\r\n          {days.map(day => (\r\n            <div key={day} className=\"day-header\">\r\n              {day}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        {/* Default meal types */}\r\n        {defaultMealTypes.map(mealType => (\r\n          <div className=\"meal-row\" key={mealType}>\r\n            <div className=\"meal-type-label\">{mealType}</div>\r\n            {days.map(day => {\r\n              const meal = weeklyPlan.meals.find(\r\n                m => m.day === day && m.meal_type === mealType\r\n              );\r\n              const recipeId = meal ? meal.recipe_id : \"\";\r\n              \r\n              return (\r\n                <div key={`${day}-${mealType}`} className=\"meal-cell\">\r\n                  <select \r\n                    value={recipeId} \r\n                    onChange={(e) => handleRecipeSelect(day, mealType, e.target.value)}\r\n                  >\r\n                    <option value=\"\">Select a recipe...</option>\r\n                    {recipes.map(recipe => (\r\n                      <option key={recipe.id} value={recipe.id}>\r\n                        {recipe.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {recipeId && (\r\n                    <div className=\"selected-recipe-name\">\r\n                      {getRecipeName(recipeId)}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n        \r\n        {/* Custom meal slots for each day */}\r\n        {Object.entries(customMealSlots).map(([day, slots]) => \r\n          slots.map((slot, index) => {\r\n            const mealType = slot.person ? `${slot.name} (${slot.person})` : slot.name;\r\n            const meal = weeklyPlan.meals.find(\r\n              m => m.day === day && m.meal_type === mealType\r\n            );\r\n            const recipeId = meal ? meal.recipe_id : \"\";\r\n            \r\n            return (\r\n              <div \r\n                className=\"custom-meal-row\" \r\n                key={`${day}-${mealType}-${index}`}\r\n              >\r\n                <div className=\"meal-type-label custom-meal\">\r\n                  <span>{mealType}</span>\r\n                  <button \r\n                    className=\"remove-slot-btn\"\r\n                    onClick={() => removeCustomMealSlot(day, index)}\r\n                  >\r\n                    ✕\r\n                  </button>\r\n                </div>\r\n                \r\n                {days.map(gridDay => (\r\n                  <div \r\n                    key={`${gridDay}-${mealType}`} \r\n                    className={`meal-cell ${gridDay === day ? 'active' : 'inactive'}`}\r\n                  >\r\n                    {gridDay === day ? (\r\n                      <>\r\n                        <select \r\n                          value={recipeId} \r\n                          onChange={(e) => handleRecipeSelect(day, mealType, e.target.value)}\r\n                        >\r\n                          <option value=\"\">Select a recipe...</option>\r\n                          {recipes.map(recipe => (\r\n                            <option key={recipe.id} value={recipe.id}>\r\n                              {recipe.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                        {recipeId && (\r\n                          <div className=\"selected-recipe-name\">\r\n                            {getRecipeName(recipeId)}\r\n                          </div>\r\n                        )}\r\n                      </>\r\n                    ) : null}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeeklyPlanner;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}