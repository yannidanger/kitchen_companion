{"ast":null,"code":"var _jsxFileName = \"G:\\\\GroceriesProject\\\\Kitchenapp\\\\frontend\\\\src\\\\components\\\\StoreOrganizerFixed.js\",\n  _s = $RefreshSig$();\n// StoreOrganizerSimple.js\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StoreOrganizerSimple = () => {\n  _s();\n  const navigate = useNavigate();\n  const [sections, setSections] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [newSectionName, setNewSectionName] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n\n  // Track which section an ingredient belongs to\n  const [ingredientSections, setIngredientSections] = useState({});\n  // Track which ingredients are selected for move operations\n  const [selectedIngredients, setSelectedIngredients] = useState({});\n  const [targetSection, setTargetSection] = useState(\"\");\n\n  // Load all data\n  useEffect(() => {\n    const fetchStores = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await response.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n          fetchStoreData(storesData[0].id);\n        } else {\n          await createDefaultStore();\n        }\n      } catch (error) {\n        console.error(\"Error fetching stores:\", error);\n        setLoading(false);\n      }\n    };\n    fetchStores();\n  }, []);\n\n  // Fetch all data for a store\n  const fetchStoreData = async storeId => {\n    try {\n      // Get sections\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\n      const sectionsData = await sectionsResponse.json();\n      setSections(sectionsData);\n\n      // Get all ingredients\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\n      const ingredientsData = await ingredientsResponse.json();\n      setIngredients(ingredientsData);\n\n      // Get section mappings\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\n      const mappingsData = await mappingsResponse.json();\n\n      // Create a map of ingredient ID to section ID\n      const sectionMap = {};\n      mappingsData.forEach(mapping => {\n        sectionMap[mapping.ingredient_id] = mapping.section_id;\n      });\n      setIngredientSections(sectionMap);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching store data:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Create a default store if needed\n  const createDefaultStore = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: \"My Store\",\n          sections: [{\n            name: \"Produce\",\n            order: 0\n          }, {\n            name: \"Dairy\",\n            order: 1\n          }, {\n            name: \"Meat\",\n            order: 2\n          }, {\n            name: \"Bakery\",\n            order: 3\n          }, {\n            name: \"Frozen\",\n            order: 4\n          }, {\n            name: \"Canned Goods\",\n            order: 5\n          }, {\n            name: \"Uncategorized\",\n            order: 6\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.store_id) {\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n        if (storesData.length > 0) {\n          setSelectedStore(storesData[0].id);\n          fetchStoreData(storesData[0].id);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error creating default store:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Handle store selection change\n  const handleStoreChange = e => {\n    const storeId = e.target.value;\n    setSelectedStore(storeId);\n    fetchStoreData(storeId);\n  };\n\n  // Add a new section\n  const addNewSection = () => {\n    if (!newSectionName.trim()) {\n      alert(\"Please enter a section name\");\n      return;\n    }\n\n    // We'll add it to the UI immediately, but it won't have an ID until it's saved\n    const newSection = {\n      id: `temp-${Date.now()}`,\n      name: newSectionName,\n      order: sections.length\n    };\n    setSections([...sections, newSection]);\n    setNewSectionName(\"\");\n  };\n\n  // Remove a section\n  const removeSection = sectionId => {\n    // Remove the section\n    setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\n\n    // Update ingredient mappings\n    const updatedSectionMap = {\n      ...ingredientSections\n    };\n\n    // Remove all mappings to this section\n    Object.keys(updatedSectionMap).forEach(ingredientId => {\n      if (updatedSectionMap[ingredientId].toString() === sectionId.toString()) {\n        delete updatedSectionMap[ingredientId];\n      }\n    });\n    setIngredientSections(updatedSectionMap);\n  };\n\n  // Toggle ingredient selection\n  const toggleIngredientSelection = ingredientId => {\n    setSelectedIngredients(prev => ({\n      ...prev,\n      [ingredientId]: !prev[ingredientId]\n    }));\n  };\n\n  // Select all ingredients in a section\n  const selectAllInSection = sectionId => {\n    const newSelected = {\n      ...selectedIngredients\n    };\n    ingredients.forEach(ingredient => {\n      if (ingredientSections[ingredient.id] === sectionId) {\n        newSelected[ingredient.id] = true;\n      }\n    });\n    setSelectedIngredients(newSelected);\n  };\n\n  // Clear all selections\n  const clearSelections = () => {\n    setSelectedIngredients({});\n  };\n\n  // Move selected ingredients to target section\n  const moveSelectedIngredients = () => {\n    if (!targetSection) {\n      alert(\"Please select a target section\");\n      return;\n    }\n    const selectedIds = Object.keys(selectedIngredients).filter(id => selectedIngredients[id]);\n    if (selectedIds.length === 0) {\n      alert(\"Please select at least one ingredient to move\");\n      return;\n    }\n\n    // Update ingredient section mappings\n    const updatedSectionMap = {\n      ...ingredientSections\n    };\n    selectedIds.forEach(ingredientId => {\n      updatedSectionMap[ingredientId] = targetSection;\n    });\n    setIngredientSections(updatedSectionMap);\n    setSelectedIngredients({});\n    setTargetSection(\"\");\n  };\n\n  // Save organization to backend\n  const saveOrganization = async () => {\n    try {\n      // Convert our data structure to the format expected by the API\n      const sectionData = sections.map(section => {\n        // Get ingredients for this section\n        const sectionIngredients = ingredients.filter(ing => ingredientSections[ing.id] === section.id);\n        return {\n          id: section.id.toString().startsWith('temp-') ? null : section.id,\n          name: section.name,\n          ingredients: sectionIngredients.map((ing, index) => ({\n            id: ing.id,\n            name: ing.name,\n            order: index\n          }))\n        };\n      });\n\n      // Get uncategorized ingredients (those without a section mapping)\n      const uncategorizedIngredients = ingredients.filter(ing => !ingredientSections[ing.id]);\n      if (uncategorizedIngredients.length > 0) {\n        sectionData.push({\n          id: null,\n          name: \"Uncategorized\",\n          ingredients: uncategorizedIngredients.map((ing, index) => ({\n            id: ing.id,\n            name: ing.name,\n            order: index\n          }))\n        });\n      }\n\n      // Send to API\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          store_id: selectedStore,\n          sections: sectionData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save organization\");\n      }\n\n      // Show success message\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 3000);\n\n      // Refresh data to get server-assigned IDs\n      fetchStoreData(selectedStore);\n    } catch (error) {\n      console.error(\"Error saving organization:\", error);\n      alert(\"Error saving organization: \" + error.message);\n    }\n  };\n\n  // Get ingredients for a specific section\n  const getIngredientsForSection = sectionId => {\n    return ingredients.filter(ing => ingredientSections[ing.id] === sectionId);\n  };\n\n  // Get uncategorized ingredients\n  const getUncategorizedIngredients = () => {\n    return ingredients.filter(ing => !ingredientSections[ing.id]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"store-organizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Store Section Organizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save-success-message\",\n        children: \"Organization saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store-organizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: () => navigate('/grocery-list'),\n        children: \"\\u2190 Back to Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"store-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"store-select\",\n          children: \"Select Store:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"store-select\",\n          value: selectedStore || \"\",\n          onChange: handleStoreChange,\n          children: stores.map(store => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: store.id,\n            children: store.name\n          }, store.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-section-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newSectionName,\n          onChange: e => setNewSectionName(e.target.value),\n          placeholder: \"New Section Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewSection,\n          children: \"Add Section\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-organization-btn\",\n        onClick: saveOrganization,\n        children: \"Save Organization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading sections and ingredients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simple-organizer-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movement-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move Selected Ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: targetSection,\n            onChange: e => setTargetSection(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Target Section\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this), sections.map(section => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: section.id,\n              children: section.name\n            }, section.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: moveSelectedIngredients,\n            disabled: !targetSection,\n            children: \"Move Selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearSelections,\n            children: \"Clear Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Uncategorized\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => selectAllInSection(null),\n              children: \"Select All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ingredient-list\",\n            children: getUncategorizedIngredients().length > 0 ? getUncategorizedIngredients().map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`,\n              onClick: () => toggleIngredientSelection(ingredient.id),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: !!selectedIngredients[ingredient.id],\n                onChange: () => toggleIngredientSelection(ingredient.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: ingredient.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 23\n              }, this)]\n            }, ingredient.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 21\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-section\",\n              children: \"No uncategorized ingredients\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), sections.map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: section.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => selectAllInSection(section.id),\n                children: \"Select All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"remove-section-btn\",\n                onClick: () => removeSection(section.id),\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ingredient-list\",\n            children: getIngredientsForSection(section.id).length > 0 ? getIngredientsForSection(section.id).map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`,\n              onClick: () => toggleIngredientSelection(ingredient.id),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: !!selectedIngredients[ingredient.id],\n                onChange: () => toggleIngredientSelection(ingredient.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: ingredient.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 25\n              }, this)]\n            }, ingredient.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 23\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-section\",\n              children: \"No ingredients in this section\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 17\n          }, this)]\n        }, section.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organizer-tip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tip: Check the ingredients you want to move, select a target section, and click \\\"Move Selected\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(StoreOrganizerSimple, \"zINns1D/g08YrP2OB0FQiSSJQEg=\", false, function () {\n  return [useNavigate];\n});\n_c = StoreOrganizerSimple;\nexport default StoreOrganizerSimple;\nvar _c;\n$RefreshReg$(_c, \"StoreOrganizerSimple\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","StoreOrganizerSimple","_s","navigate","sections","setSections","ingredients","setIngredients","stores","setStores","selectedStore","setSelectedStore","newSectionName","setNewSectionName","loading","setLoading","saveSuccess","setSaveSuccess","ingredientSections","setIngredientSections","selectedIngredients","setSelectedIngredients","targetSection","setTargetSection","fetchStores","response","fetch","storesData","json","length","id","fetchStoreData","createDefaultStore","error","console","storeId","sectionsResponse","sectionsData","ingredientsResponse","ingredientsData","mappingsResponse","mappingsData","sectionMap","forEach","mapping","ingredient_id","section_id","method","headers","body","JSON","stringify","name","order","data","store_id","storesResponse","handleStoreChange","e","target","value","addNewSection","trim","alert","newSection","Date","now","removeSection","sectionId","filter","s","toString","updatedSectionMap","Object","keys","ingredientId","toggleIngredientSelection","prev","selectAllInSection","newSelected","ingredient","clearSelections","moveSelectedIngredients","selectedIds","saveOrganization","sectionData","map","section","sectionIngredients","ing","startsWith","index","uncategorizedIngredients","push","ok","Error","setTimeout","message","getIngredientsForSection","getUncategorizedIngredients","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","htmlFor","onChange","store","type","placeholder","disabled","checked","_c","$RefreshReg$"],"sources":["G:/GroceriesProject/Kitchenapp/frontend/src/components/StoreOrganizerFixed.js"],"sourcesContent":["// StoreOrganizerSimple.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst StoreOrganizerSimple = () => {\r\n  const navigate = useNavigate();\r\n  const [sections, setSections] = useState([]);\r\n  const [ingredients, setIngredients] = useState([]);\r\n  const [stores, setStores] = useState([]);\r\n  const [selectedStore, setSelectedStore] = useState(null);\r\n  const [newSectionName, setNewSectionName] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  \r\n  // Track which section an ingredient belongs to\r\n  const [ingredientSections, setIngredientSections] = useState({});\r\n  // Track which ingredients are selected for move operations\r\n  const [selectedIngredients, setSelectedIngredients] = useState({});\r\n  const [targetSection, setTargetSection] = useState(\"\");\r\n\r\n  // Load all data\r\n  useEffect(() => {\r\n    const fetchStores = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n        const storesData = await response.json();\r\n        setStores(storesData);\r\n        \r\n        if (storesData.length > 0) {\r\n          setSelectedStore(storesData[0].id);\r\n          fetchStoreData(storesData[0].id);\r\n        } else {\r\n          await createDefaultStore();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching stores:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchStores();\r\n  }, []);\r\n\r\n  // Fetch all data for a store\r\n  const fetchStoreData = async (storeId) => {\r\n    try {\r\n      // Get sections\r\n      const sectionsResponse = await fetch(`http://127.0.0.1:5000/api/stores/${storeId}/sections`);\r\n      const sectionsData = await sectionsResponse.json();\r\n      setSections(sectionsData);\r\n      \r\n      // Get all ingredients\r\n      const ingredientsResponse = await fetch(\"http://127.0.0.1:5000/api/ingredients\");\r\n      const ingredientsData = await ingredientsResponse.json();\r\n      setIngredients(ingredientsData);\r\n      \r\n      // Get section mappings\r\n      const mappingsResponse = await fetch(`http://127.0.0.1:5000/api/ingredient_sections?store_id=${storeId}`);\r\n      const mappingsData = await mappingsResponse.json();\r\n      \r\n      // Create a map of ingredient ID to section ID\r\n      const sectionMap = {};\r\n      mappingsData.forEach(mapping => {\r\n        sectionMap[mapping.ingredient_id] = mapping.section_id;\r\n      });\r\n      \r\n      setIngredientSections(sectionMap);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching store data:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Create a default store if needed\r\n  const createDefaultStore = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/stores\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: \"My Store\",\r\n          sections: [\r\n            { name: \"Produce\", order: 0 },\r\n            { name: \"Dairy\", order: 1 },\r\n            { name: \"Meat\", order: 2 },\r\n            { name: \"Bakery\", order: 3 },\r\n            { name: \"Frozen\", order: 4 },\r\n            { name: \"Canned Goods\", order: 5 },\r\n            { name: \"Uncategorized\", order: 6 }\r\n          ]\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.store_id) {\r\n        const storesResponse = await fetch(\"http://127.0.0.1:5000/api/stores\");\r\n        const storesData = await storesResponse.json();\r\n        setStores(storesData);\r\n        \r\n        if (storesData.length > 0) {\r\n          setSelectedStore(storesData[0].id);\r\n          fetchStoreData(storesData[0].id);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating default store:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle store selection change\r\n  const handleStoreChange = (e) => {\r\n    const storeId = e.target.value;\r\n    setSelectedStore(storeId);\r\n    fetchStoreData(storeId);\r\n  };\r\n\r\n  // Add a new section\r\n  const addNewSection = () => {\r\n    if (!newSectionName.trim()) {\r\n      alert(\"Please enter a section name\");\r\n      return;\r\n    }\r\n\r\n    // We'll add it to the UI immediately, but it won't have an ID until it's saved\r\n    const newSection = {\r\n      id: `temp-${Date.now()}`,\r\n      name: newSectionName,\r\n      order: sections.length\r\n    };\r\n\r\n    setSections([...sections, newSection]);\r\n    setNewSectionName(\"\");\r\n  };\r\n\r\n  // Remove a section\r\n  const removeSection = (sectionId) => {\r\n    // Remove the section\r\n    setSections(sections.filter(s => s.id.toString() !== sectionId.toString()));\r\n    \r\n    // Update ingredient mappings\r\n    const updatedSectionMap = { ...ingredientSections };\r\n    \r\n    // Remove all mappings to this section\r\n    Object.keys(updatedSectionMap).forEach(ingredientId => {\r\n      if (updatedSectionMap[ingredientId].toString() === sectionId.toString()) {\r\n        delete updatedSectionMap[ingredientId];\r\n      }\r\n    });\r\n    \r\n    setIngredientSections(updatedSectionMap);\r\n  };\r\n\r\n  // Toggle ingredient selection\r\n  const toggleIngredientSelection = (ingredientId) => {\r\n    setSelectedIngredients(prev => ({\r\n      ...prev,\r\n      [ingredientId]: !prev[ingredientId]\r\n    }));\r\n  };\r\n\r\n  // Select all ingredients in a section\r\n  const selectAllInSection = (sectionId) => {\r\n    const newSelected = { ...selectedIngredients };\r\n    \r\n    ingredients.forEach(ingredient => {\r\n      if (ingredientSections[ingredient.id] === sectionId) {\r\n        newSelected[ingredient.id] = true;\r\n      }\r\n    });\r\n    \r\n    setSelectedIngredients(newSelected);\r\n  };\r\n\r\n  // Clear all selections\r\n  const clearSelections = () => {\r\n    setSelectedIngredients({});\r\n  };\r\n\r\n  // Move selected ingredients to target section\r\n  const moveSelectedIngredients = () => {\r\n    if (!targetSection) {\r\n      alert(\"Please select a target section\");\r\n      return;\r\n    }\r\n    \r\n    const selectedIds = Object.keys(selectedIngredients).filter(id => selectedIngredients[id]);\r\n    \r\n    if (selectedIds.length === 0) {\r\n      alert(\"Please select at least one ingredient to move\");\r\n      return;\r\n    }\r\n    \r\n    // Update ingredient section mappings\r\n    const updatedSectionMap = { ...ingredientSections };\r\n    \r\n    selectedIds.forEach(ingredientId => {\r\n      updatedSectionMap[ingredientId] = targetSection;\r\n    });\r\n    \r\n    setIngredientSections(updatedSectionMap);\r\n    setSelectedIngredients({});\r\n    setTargetSection(\"\");\r\n  };\r\n\r\n  // Save organization to backend\r\n  const saveOrganization = async () => {\r\n    try {\r\n      // Convert our data structure to the format expected by the API\r\n      const sectionData = sections.map(section => {\r\n        // Get ingredients for this section\r\n        const sectionIngredients = ingredients.filter(ing => \r\n          ingredientSections[ing.id] === section.id\r\n        );\r\n        \r\n        return {\r\n          id: section.id.toString().startsWith('temp-') ? null : section.id,\r\n          name: section.name,\r\n          ingredients: sectionIngredients.map((ing, index) => ({\r\n            id: ing.id,\r\n            name: ing.name,\r\n            order: index\r\n          }))\r\n        };\r\n      });\r\n      \r\n      // Get uncategorized ingredients (those without a section mapping)\r\n      const uncategorizedIngredients = ingredients.filter(ing => \r\n        !ingredientSections[ing.id]\r\n      );\r\n      \r\n      if (uncategorizedIngredients.length > 0) {\r\n        sectionData.push({\r\n          id: null,\r\n          name: \"Uncategorized\",\r\n          ingredients: uncategorizedIngredients.map((ing, index) => ({\r\n            id: ing.id,\r\n            name: ing.name,\r\n            order: index\r\n          }))\r\n        });\r\n      }\r\n      \r\n      // Send to API\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/save_ingredient_sections\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          store_id: selectedStore,\r\n          sections: sectionData\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to save organization\");\r\n      }\r\n      \r\n      // Show success message\r\n      setSaveSuccess(true);\r\n      setTimeout(() => setSaveSuccess(false), 3000);\r\n      \r\n      // Refresh data to get server-assigned IDs\r\n      fetchStoreData(selectedStore);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error saving organization:\", error);\r\n      alert(\"Error saving organization: \" + error.message);\r\n    }\r\n  };\r\n\r\n  // Get ingredients for a specific section\r\n  const getIngredientsForSection = (sectionId) => {\r\n    return ingredients.filter(ing => ingredientSections[ing.id] === sectionId);\r\n  };\r\n\r\n  // Get uncategorized ingredients\r\n  const getUncategorizedIngredients = () => {\r\n    return ingredients.filter(ing => !ingredientSections[ing.id]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"store-organizer-container\">\r\n      <div className=\"store-organizer-header\">\r\n        <h1>Store Section Organizer</h1>\r\n        {saveSuccess && <div className=\"save-success-message\">Organization saved successfully!</div>}\r\n      </div>\r\n\r\n      <div className=\"store-organizer-controls\">\r\n        <button\r\n          className=\"back-btn\"\r\n          onClick={() => navigate('/grocery-list')}\r\n        >\r\n          ← Back to Grocery List\r\n        </button>\r\n\r\n        <div className=\"store-selector\">\r\n          <label htmlFor=\"store-select\">Select Store:</label>\r\n          <select\r\n            id=\"store-select\"\r\n            value={selectedStore || \"\"}\r\n            onChange={handleStoreChange}\r\n          >\r\n            {stores.map(store => (\r\n              <option key={store.id} value={store.id}>{store.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"add-section-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={newSectionName}\r\n            onChange={(e) => setNewSectionName(e.target.value)}\r\n            placeholder=\"New Section Name\"\r\n          />\r\n          <button onClick={addNewSection}>Add Section</button>\r\n        </div>\r\n\r\n        <button className=\"save-organization-btn\" onClick={saveOrganization}>\r\n          Save Organization\r\n        </button>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div className=\"loading\">Loading sections and ingredients...</div>\r\n      ) : (\r\n        <div className=\"simple-organizer-layout\">\r\n          {/* Ingredient Movement Controls */}\r\n          <div className=\"movement-controls\">\r\n            <h3>Move Selected Ingredients</h3>\r\n            <div className=\"control-row\">\r\n              <select \r\n                value={targetSection} \r\n                onChange={(e) => setTargetSection(e.target.value)}\r\n              >\r\n                <option value=\"\">Select Target Section</option>\r\n                {sections.map(section => (\r\n                  <option key={section.id} value={section.id}>\r\n                    {section.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <button \r\n                onClick={moveSelectedIngredients}\r\n                disabled={!targetSection}\r\n              >\r\n                Move Selected\r\n              </button>\r\n              <button onClick={clearSelections}>\r\n                Clear Selection\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Section Grid */}\r\n          <div className=\"section-grid\">\r\n            {/* Uncategorized Section */}\r\n            <div className=\"section-card\">\r\n              <div className=\"section-header\">\r\n                <h3>Uncategorized</h3>\r\n                <button onClick={() => selectAllInSection(null)}>\r\n                  Select All\r\n                </button>\r\n              </div>\r\n              <div className=\"ingredient-list\">\r\n                {getUncategorizedIngredients().length > 0 ? (\r\n                  getUncategorizedIngredients().map(ingredient => (\r\n                    <div \r\n                      key={ingredient.id} \r\n                      className={`ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`}\r\n                      onClick={() => toggleIngredientSelection(ingredient.id)}\r\n                    >\r\n                      <input \r\n                        type=\"checkbox\" \r\n                        checked={!!selectedIngredients[ingredient.id]} \r\n                        onChange={() => toggleIngredientSelection(ingredient.id)}\r\n                      />\r\n                      <span>{ingredient.name}</span>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"empty-section\">No uncategorized ingredients</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Regular Sections */}\r\n            {sections.map(section => (\r\n              <div className=\"section-card\" key={section.id}>\r\n                <div className=\"section-header\">\r\n                  <h3>{section.name}</h3>\r\n                  <div className=\"section-actions\">\r\n                    <button onClick={() => selectAllInSection(section.id)}>\r\n                      Select All\r\n                    </button>\r\n                    <button \r\n                      className=\"remove-section-btn\"\r\n                      onClick={() => removeSection(section.id)}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"ingredient-list\">\r\n                  {getIngredientsForSection(section.id).length > 0 ? (\r\n                    getIngredientsForSection(section.id).map(ingredient => (\r\n                      <div \r\n                        key={ingredient.id} \r\n                        className={`ingredient-item ${selectedIngredients[ingredient.id] ? 'selected' : ''}`}\r\n                        onClick={() => toggleIngredientSelection(ingredient.id)}\r\n                      >\r\n                        <input \r\n                          type=\"checkbox\" \r\n                          checked={!!selectedIngredients[ingredient.id]} \r\n                          onChange={() => toggleIngredientSelection(ingredient.id)}\r\n                        />\r\n                        <span>{ingredient.name}</span>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <div className=\"empty-section\">No ingredients in this section</div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"organizer-tip\">\r\n        <p>Tip: Check the ingredients you want to move, select a target section, and click \"Move Selected\".</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoreOrganizerSimple;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}